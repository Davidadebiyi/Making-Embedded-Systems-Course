
Blinky_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800668c  0800668c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800668c  0800668c  0001668c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000005cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005d8  200005d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020860  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d0  00000000  00000000  0004089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  00044a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a8  00000000  00000000  000463d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277fb  00000000  00000000  00047b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002135e  00000000  00000000  0006f37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e412b  00000000  00000000  000906d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00174804  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006af8  00000000  00000000  00174858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006654 	.word	0x08006654

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08006654 	.word	0x08006654

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_CRC_Init+0x20>)
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <MX_CRC_Init+0x24>)
 80004ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_CRC_Init+0x20>)
 80004f0:	f001 f9ee 	bl	80018d0 <HAL_CRC_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fa:	f000 fd9d 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	40023000 	.word	0x40023000

0800050c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_CRC_MspInit+0x3c>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d10d      	bne.n	800053a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023000 	.word	0x40023000
 800054c:	40023800 	.word	0x40023800

08000550 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_DMA2D_Init+0x60>)
 8000558:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800055c:	2200      	movs	r2, #0
 800055e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000586:	f001 f9bf 	bl	8001908 <HAL_DMA2D_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000590:	f000 fd52 	bl	8001038 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000594:	2101      	movs	r1, #1
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_DMA2D_Init+0x5c>)
 8000598:	f001 fb10 	bl	8001bbc <HAL_DMA2D_ConfigLayer>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005a2:	f000 fd49 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000034 	.word	0x20000034
 80005b0:	4002b000 	.word	0x4002b000

080005b4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_DMA2D_MspInit+0x48>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d115      	bne.n	80005f2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2105      	movs	r1, #5
 80005e6:	205a      	movs	r0, #90	; 0x5a
 80005e8:	f001 f948 	bl	800187c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005ec:	205a      	movs	r0, #90	; 0x5a
 80005ee:	f001 f961 	bl	80018b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	4002b000 	.word	0x4002b000
 8000600:	40023800 	.word	0x40023800

08000604 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_FMC_Init+0x98>)
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_FMC_Init+0x9c>)
 8000620:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_FMC_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_FMC_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_FMC_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_FMC_Init+0x98>)
 8000636:	2210      	movs	r2, #16
 8000638:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_FMC_Init+0x98>)
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_FMC_Init+0x98>)
 8000642:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000646:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_FMC_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_FMC_Init+0x98>)
 8000650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000654:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_FMC_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_FMC_Init+0x98>)
 800065e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_FMC_Init+0x98>)
 8000686:	f004 fba9 	bl	8004ddc <HAL_SDRAM_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000690:	f000 fcd2 	bl	8001038 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000074 	.word	0x20000074
 80006a0:	a0000140 	.word	0xa0000140

080006a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_FMC_MspInit+0xe8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d160      	bne.n	8000782 <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <HAL_FMC_MspInit+0xe8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <HAL_FMC_MspInit+0xec>)
 80006cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ce:	4a30      	ldr	r2, [pc, #192]	; (8000790 <HAL_FMC_MspInit+0xec>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <HAL_FMC_MspInit+0xec>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4825      	ldr	r0, [pc, #148]	; (8000794 <HAL_FMC_MspInit+0xf0>)
 80006fe:	f001 faef 	bl	8001ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000702:	f248 1333 	movw	r3, #33075	; 0x8133
 8000706:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000714:	230c      	movs	r3, #12
 8000716:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <HAL_FMC_MspInit+0xf4>)
 800071e:	f001 fadf 	bl	8001ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000722:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000726:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000734:	230c      	movs	r3, #12
 8000736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4619      	mov	r1, r3
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <HAL_FMC_MspInit+0xf8>)
 800073e:	f001 facf 	bl	8001ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000742:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000746:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000754:	230c      	movs	r3, #12
 8000756:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <HAL_FMC_MspInit+0xfc>)
 800075e:	f001 fabf 	bl	8001ce0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <HAL_FMC_MspInit+0x100>)
 800077c:	f001 fab0 	bl	8001ce0 <HAL_GPIO_Init>
 8000780:	e000      	b.n	8000784 <HAL_FMC_MspInit+0xe0>
    return;
 8000782:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40023800 	.word	0x40023800
 8000794:	40021400 	.word	0x40021400
 8000798:	40021800 	.word	0x40021800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40020400 	.word	0x40020400

080007a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007b0:	f7ff ff78 	bl	80006a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	4b8b      	ldr	r3, [pc, #556]	; (8000a04 <MX_GPIO_Init+0x248>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a8a      	ldr	r2, [pc, #552]	; (8000a04 <MX_GPIO_Init+0x248>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b88      	ldr	r3, [pc, #544]	; (8000a04 <MX_GPIO_Init+0x248>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	623b      	str	r3, [r7, #32]
 80007ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	4b84      	ldr	r3, [pc, #528]	; (8000a04 <MX_GPIO_Init+0x248>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a83      	ldr	r2, [pc, #524]	; (8000a04 <MX_GPIO_Init+0x248>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b81      	ldr	r3, [pc, #516]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b7d      	ldr	r3, [pc, #500]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a7c      	ldr	r2, [pc, #496]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <MX_GPIO_Init+0x248>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b76      	ldr	r3, [pc, #472]	; (8000a04 <MX_GPIO_Init+0x248>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a75      	ldr	r2, [pc, #468]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b73      	ldr	r3, [pc, #460]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b6f      	ldr	r3, [pc, #444]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6e      	ldr	r2, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x248>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b68      	ldr	r3, [pc, #416]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a67      	ldr	r2, [pc, #412]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b61      	ldr	r3, [pc, #388]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a60      	ldr	r2, [pc, #384]	; (8000a04 <MX_GPIO_Init+0x248>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <MX_GPIO_Init+0x248>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x248>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a59      	ldr	r2, [pc, #356]	; (8000a04 <MX_GPIO_Init+0x248>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <MX_GPIO_Init+0x248>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blinker_LED_GPIO_Port, Blinker_LED_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2104      	movs	r1, #4
 80008b6:	4854      	ldr	r0, [pc, #336]	; (8000a08 <MX_GPIO_Init+0x24c>)
 80008b8:	f001 fbd6 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Green_boxy_LED_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2117      	movs	r1, #23
 80008c0:	4852      	ldr	r0, [pc, #328]	; (8000a0c <MX_GPIO_Init+0x250>)
 80008c2:	f001 fbd1 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	4851      	ldr	r0, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x254>)
 80008cc:	f001 fbcc 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008d6:	484f      	ldr	r0, [pc, #316]	; (8000a14 <MX_GPIO_Init+0x258>)
 80008d8:	f001 fbc6 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008e2:	484d      	ldr	r0, [pc, #308]	; (8000a18 <MX_GPIO_Init+0x25c>)
 80008e4:	f001 fbc0 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blinker_LED_Pin;
 80008e8:	2304      	movs	r3, #4
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Blinker_LED_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4842      	ldr	r0, [pc, #264]	; (8000a08 <MX_GPIO_Init+0x24c>)
 8000900:	f001 f9ee 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Green_boxy_LED_Pin|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000904:	2317      	movs	r3, #23
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	483c      	ldr	r0, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x250>)
 800091c:	f001 f9e0 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pushbutton_Pin;
 8000920:	2301      	movs	r3, #1
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pushbutton_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	4619      	mov	r1, r3
 8000934:	4836      	ldr	r0, [pc, #216]	; (8000a10 <MX_GPIO_Init+0x254>)
 8000936:	f001 f9d3 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800093a:	f248 0306 	movw	r3, #32774	; 0x8006
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000940:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	482f      	ldr	r0, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x254>)
 8000952:	f001 f9c5 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	4828      	ldr	r0, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x254>)
 800096e:	f001 f9b7 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000976:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4821      	ldr	r0, [pc, #132]	; (8000a0c <MX_GPIO_Init+0x250>)
 8000988:	f001 f9aa 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098c:	2304      	movs	r3, #4
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	481f      	ldr	r0, [pc, #124]	; (8000a1c <MX_GPIO_Init+0x260>)
 80009a0:	f001 f99e 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <MX_GPIO_Init+0x258>)
 80009ba:	f001 f991 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009be:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <MX_GPIO_Init+0x258>)
 80009d8:	f001 f982 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80009dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_GPIO_Init+0x25c>)
 80009f6:	f001 f973 	bl	8001ce0 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	40020400 	.word	0x40020400

08000a20 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C3_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C3_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a5e:	f002 fe31 	bl	80036c4 <HAL_I2C_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fae6 	bl	8001038 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a70:	f002 ff6c 	bl	800394c <HAL_I2CEx_ConfigAnalogFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a7a:	f000 fadd 	bl	8001038 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C3_Init+0x74>)
 8000a82:	f002 ff9f 	bl	80039c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a8c:	f000 fad4 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000a8 	.word	0x200000a8
 8000a98:	40005c00 	.word	0x40005c00
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a29      	ldr	r2, [pc, #164]	; (8000b64 <HAL_I2C_MspInit+0xc4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d14b      	bne.n	8000b5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a27      	ldr	r2, [pc, #156]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0xcc>)
 8000b18:	f001 f8e2 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b22:	2312      	movs	r3, #18
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <HAL_I2C_MspInit+0xd0>)
 8000b3a:	f001 f8d1 	bl	8001ce0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_I2C_MspInit+0xc8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005c00 	.word	0x40005c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000

08000b74 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2234      	movs	r2, #52	; 0x34
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f005 fd5f 	bl	8006644 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b86:	4b39      	ldr	r3, [pc, #228]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000b88:	4a39      	ldr	r2, [pc, #228]	; (8000c70 <MX_LTDC_Init+0xfc>)
 8000b8a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b9e:	4b33      	ldr	r3, [pc, #204]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000ba6:	2209      	movs	r2, #9
 8000ba8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bb2:	221d      	movs	r2, #29
 8000bb4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bbe:	f240 120d 	movw	r2, #269	; 0x10d
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bc6:	f240 1243 	movw	r2, #323	; 0x143
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000bcc:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bce:	f240 1217 	movw	r2, #279	; 0x117
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bd6:	f240 1247 	movw	r2, #327	; 0x147
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bf4:	481d      	ldr	r0, [pc, #116]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000bf6:	f002 ff25 	bl	8003a44 <HAL_LTDC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c00:	f000 fa1a 	bl	8001038 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c08:	23f0      	movs	r3, #240	; 0xf0
 8000c0a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c10:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c14:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c16:	2302      	movs	r3, #2
 8000c18:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c1a:	23ff      	movs	r3, #255	; 0xff
 8000c1c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c26:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000c2c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000c32:	23f0      	movs	r3, #240	; 0xf0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000c36:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c3a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_LTDC_Init+0xf8>)
 8000c56:	f003 f887 	bl	8003d68 <HAL_LTDC_ConfigLayer>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000c60:	f000 f9ea 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000fc 	.word	0x200000fc
 8000c70:	40016800 	.word	0x40016800

08000c74 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b09a      	sub	sp, #104	; 0x68
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2230      	movs	r2, #48	; 0x30
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 fcd5 	bl	8006644 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a85      	ldr	r2, [pc, #532]	; (8000eb4 <HAL_LTDC_MspInit+0x240>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	f040 8102 	bne.w	8000eaa <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000caa:	2332      	movs	r3, #50	; 0x32
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fed0 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000cc6:	f000 f9b7 	bl	8001038 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
 8000cce:	4b7a      	ldr	r3, [pc, #488]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	4b73      	ldr	r3, [pc, #460]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a72      	ldr	r2, [pc, #456]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cf0:	f043 0320 	orr.w	r3, r3, #32
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b70      	ldr	r3, [pc, #448]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	4b6c      	ldr	r3, [pc, #432]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a6b      	ldr	r2, [pc, #428]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	4b65      	ldr	r3, [pc, #404]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a64      	ldr	r2, [pc, #400]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b5e      	ldr	r3, [pc, #376]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a5d      	ldr	r2, [pc, #372]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5b      	ldr	r3, [pc, #364]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_LTDC_MspInit+0x244>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000da0:	230e      	movs	r3, #14
 8000da2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000da8:	4619      	mov	r1, r3
 8000daa:	4844      	ldr	r0, [pc, #272]	; (8000ebc <HAL_LTDC_MspInit+0x248>)
 8000dac:	f000 ff98 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000db0:	f641 0358 	movw	r3, #6232	; 0x1858
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dc2:	230e      	movs	r3, #14
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dca:	4619      	mov	r1, r3
 8000dcc:	483c      	ldr	r0, [pc, #240]	; (8000ec0 <HAL_LTDC_MspInit+0x24c>)
 8000dce:	f000 ff87 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000de2:	2309      	movs	r3, #9
 8000de4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dea:	4619      	mov	r1, r3
 8000dec:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <HAL_LTDC_MspInit+0x250>)
 8000dee:	f000 ff77 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000df2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000df6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e04:	230e      	movs	r3, #14
 8000e06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	482d      	ldr	r0, [pc, #180]	; (8000ec4 <HAL_LTDC_MspInit+0x250>)
 8000e10:	f000 ff66 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e14:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e18:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e26:	230e      	movs	r3, #14
 8000e28:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4825      	ldr	r0, [pc, #148]	; (8000ec8 <HAL_LTDC_MspInit+0x254>)
 8000e32:	f000 ff55 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000e36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e48:	230e      	movs	r3, #14
 8000e4a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e50:	4619      	mov	r1, r3
 8000e52:	481e      	ldr	r0, [pc, #120]	; (8000ecc <HAL_LTDC_MspInit+0x258>)
 8000e54:	f000 ff44 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000e58:	2348      	movs	r3, #72	; 0x48
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e68:	230e      	movs	r3, #14
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e70:	4619      	mov	r1, r3
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <HAL_LTDC_MspInit+0x25c>)
 8000e74:	f000 ff34 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <HAL_LTDC_MspInit+0x254>)
 8000e96:	f000 ff23 	bl	8001ce0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	2058      	movs	r0, #88	; 0x58
 8000ea0:	f000 fcec 	bl	800187c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ea4:	2058      	movs	r0, #88	; 0x58
 8000ea6:	f000 fd05 	bl	80018b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3768      	adds	r7, #104	; 0x68
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40016800 	.word	0x40016800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40021400 	.word	0x40021400
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed8:	f000 fbb2 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000edc:	f000 f830 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee0:	f7ff fc6c 	bl	80007bc <MX_GPIO_Init>
  MX_CRC_Init();
 8000ee4:	f7ff fafe 	bl	80004e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000ee8:	f7ff fb32 	bl	8000550 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000eec:	f7ff fb8a 	bl	8000604 <MX_FMC_Init>
  MX_I2C3_Init();
 8000ef0:	f7ff fd96 	bl	8000a20 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000ef4:	f7ff fe3e 	bl	8000b74 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000ef8:	f000 f8a4 	bl	8001044 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000efc:	f000 fa08 	bl	8001310 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f00:	f000 fa78 	bl	80013f4 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000f04:	f000 fae8 	bl	80014d8 <MX_USB_OTG_HS_HCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Blinker_LED_GPIO_Port, Blinker_LED_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	480a      	ldr	r0, [pc, #40]	; (8000f38 <main+0x64>)
 8000f0e:	f001 f8ab 	bl	8002068 <HAL_GPIO_WritePin>
  while (1)
  {
	  if (HAL_GPIO_ReadPin(pushbutton_GPIO_Port, pushbutton_Pin))
 8000f12:	2101      	movs	r1, #1
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <main+0x68>)
 8000f16:	f001 f88f 	bl	8002038 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <main+0x58>
	  {
		  HAL_GPIO_WritePin(Blinker_LED_GPIO_Port, Blinker_LED_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2104      	movs	r1, #4
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <main+0x64>)
 8000f26:	f001 f89f 	bl	8002068 <HAL_GPIO_WritePin>
 8000f2a:	e7f2      	b.n	8000f12 <main+0x3e>

	  }
	  else
	  {
		  HAL_GPIO_WritePin(Blinker_LED_GPIO_Port, Blinker_LED_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4801      	ldr	r0, [pc, #4]	; (8000f38 <main+0x64>)
 8000f32:	f001 f899 	bl	8002068 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(pushbutton_GPIO_Port, pushbutton_Pin))
 8000f36:	e7ec      	b.n	8000f12 <main+0x3e>
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40020000 	.word	0x40020000

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b094      	sub	sp, #80	; 0x50
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	2230      	movs	r2, #48	; 0x30
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f005 fb78 	bl	8006644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a27      	ldr	r2, [pc, #156]	; (800100c <SystemClock_Config+0xcc>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fb8:	2348      	movs	r3, #72	; 0x48
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc4:	f107 0320 	add.w	r3, r7, #32
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 f8a3 	bl	8004114 <HAL_RCC_OscConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fd4:	f000 f830 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 fb05 	bl	8004604 <HAL_RCC_ClockConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001000:	f000 f81a 	bl	8001038 <Error_Handler>
  }
}
 8001004:	bf00      	nop
 8001006:	3750      	adds	r7, #80	; 0x50
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40007000 	.word	0x40007000

08001014 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001026:	f000 fb2d 	bl	8001684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40001000 	.word	0x40001000

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x8>
	...

08001044 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI5_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI5_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI5_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI5_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001078:	2218      	movs	r2, #24
 800107a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI5_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI5_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI5_Init+0x64>)
 8001096:	f003 fed5 	bl	8004e44 <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80010a0:	f7ff ffca 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200001a4 	.word	0x200001a4
 80010ac:	40015000 	.word	0x40015000

080010b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a19      	ldr	r2, [pc, #100]	; (8001134 <HAL_SPI_MspInit+0x84>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12c      	bne.n	800112c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_SPI_MspInit+0x88>)
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_SPI_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0320 	and.w	r3, r3, #32
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800110a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800111c:	2305      	movs	r3, #5
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_SPI_MspInit+0x8c>)
 8001128:	f000 fdda 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40015000 	.word	0x40015000
 8001138:	40023800 	.word	0x40023800
 800113c:	40021400 	.word	0x40021400

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_MspInit+0x4c>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_MspInit+0x4c>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_MspInit+0x4c>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_MspInit+0x4c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2036      	movs	r0, #54	; 0x36
 80011a6:	f000 fb69 	bl	800187c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011aa:	2036      	movs	r0, #54	; 0x36
 80011ac:	f000 fb82 	bl	80018b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_InitTick+0xa4>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_InitTick+0xa4>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_InitTick+0xa4>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011cc:	f107 0210 	add.w	r2, r7, #16
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fc10 	bl	80049fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011dc:	f003 fbe6 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 80011e0:	4603      	mov	r3, r0
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <HAL_InitTick+0xa8>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9b      	lsrs	r3, r3, #18
 80011f0:	3b01      	subs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_InitTick+0xac>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_InitTick+0xb0>)
 80011f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_InitTick+0xac>)
 80011fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001200:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_InitTick+0xac>)
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_InitTick+0xac>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_InitTick+0xac>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_InitTick+0xac>)
 8001216:	f003 fe9e 	bl	8004f56 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <HAL_InitTick+0xac>)
 8001222:	f003 fee7 	bl	8004ff4 <HAL_TIM_Base_Start_IT>
 8001226:	4603      	mov	r3, r0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	431bde83 	.word	0x431bde83
 800123c:	200001fc 	.word	0x200001fc
 8001240:	40001000 	.word	0x40001000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM6_DAC_IRQHandler+0x10>)
 80012a2:	f003 ff17 	bl	80050d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001fc 	.word	0x200001fc

080012b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <OTG_HS_IRQHandler+0x10>)
 80012b6:	f000 ff52 	bl	800215e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002d0 	.word	0x200002d0

080012c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <LTDC_IRQHandler+0x10>)
 80012ca:	f002 fc8b 	bl	8003be4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000fc 	.word	0x200000fc

080012d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <DMA2D_IRQHandler+0x10>)
 80012de:	f000 fb5c 	bl	800199a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000034 	.word	0x20000034

080012ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM1_Init+0x98>)
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <MX_TIM1_Init+0x9c>)
 8001330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM1_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <MX_TIM1_Init+0x98>)
 800135a:	f003 fdfc 	bl	8004f56 <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001364:	f7ff fe68 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001376:	f003 ffb5 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001380:	f7ff fe5a 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_TIM1_Init+0x98>)
 8001392:	f004 f9d1 	bl	8005738 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800139c:	f7ff fe4c 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000244 	.word	0x20000244
 80013ac:	40010000 	.word	0x40010000

080013b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10d      	bne.n	80013de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x40>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART1_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x4c>)
 800142c:	f004 fa14 	bl	8005858 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f7ff fdff 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000028c 	.word	0x2000028c
 8001444:	40011000 	.word	0x40011000

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12c      	bne.n	80014c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001474:	f043 0310 	orr.w	r3, r3, #16
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_UART_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_UART_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b4:	2307      	movs	r3, #7
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_UART_MspInit+0x8c>)
 80014c0:	f000 fc0e 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <MX_USB_OTG_HS_HCD_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014e4:	220c      	movs	r2, #12
 80014e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001514:	f000 fdc1 	bl	800209a <HAL_HCD_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 800151e:	f7ff fd8b 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002d0 	.word	0x200002d0
 800152c:	40040000 	.word	0x40040000

08001530 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_HCD_MspInit+0xb0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d141      	bne.n	80015d6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800156e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001580:	230c      	movs	r3, #12
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <HAL_HCD_MspInit+0xb8>)
 800158c:	f000 fba8 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4810      	ldr	r0, [pc, #64]	; (80015e8 <HAL_HCD_MspInit+0xb8>)
 80015a6:	f000 fb9b 	bl	8001ce0 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 80015b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_HCD_MspInit+0xb4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	204d      	movs	r0, #77	; 0x4d
 80015cc:	f000 f956 	bl	800187c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80015d0:	204d      	movs	r0, #77	; 0x4d
 80015d2:	f000 f96f 	bl	80018b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40040000 	.word	0x40040000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400

080015ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001616:	f7ff fe69 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f004 ffef 	bl	80065fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161e:	f7ff fc59 	bl	8000ed4 <main>
  bx  lr    
 8001622:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001624:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001630:	08006694 	.word	0x08006694
  ldr r2, =_sbss
 8001634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001638:	200005d8 	.word	0x200005d8

0800163c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_Init+0x40>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800164e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_Init+0x40>)
 8001656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800165a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a07      	ldr	r2, [pc, #28]	; (8001680 <HAL_Init+0x40>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f8fc 	bl	8001866 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800166e:	200f      	movs	r0, #15
 8001670:	f7ff fd8e 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001674:	f7ff fd64 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_IncTick+0x20>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x24>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_IncTick+0x24>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008
 80016a8:	200005d4 	.word	0x200005d4

080016ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetTick+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200005d4 	.word	0x200005d4

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff ffee 	bl	80016ac <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffde 	bl	80016ac <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001728:	4013      	ands	r3, r2
 800172a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <__NVIC_SetPriorityGrouping+0x44>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	60d3      	str	r3, [r2, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <__NVIC_GetPriorityGrouping+0x18>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	f003 0307 	and.w	r3, r3, #7
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	2b00      	cmp	r3, #0
 8001780:	db0b      	blt.n	800179a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4907      	ldr	r1, [pc, #28]	; (80017a8 <__NVIC_EnableIRQ+0x38>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	2001      	movs	r0, #1
 8001792:	fa00 f202 	lsl.w	r2, r0, r2
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff4c 	bl	800170c <__NVIC_SetPriorityGrouping>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800188e:	f7ff ff61 	bl	8001754 <__NVIC_GetPriorityGrouping>
 8001892:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f7ff ffb1 	bl	8001800 <NVIC_EncodePriority>
 800189e:	4602      	mov	r2, r0
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff80 	bl	80017ac <__NVIC_SetPriority>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff54 	bl	8001770 <__NVIC_EnableIRQ>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	795b      	ldrb	r3, [r3, #5]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe0a 	bl	800050c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e03b      	b.n	8001992 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7fe fe40 	bl	80005b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	f023 0107 	bic.w	r1, r3, #7
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001972:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68d1      	ldr	r1, [r2, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	430b      	orrs	r3, r1
 8001980:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d026      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d021      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019d4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d026      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d021      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2220      	movs	r2, #32
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2204      	movs	r2, #4
 8001a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d026      	beq.n	8001aba <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d021      	beq.n	8001aba <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a92:	f043 0204 	orr.w	r2, r3, #4
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00e      	beq.n	8001aec <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001adc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f853 	bl	8001b92 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d024      	beq.n	8001b40 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01f      	beq.n	8001b40 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2202      	movs	r2, #2
 8001b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01f      	beq.n	8001b8a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01a      	beq.n	8001b8a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b62:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f80e 	bl	8001ba6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA2D_ConfigLayer+0x20>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e079      	b.n	8001cd0 <HAL_DMA2D_ConfigLayer+0x114>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c06:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_DMA2D_ConfigLayer+0x120>)
 8001c08:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d003      	beq.n	8001c1a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b09      	cmp	r3, #9
 8001c18:	d107      	bne.n	8001c2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e005      	b.n	8001c36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d120      	bne.n	8001c7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	ea02 0103 	and.w	r1, r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b0a      	cmp	r3, #10
 8001c64:	d003      	beq.n	8001c6e <HAL_DMA2D_ConfigLayer+0xb2>
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d127      	bne.n	8001cbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c7c:	e01f      	b.n	8001cbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69da      	ldr	r2, [r3, #28]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	ea02 0103 	and.w	r1, r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b0a      	cmp	r3, #10
 8001ca6:	d003      	beq.n	8001cb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d106      	bne.n	8001cbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cbc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	ff03000f 	.word	0xff03000f

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e177      	b.n	8001fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8166 	bne.w	8001fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d005      	beq.n	8001d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d017      	beq.n	8001dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80c0 	beq.w	8001fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e82:	4a61      	ldr	r2, [pc, #388]	; (8002008 <HAL_GPIO_Init+0x328>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_GPIO_Init+0x32c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d037      	beq.n	8001f1e <HAL_GPIO_Init+0x23e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_GPIO_Init+0x330>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_GPIO_Init+0x23a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a56      	ldr	r2, [pc, #344]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <HAL_GPIO_Init+0x236>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a55      	ldr	r2, [pc, #340]	; (8002018 <HAL_GPIO_Init+0x338>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x232>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a54      	ldr	r2, [pc, #336]	; (800201c <HAL_GPIO_Init+0x33c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x22e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a53      	ldr	r2, [pc, #332]	; (8002020 <HAL_GPIO_Init+0x340>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x22a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x344>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_GPIO_Init+0x348>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x222>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a50      	ldr	r2, [pc, #320]	; (800202c <HAL_GPIO_Init+0x34c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x21e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	; (8002030 <HAL_GPIO_Init+0x350>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x21a>
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	e012      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001efa:	230a      	movs	r3, #10
 8001efc:	e010      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001efe:	2308      	movs	r3, #8
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x240>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x328>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f68:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8c:	4a29      	ldr	r2, [pc, #164]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_GPIO_Init+0x354>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae84 	bls.w	8001cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40022000 	.word	0x40022000
 8002030:	40022400 	.word	0x40022400
 8002034:	40013c00 	.word	0x40013c00

08002038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e001      	b.n	800205a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205a:	7bfb      	ldrb	r3, [r7, #15]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	619a      	str	r2, [r3, #24]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800209a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209c:	b08f      	sub	sp, #60	; 0x3c
 800209e:	af0a      	add	r7, sp, #40	; 0x28
 80020a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e054      	b.n	8002156 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fa32 	bl	8001530 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 ff1d 	bl	8005f2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	687e      	ldr	r6, [r7, #4]
 80020f8:	466d      	mov	r5, sp
 80020fa:	f106 0410 	add.w	r4, r6, #16
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210a:	e885 0003 	stmia.w	r5, {r0, r1}
 800210e:	1d33      	adds	r3, r6, #4
 8002110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f003 fea8 	bl	8005e68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f003 ff14 	bl	8005f4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	687e      	ldr	r6, [r7, #4]
 800212c:	466d      	mov	r5, sp
 800212e:	f106 0410 	add.w	r4, r6, #16
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002142:	1d33      	adds	r3, r6, #4
 8002144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002146:	6838      	ldr	r0, [r7, #0]
 8002148:	f004 f83c 	bl	80061c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f003 ffe4 	bl	8006142 <USB_GetMode>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	f040 80f6 	bne.w	800236e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f003 ffc8 	bl	800611c <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80ec 	beq.w	800236c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 ffbf 	bl	800611c <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021a8:	d104      	bne.n	80021b4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 ffaf 	bl	800611c <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c8:	d104      	bne.n	80021d4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021d2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 ff9f 	bl	800611c <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021e8:	d104      	bne.n	80021f4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021f2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 ff8f 	bl	800611c <USB_ReadInterrupts>
 80021fe:	4603      	mov	r3, r0
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d103      	bne.n	8002210 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2202      	movs	r2, #2
 800220e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 ff81 	bl	800611c <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002224:	d11c      	bne.n	8002260 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800222e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002240:	2110      	movs	r1, #16
 8002242:	6938      	ldr	r0, [r7, #16]
 8002244:	f003 fece 	bl	8005fe4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002248:	6938      	ldr	r0, [r7, #16]
 800224a:	f003 feef 	bl	800602c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f004 f869 	bl	800632c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f89e 	bl	800239c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f003 ff59 	bl	800611c <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d102      	bne.n	800227c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f001 f9b1 	bl	80035de <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f003 ff4b 	bl	800611c <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b08      	cmp	r3, #8
 800228e:	d106      	bne.n	800229e <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f86f 	bl	8002374 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2208      	movs	r2, #8
 800229c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 ff3a 	bl	800611c <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b10      	cmp	r3, #16
 80022b0:	d101      	bne.n	80022b6 <HAL_HCD_IRQHandler+0x158>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_HCD_IRQHandler+0x15a>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0210 	bic.w	r2, r2, #16
 80022ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f001 f8b4 	bl	800343a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0210 	orr.w	r2, r2, #16
 80022e0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 ff18 	bl	800611c <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022f6:	d13a      	bne.n	800236e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 f84f 	bl	80063a0 <USB_HC_ReadInterrupt>
 8002302:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e025      	b.n	8002356 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002334:	d106      	bne.n	8002344 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f859 	bl	80023f4 <HCD_HC_IN_IRQHandler>
 8002342:	e005      	b.n	8002350 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fc74 	bl	8002c38 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3d4      	bcc.n	800230a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002368:	615a      	str	r2, [r3, #20]
 800236a:	e000      	b.n	800236e <HAL_HCD_IRQHandler+0x210>
      return;
 800236c:	bf00      	nop
    }
  }
}
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b04      	cmp	r3, #4
 8002422:	d119      	bne.n	8002458 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	461a      	mov	r2, r3
 8002432:	2304      	movs	r3, #4
 8002434:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	0151      	lsls	r1, r2, #5
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	440a      	add	r2, r1
 800244c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	60d3      	str	r3, [r2, #12]
 8002456:	e101      	b.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246e:	d12b      	bne.n	80024c8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	3361      	adds	r3, #97	; 0x61
 8002492:	2207      	movs	r2, #7
 8002494:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	0151      	lsls	r1, r2, #5
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	440a      	add	r2, r1
 80024ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 ff7e 	bl	80063c2 <USB_HC_Halt>
 80024c6:	e0c9      	b.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d109      	bne.n	80024f2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	2320      	movs	r3, #32
 80024ee:	6093      	str	r3, [r2, #8]
 80024f0:	e0b4      	b.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b08      	cmp	r3, #8
 8002506:	d133      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	2205      	movs	r2, #5
 8002538:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	461a      	mov	r2, r3
 8002548:	2310      	movs	r3, #16
 800254a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2308      	movs	r3, #8
 800255c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f003 ff2a 	bl	80063c2 <USB_HC_Halt>
 800256e:	e075      	b.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d134      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	0151      	lsls	r1, r2, #5
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	440a      	add	r2, r1
 800259e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3361      	adds	r3, #97	; 0x61
 80025b6:	2208      	movs	r2, #8
 80025b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	2310      	movs	r3, #16
 80025ca:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025de:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f003 fee9 	bl	80063c2 <USB_HC_Halt>
 80025f0:	e034      	b.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b80      	cmp	r3, #128	; 0x80
 8002606:	d129      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3361      	adds	r3, #97	; 0x61
 8002636:	2206      	movs	r2, #6
 8002638:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f003 febc 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002672:	d122      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	0151      	lsls	r1, r2, #5
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	440a      	add	r2, r1
 800268a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fe8f 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026b8:	e2ba      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 811b 	bne.w	8002908 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3348      	adds	r3, #72	; 0x48
 80026e8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	0159      	lsls	r1, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	440b      	add	r3, r1
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	202c      	movs	r0, #44	; 0x2c
 8002704:	fb00 f303 	mul.w	r3, r0, r3
 8002708:	440b      	add	r3, r1
 800270a:	3350      	adds	r3, #80	; 0x50
 800270c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	335c      	adds	r3, #92	; 0x5c
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2301      	movs	r3, #1
 8002742:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	333f      	adds	r3, #63	; 0x3f
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	333f      	adds	r3, #63	; 0x3f
 8002766:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002768:	2b02      	cmp	r3, #2
 800276a:	d121      	bne.n	80027b0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	440a      	add	r2, r1
 8002782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002786:	f043 0302 	orr.w	r3, r3, #2
 800278a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fe13 	bl	80063c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2310      	movs	r3, #16
 80027ac:	6093      	str	r3, [r2, #8]
 80027ae:	e066      	b.n	800287e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	333f      	adds	r3, #63	; 0x3f
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d127      	bne.n	8002814 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	b2d9      	uxtb	r1, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	fb00 f303 	mul.w	r3, r0, r3
 8002804:	4413      	add	r3, r2
 8002806:	3360      	adds	r3, #96	; 0x60
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fde3 	bl	80023d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002812:	e034      	b.n	800287e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	333f      	adds	r3, #63	; 0x3f
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d12a      	bne.n	800287e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3360      	adds	r3, #96	; 0x60
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3354      	adds	r3, #84	; 0x54
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2d8      	uxtb	r0, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3354      	adds	r3, #84	; 0x54
 800285e:	4602      	mov	r2, r0
 8002860:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	b2d9      	uxtb	r1, r3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fdad 	bl	80023d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d12b      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3348      	adds	r3, #72	; 0x48
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	202c      	movs	r0, #44	; 0x2c
 800289c:	fb00 f202 	mul.w	r2, r0, r2
 80028a0:	440a      	add	r2, r1
 80028a2:	3240      	adds	r2, #64	; 0x40
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 81be 	beq.w	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3354      	adds	r3, #84	; 0x54
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2d8      	uxtb	r0, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3354      	adds	r3, #84	; 0x54
 80028d8:	4602      	mov	r2, r0
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	e1a8      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3354      	adds	r3, #84	; 0x54
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2d8      	uxtb	r0, r3
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3354      	adds	r3, #84	; 0x54
 8002902:	4602      	mov	r2, r0
 8002904:	701a      	strb	r2, [r3, #0]
}
 8002906:	e193      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	f040 8106 	bne.w	8002b2c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f023 0302 	bic.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3361      	adds	r3, #97	; 0x61
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d109      	bne.n	8002968 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3360      	adds	r3, #96	; 0x60
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e0c9      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3361      	adds	r3, #97	; 0x61
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d109      	bne.n	8002990 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3360      	adds	r3, #96	; 0x60
 800298a:	2205      	movs	r2, #5
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e0b5      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d009      	beq.n	80029b8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d150      	bne.n	8002a5a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	335c      	adds	r3, #92	; 0x5c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	202c      	movs	r0, #44	; 0x2c
 80029d0:	fb00 f303 	mul.w	r3, r0, r3
 80029d4:	440b      	add	r3, r1
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	335c      	adds	r3, #92	; 0x5c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d912      	bls.n	8002a14 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a12:	e073      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3360      	adds	r3, #96	; 0x60
 8002a22:	2202      	movs	r2, #2
 8002a24:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a3c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a44:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a58:	e050      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d122      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3360      	adds	r3, #96	; 0x60
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a96:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e023      	b.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	d119      	bne.n	8002afc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	335c      	adds	r3, #92	; 0x5c
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	fb00 f303 	mul.w	r3, r0, r3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	2204      	movs	r2, #4
 8002afa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	b2d9      	uxtb	r1, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	202c      	movs	r0, #44	; 0x2c
 8002b18:	fb00 f303 	mul.w	r3, r0, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3360      	adds	r3, #96	; 0x60
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fc57 	bl	80023d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b2a:	e081      	b.n	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d176      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	333f      	adds	r3, #63	; 0x3f
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d121      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	335c      	adds	r3, #92	; 0x5c
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	0151      	lsls	r1, r2, #5
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	440a      	add	r2, r1
 8002b7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b82:	f043 0302 	orr.w	r3, r3, #2
 8002b86:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fc15 	bl	80063c2 <USB_HC_Halt>
 8002b98:	e041      	b.n	8002c1e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333f      	adds	r3, #63	; 0x3f
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333f      	adds	r3, #63	; 0x3f
 8002bbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d12d      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d120      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 fbd2 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	6093      	str	r3, [r2, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d119      	bne.n	8002c9c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	2304      	movs	r3, #4
 8002c78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	0151      	lsls	r1, r2, #5
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	440a      	add	r2, r1
 8002c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002c9a:	e3ca      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d13e      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	333d      	adds	r3, #61	; 0x3d
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	f040 83ac 	bne.w	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	333d      	adds	r3, #61	; 0x3d
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	0151      	lsls	r1, r2, #5
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	440a      	add	r2, r1
 8002d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fb4a 	bl	80063c2 <USB_HC_Halt>
}
 8002d2e:	e380      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d46:	d122      	bne.n	8002d8e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fb25 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8a:	6093      	str	r3, [r2, #8]
}
 8002d8c:	e351      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d150      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d111      	bne.n	8002df0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	333d      	adds	r3, #61	; 0x3d
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	2340      	movs	r3, #64	; 0x40
 8002dee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	0151      	lsls	r1, r2, #5
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	440a      	add	r2, r1
 8002e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fad1 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3361      	adds	r3, #97	; 0x61
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
}
 8002e44:	e2f5      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d13c      	bne.n	8002ed6 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3361      	adds	r3, #97	; 0x61
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333d      	adds	r3, #61	; 0x3d
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	335c      	adds	r3, #92	; 0x5c
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	0151      	lsls	r1, r2, #5
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	440a      	add	r2, r1
 8002ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eac:	f043 0302 	orr.w	r3, r3, #2
 8002eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fa80 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2340      	movs	r3, #64	; 0x40
 8002ed2:	6093      	str	r3, [r2, #8]
}
 8002ed4:	e2ad      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d12a      	bne.n	8002f42 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2308      	movs	r3, #8
 8002efc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	0151      	lsls	r1, r2, #5
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	440a      	add	r2, r1
 8002f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fa4a 	bl	80063c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3361      	adds	r3, #97	; 0x61
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
}
 8002f40:	e277      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d150      	bne.n	8002ffa <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	335c      	adds	r3, #92	; 0x5c
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	212c      	movs	r1, #44	; 0x2c
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3361      	adds	r3, #97	; 0x61
 8002f78:	2203      	movs	r2, #3
 8002f7a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	333d      	adds	r3, #61	; 0x3d
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d112      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	333c      	adds	r3, #60	; 0x3c
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d108      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	333d      	adds	r3, #61	; 0x3d
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f9ee 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2310      	movs	r3, #16
 8002ff6:	6093      	str	r3, [r2, #8]
}
 8002ff8:	e21b      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d174      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d121      	bne.n	800305c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3361      	adds	r3, #97	; 0x61
 8003026:	2206      	movs	r2, #6
 8003028:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	0151      	lsls	r1, r2, #5
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	440a      	add	r2, r1
 8003040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f003 f9b4 	bl	80063c2 <USB_HC_Halt>
 800305a:	e044      	b.n	80030e6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	335c      	adds	r3, #92	; 0x5c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	202c      	movs	r0, #44	; 0x2c
 8003074:	fb00 f303 	mul.w	r3, r0, r3
 8003078:	440b      	add	r3, r1
 800307a:	335c      	adds	r3, #92	; 0x5c
 800307c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d920      	bls.n	80030d4 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	335c      	adds	r3, #92	; 0x5c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3360      	adds	r3, #96	; 0x60
 80030b2:	2204      	movs	r2, #4
 80030b4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	b2d9      	uxtb	r1, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	202c      	movs	r0, #44	; 0x2c
 80030c0:	fb00 f303 	mul.w	r3, r0, r3
 80030c4:	4413      	add	r3, r2
 80030c6:	3360      	adds	r3, #96	; 0x60
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff f983 	bl	80023d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030d2:	e008      	b.n	80030e6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	212c      	movs	r1, #44	; 0x2c
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3360      	adds	r3, #96	; 0x60
 80030e2:	2202      	movs	r2, #2
 80030e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	6093      	str	r3, [r2, #8]
}
 80030f8:	e19b      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d134      	bne.n	800317c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	0151      	lsls	r1, r2, #5
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	440a      	add	r2, r1
 8003128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f003 f940 	bl	80063c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	2310      	movs	r3, #16
 8003152:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3361      	adds	r3, #97	; 0x61
 8003176:	2208      	movs	r2, #8
 8003178:	701a      	strb	r2, [r3, #0]
}
 800317a:	e15a      	b.n	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 814f 	bne.w	8003432 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ae:	f023 0302 	bic.w	r3, r3, #2
 80031b2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3361      	adds	r3, #97	; 0x61
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d17d      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3360      	adds	r3, #96	; 0x60
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	333f      	adds	r3, #63	; 0x3f
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d00a      	beq.n	8003204 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	333f      	adds	r3, #63	; 0x3f
 80031fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031fe:	2b03      	cmp	r3, #3
 8003200:	f040 8100 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d113      	bne.n	8003234 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3355      	adds	r3, #85	; 0x55
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2d8      	uxtb	r0, r3
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3355      	adds	r3, #85	; 0x55
 8003230:	4602      	mov	r2, r0
 8003232:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 80e3 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	334c      	adds	r3, #76	; 0x4c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80d8 	beq.w	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	334c      	adds	r3, #76	; 0x4c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	202c      	movs	r0, #44	; 0x2c
 800326a:	fb00 f202 	mul.w	r2, r0, r2
 800326e:	440a      	add	r2, r1
 8003270:	3240      	adds	r2, #64	; 0x40
 8003272:	8812      	ldrh	r2, [r2, #0]
 8003274:	4413      	add	r3, r2
 8003276:	3b01      	subs	r3, #1
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	202c      	movs	r0, #44	; 0x2c
 800327e:	fb00 f202 	mul.w	r2, r0, r2
 8003282:	440a      	add	r2, r1
 8003284:	3240      	adds	r2, #64	; 0x40
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	fbb3 f3f2 	udiv	r3, r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80b5 	beq.w	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3355      	adds	r3, #85	; 0x55
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f083 0301 	eor.w	r3, r3, #1
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3355      	adds	r3, #85	; 0x55
 80032be:	4602      	mov	r2, r0
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e09f      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d109      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e08b      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3361      	adds	r3, #97	; 0x61
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d109      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3360      	adds	r3, #96	; 0x60
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e077      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	3361      	adds	r3, #97	; 0x61
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b05      	cmp	r3, #5
 8003326:	d109      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3360      	adds	r3, #96	; 0x60
 8003336:	2205      	movs	r2, #5
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e063      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3361      	adds	r3, #97	; 0x61
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d009      	beq.n	8003364 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3361      	adds	r3, #97	; 0x61
 800335e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003360:	2b08      	cmp	r3, #8
 8003362:	d14f      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	335c      	adds	r3, #92	; 0x5c
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	202c      	movs	r0, #44	; 0x2c
 800337c:	fb00 f303 	mul.w	r3, r0, r3
 8003380:	440b      	add	r3, r1
 8003382:	335c      	adds	r3, #92	; 0x5c
 8003384:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	335c      	adds	r3, #92	; 0x5c
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d912      	bls.n	80033c0 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	335c      	adds	r3, #92	; 0x5c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3360      	adds	r3, #96	; 0x60
 80033ba:	2204      	movs	r2, #4
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e021      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	3360      	adds	r3, #96	; 0x60
 80033ce:	2202      	movs	r2, #2
 80033d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033e8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033f0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	2302      	movs	r3, #2
 8003414:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	b2d9      	uxtb	r1, r3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	202c      	movs	r0, #44	; 0x2c
 8003420:	fb00 f303 	mul.w	r3, r0, r3
 8003424:	4413      	add	r3, r2
 8003426:	3360      	adds	r3, #96	; 0x60
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe ffd3 	bl	80023d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003432:	bf00      	nop
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b08a      	sub	sp, #40	; 0x28
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	0c5b      	lsrs	r3, r3, #17
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d004      	beq.n	8003480 <HCD_RXQLVL_IRQHandler+0x46>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b05      	cmp	r3, #5
 800347a:	f000 80a9 	beq.w	80035d0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800347e:	e0aa      	b.n	80035d6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a6 	beq.w	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	3344      	adds	r3, #68	; 0x44
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 809b 	beq.w	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3350      	adds	r3, #80	; 0x50
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	441a      	add	r2, r3
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	202c      	movs	r0, #44	; 0x2c
 80034b8:	fb00 f303 	mul.w	r3, r0, r3
 80034bc:	440b      	add	r3, r1
 80034be:	334c      	adds	r3, #76	; 0x4c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d87a      	bhi.n	80035bc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3344      	adds	r3, #68	; 0x44
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	b292      	uxth	r2, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f002 fdc4 	bl	800606c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	212c      	movs	r1, #44	; 0x2c
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	4413      	add	r3, r2
 80034f0:	3344      	adds	r3, #68	; 0x44
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	441a      	add	r2, r3
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	202c      	movs	r0, #44	; 0x2c
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	440b      	add	r3, r1
 8003504:	3344      	adds	r3, #68	; 0x44
 8003506:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3350      	adds	r3, #80	; 0x50
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	441a      	add	r2, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	202c      	movs	r0, #44	; 0x2c
 8003522:	fb00 f303 	mul.w	r3, r0, r3
 8003526:	440b      	add	r3, r1
 8003528:	3350      	adds	r3, #80	; 0x50
 800352a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	0cdb      	lsrs	r3, r3, #19
 800353c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003540:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3340      	adds	r3, #64	; 0x40
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4293      	cmp	r3, r2
 8003558:	d13c      	bne.n	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d039      	beq.n	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003576:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800357e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	461a      	mov	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3354      	adds	r3, #84	; 0x54
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	f083 0301 	eor.w	r3, r3, #1
 80035a6:	b2d8      	uxtb	r0, r3
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	3354      	adds	r3, #84	; 0x54
 80035b6:	4602      	mov	r2, r0
 80035b8:	701a      	strb	r2, [r3, #0]
      break;
 80035ba:	e00b      	b.n	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	3360      	adds	r3, #96	; 0x60
 80035ca:	2204      	movs	r2, #4
 80035cc:	701a      	strb	r2, [r3, #0]
      break;
 80035ce:	e001      	b.n	80035d4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035d4:	bf00      	nop
  }
}
 80035d6:	bf00      	nop
 80035d8:	3728      	adds	r7, #40	; 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800360a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d10b      	bne.n	800362e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b01      	cmp	r3, #1
 800361e:	d102      	bne.n	8003626 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe feb1 	bl	8002388 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b08      	cmp	r3, #8
 8003636:	d132      	bne.n	800369e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d126      	bne.n	8003698 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d113      	bne.n	800367a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003658:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800365c:	d106      	bne.n	800366c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fe61 	bl	800632c <USB_InitFSLSPClkSel>
 800366a:	e011      	b.n	8003690 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fe5a 	bl	800632c <USB_InitFSLSPClkSel>
 8003678:	e00a      	b.n	8003690 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d106      	bne.n	8003690 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003688:	461a      	mov	r2, r3
 800368a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800368e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fe fe8d 	bl	80023b0 <HAL_HCD_PortEnabled_Callback>
 8003696:	e002      	b.n	800369e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fe fe93 	bl	80023c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d103      	bne.n	80036b0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f043 0320 	orr.w	r3, r3, #32
 80036ae:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036b6:	461a      	mov	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6013      	str	r3, [r2, #0]
}
 80036bc:	bf00      	nop
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e12b      	b.n	800392e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd f9d8 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003728:	f001 f940 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 800372c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a81      	ldr	r2, [pc, #516]	; (8003938 <HAL_I2C_Init+0x274>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d807      	bhi.n	8003748 <HAL_I2C_Init+0x84>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a80      	ldr	r2, [pc, #512]	; (800393c <HAL_I2C_Init+0x278>)
 800373c:	4293      	cmp	r3, r2
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e006      	b.n	8003756 <HAL_I2C_Init+0x92>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a7d      	ldr	r2, [pc, #500]	; (8003940 <HAL_I2C_Init+0x27c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e7      	b.n	800392e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a78      	ldr	r2, [pc, #480]	; (8003944 <HAL_I2C_Init+0x280>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0c9b      	lsrs	r3, r3, #18
 8003768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_I2C_Init+0x274>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <HAL_I2C_Init+0xd4>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	e009      	b.n	80037ac <HAL_I2C_Init+0xe8>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a69      	ldr	r2, [pc, #420]	; (8003948 <HAL_I2C_Init+0x284>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	3301      	adds	r3, #1
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	495c      	ldr	r1, [pc, #368]	; (8003938 <HAL_I2C_Init+0x274>)
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d819      	bhi.n	8003800 <HAL_I2C_Init+0x13c>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e59      	subs	r1, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037e0:	400b      	ands	r3, r1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_I2C_Init+0x138>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e59      	subs	r1, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	e051      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 80037fc:	2304      	movs	r3, #4
 80037fe:	e04f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <HAL_I2C_Init+0x168>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1e58      	subs	r0, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf0c      	ite	eq
 8003824:	2301      	moveq	r3, #1
 8003826:	2300      	movne	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e012      	b.n	8003852 <HAL_I2C_Init+0x18e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x196>
 8003856:	2301      	movs	r3, #1
 8003858:	e022      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <HAL_I2C_Init+0x1bc>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e58      	subs	r0, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	440b      	add	r3, r1
 8003870:	fbb0 f3f3 	udiv	r3, r0, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	e00f      	b.n	80038a0 <HAL_I2C_Init+0x1dc>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e58      	subs	r0, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	0099      	lsls	r1, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	6809      	ldr	r1, [r1, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6911      	ldr	r1, [r2, #16]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	4311      	orrs	r1, r2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	000186a0 	.word	0x000186a0
 800393c:	001e847f 	.word	0x001e847f
 8003940:	003d08ff 	.word	0x003d08ff
 8003944:	431bde83 	.word	0x431bde83
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d129      	bne.n	80039b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2224      	movs	r2, #36	; 0x24
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0210 	bic.w	r2, r2, #16
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d12a      	bne.n	8003a34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2224      	movs	r2, #36	; 0x24
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039fe:	89fb      	ldrh	r3, [r7, #14]
 8003a00:	f023 030f 	bic.w	r3, r3, #15
 8003a04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	89fa      	ldrh	r2, [r7, #14]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0bf      	b.n	8003bd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f902 	bl	8000c74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003a86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_LTDC_Init+0x19c>)
 8003ab8:	400b      	ands	r3, r1
 8003aba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68d9      	ldr	r1, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_LTDC_Init+0x19c>)
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68d9      	ldr	r1, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6919      	ldr	r1, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <HAL_LTDC_Init+0x19c>)
 8003b14:	400b      	ands	r3, r1
 8003b16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6919      	ldr	r1, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6959      	ldr	r1, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_LTDC_Init+0x19c>)
 8003b42:	400b      	ands	r3, r1
 8003b44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6959      	ldr	r1, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0206 	orr.w	r2, r2, #6
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	f000f800 	.word	0xf000f800

08003be4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d023      	beq.n	8003c4e <HAL_LTDC_IRQHandler+0x6a>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01e      	beq.n	8003c4e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0204 	bic.w	r2, r2, #4
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2204      	movs	r2, #4
 8003c26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f86f 	bl	8003d2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_LTDC_IRQHandler+0xbc>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01e      	beq.n	8003ca0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0202 	bic.w	r2, r2, #2
 8003c70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2202      	movs	r2, #2
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c80:	f043 0202 	orr.w	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f846 	bl	8003d2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d01b      	beq.n	8003ce2 <HAL_LTDC_IRQHandler+0xfe>
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f82f 	bl	8003d40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01b      	beq.n	8003d24 <HAL_LTDC_IRQHandler+0x140>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0208 	bic.w	r2, r2, #8
 8003d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f818 	bl	8003d54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d68:	b5b0      	push	{r4, r5, r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_LTDC_ConfigLayer+0x1a>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e02c      	b.n	8003ddc <HAL_LTDC_ConfigLayer+0x74>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2134      	movs	r1, #52	; 0x34
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f811 	bl	8003de4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}

08003de4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	4413      	add	r3, r2
 8003e02:	041b      	lsls	r3, r3, #16
 8003e04:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	01db      	lsls	r3, r3, #7
 8003e10:	4413      	add	r3, r2
 8003e12:	3384      	adds	r3, #132	; 0x84
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	01d2      	lsls	r2, r2, #7
 8003e20:	440a      	add	r2, r1
 8003e22:	3284      	adds	r2, #132	; 0x84
 8003e24:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e28:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3a:	4413      	add	r3, r2
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4619      	mov	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	01db      	lsls	r3, r3, #7
 8003e48:	440b      	add	r3, r1
 8003e4a:	3384      	adds	r3, #132	; 0x84
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e62:	4413      	add	r3, r2
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	4413      	add	r3, r2
 8003e74:	3384      	adds	r3, #132	; 0x84
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	01d2      	lsls	r2, r2, #7
 8003e82:	440a      	add	r2, r1
 8003e84:	3284      	adds	r2, #132	; 0x84
 8003e86:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e8a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e9a:	4413      	add	r3, r2
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	01db      	lsls	r3, r3, #7
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3384      	adds	r3, #132	; 0x84
 8003eac:	4619      	mov	r1, r3
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	01db      	lsls	r3, r3, #7
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3384      	adds	r3, #132	; 0x84
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4611      	mov	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	01d2      	lsls	r2, r2, #7
 8003ece:	440a      	add	r2, r1
 8003ed0:	3284      	adds	r2, #132	; 0x84
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	01db      	lsls	r3, r3, #7
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3384      	adds	r3, #132	; 0x84
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	01db      	lsls	r3, r3, #7
 8003f14:	4413      	add	r3, r2
 8003f16:	3384      	adds	r3, #132	; 0x84
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	01db      	lsls	r3, r3, #7
 8003f24:	4413      	add	r3, r2
 8003f26:	3384      	adds	r3, #132	; 0x84
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f34:	461a      	mov	r2, r3
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	01db      	lsls	r3, r3, #7
 8003f48:	440b      	add	r3, r1
 8003f4a:	3384      	adds	r3, #132	; 0x84
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	01db      	lsls	r3, r3, #7
 8003f5e:	4413      	add	r3, r2
 8003f60:	3384      	adds	r3, #132	; 0x84
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	4611      	mov	r1, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	01d2      	lsls	r2, r2, #7
 8003f6e:	440a      	add	r2, r1
 8003f70:	3284      	adds	r2, #132	; 0x84
 8003f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f76:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	01db      	lsls	r3, r3, #7
 8003f82:	4413      	add	r3, r2
 8003f84:	3384      	adds	r3, #132	; 0x84
 8003f86:	461a      	mov	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	4413      	add	r3, r2
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	01d2      	lsls	r2, r2, #7
 8003fa8:	440a      	add	r2, r1
 8003faa:	3284      	adds	r2, #132	; 0x84
 8003fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	6809      	ldr	r1, [r1, #0]
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	01c9      	lsls	r1, r1, #7
 8003fc8:	4401      	add	r1, r0
 8003fca:	3184      	adds	r1, #132	; 0x84
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	3384      	adds	r3, #132	; 0x84
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	01db      	lsls	r3, r3, #7
 8003fea:	4413      	add	r3, r2
 8003fec:	3384      	adds	r3, #132	; 0x84
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	01db      	lsls	r3, r3, #7
 8003ffe:	4413      	add	r3, r2
 8004000:	3384      	adds	r3, #132	; 0x84
 8004002:	461a      	mov	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004012:	2304      	movs	r3, #4
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e01b      	b.n	8004050 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d102      	bne.n	8004026 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004020:	2303      	movs	r3, #3
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e014      	b.n	8004050 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b04      	cmp	r3, #4
 800402c:	d00b      	beq.n	8004046 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004032:	2b02      	cmp	r3, #2
 8004034:	d007      	beq.n	8004046 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800403a:	2b03      	cmp	r3, #3
 800403c:	d003      	beq.n	8004046 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004042:	2b07      	cmp	r3, #7
 8004044:	d102      	bne.n	800404c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004046:	2302      	movs	r3, #2
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e001      	b.n	8004050 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800404c:	2301      	movs	r3, #1
 800404e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	4413      	add	r3, r2
 800405c:	3384      	adds	r3, #132	; 0x84
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4611      	mov	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	01d2      	lsls	r2, r2, #7
 800406a:	440a      	add	r2, r1
 800406c:	3284      	adds	r2, #132	; 0x84
 800406e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004072:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	fb02 f303 	mul.w	r3, r2, r3
 800407e:	041a      	lsls	r2, r3, #16
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	1acb      	subs	r3, r1, r3
 800408a:	69f9      	ldr	r1, [r7, #28]
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	3303      	adds	r3, #3
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	6809      	ldr	r1, [r1, #0]
 8004096:	4608      	mov	r0, r1
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	01c9      	lsls	r1, r1, #7
 800409c:	4401      	add	r1, r0
 800409e:	3184      	adds	r1, #132	; 0x84
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	01db      	lsls	r3, r3, #7
 80040ae:	4413      	add	r3, r2
 80040b0:	3384      	adds	r3, #132	; 0x84
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4611      	mov	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	01d2      	lsls	r2, r2, #7
 80040be:	440a      	add	r2, r1
 80040c0:	3284      	adds	r2, #132	; 0x84
 80040c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040c6:	f023 0307 	bic.w	r3, r3, #7
 80040ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	01db      	lsls	r3, r3, #7
 80040d6:	4413      	add	r3, r2
 80040d8:	3384      	adds	r3, #132	; 0x84
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	4413      	add	r3, r2
 80040ee:	3384      	adds	r3, #132	; 0x84
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4611      	mov	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	01d2      	lsls	r2, r2, #7
 80040fc:	440a      	add	r2, r1
 80040fe:	3284      	adds	r2, #132	; 0x84
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6013      	str	r3, [r2, #0]
}
 8004106:	bf00      	nop
 8004108:	3724      	adds	r7, #36	; 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e264      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d075      	beq.n	800421e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004132:	4ba3      	ldr	r3, [pc, #652]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d00c      	beq.n	8004158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800413e:	4ba0      	ldr	r3, [pc, #640]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004146:	2b08      	cmp	r3, #8
 8004148:	d112      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414a:	4b9d      	ldr	r3, [pc, #628]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004156:	d10b      	bne.n	8004170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	4b99      	ldr	r3, [pc, #612]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d05b      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d157      	bne.n	800421c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e23f      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d106      	bne.n	8004188 <HAL_RCC_OscConfig+0x74>
 800417a:	4b91      	ldr	r3, [pc, #580]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a90      	ldr	r2, [pc, #576]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e01d      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x98>
 8004192:	4b8b      	ldr	r3, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a8a      	ldr	r2, [pc, #552]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4b88      	ldr	r3, [pc, #544]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a87      	ldr	r2, [pc, #540]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	e00b      	b.n	80041c4 <HAL_RCC_OscConfig+0xb0>
 80041ac:	4b84      	ldr	r3, [pc, #528]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a83      	ldr	r2, [pc, #524]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	4b81      	ldr	r3, [pc, #516]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fd fa6e 	bl	80016ac <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fd fa6a 	bl	80016ac <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e204      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e6:	4b76      	ldr	r3, [pc, #472]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041f2:	e014      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fa5a 	bl	80016ac <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fa56 	bl	80016ac <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1f0      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420e:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d063      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b62      	ldr	r3, [pc, #392]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d116      	bne.n	800427c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	4b5c      	ldr	r3, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d001      	beq.n	8004266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e1c4      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4952      	ldr	r1, [pc, #328]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	e03a      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d020      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <HAL_RCC_OscConfig+0x2b0>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fd fa0f 	bl	80016ac <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004292:	f7fd fa0b 	bl	80016ac <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e1a5      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a4:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b0:	4b43      	ldr	r3, [pc, #268]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4940      	ldr	r1, [pc, #256]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
 80042c4:	e015      	b.n	80042f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x2b0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd f9ee 	bl	80016ac <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fd f9ea 	bl	80016ac <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e184      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e6:	4b36      	ldr	r3, [pc, #216]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d030      	beq.n	8004360 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_RCC_OscConfig+0x2b4>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd f9ce 	bl	80016ac <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004314:	f7fd f9ca 	bl	80016ac <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e164      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
 8004332:	e015      	b.n	8004360 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004334:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x2b4>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433a:	f7fd f9b7 	bl	80016ac <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004342:	f7fd f9b3 	bl	80016ac <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e14d      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f0      	bne.n	8004342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a0 	beq.w	80044ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <HAL_RCC_OscConfig+0x2ac>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d121      	bne.n	80043ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_RCC_OscConfig+0x2b8>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fd f979 	bl	80016ac <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e011      	b.n	80043e2 <HAL_RCC_OscConfig+0x2ce>
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	42470000 	.word	0x42470000
 80043c8:	42470e80 	.word	0x42470e80
 80043cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d0:	f7fd f96c 	bl	80016ac <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e106      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e2:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_OscConfig+0x4e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x2f0>
 80043f6:	4b81      	ldr	r3, [pc, #516]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a80      	ldr	r2, [pc, #512]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6713      	str	r3, [r2, #112]	; 0x70
 8004402:	e01c      	b.n	800443e <HAL_RCC_OscConfig+0x32a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b05      	cmp	r3, #5
 800440a:	d10c      	bne.n	8004426 <HAL_RCC_OscConfig+0x312>
 800440c:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
 8004418:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	; 0x70
 8004424:	e00b      	b.n	800443e <HAL_RCC_OscConfig+0x32a>
 8004426:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	4a74      	ldr	r2, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6713      	str	r3, [r2, #112]	; 0x70
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	4a71      	ldr	r2, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d015      	beq.n	8004472 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004446:	f7fd f931 	bl	80016ac <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fd f92d 	bl	80016ac <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0c5      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ee      	beq.n	800444e <HAL_RCC_OscConfig+0x33a>
 8004470:	e014      	b.n	800449c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004472:	f7fd f91b 	bl	80016ac <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004478:	e00a      	b.n	8004490 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fd f917 	bl	80016ac <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0af      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004490:	4b5a      	ldr	r3, [pc, #360]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ee      	bne.n	800447a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a55      	ldr	r2, [pc, #340]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 809b 	beq.w	80045ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d05c      	beq.n	800457e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d141      	bne.n	8004550 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044cc:	4b4c      	ldr	r3, [pc, #304]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fd f8eb 	bl	80016ac <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd f8e7 	bl	80016ac <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e081      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ec:	4b43      	ldr	r3, [pc, #268]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	019b      	lsls	r3, r3, #6
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	3b01      	subs	r3, #1
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	061b      	lsls	r3, r3, #24
 800451c:	4937      	ldr	r1, [pc, #220]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd f8c0 	bl	80016ac <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004530:	f7fd f8bc 	bl	80016ac <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e056      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x41c>
 800454e:	e04e      	b.n	80045ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_OscConfig+0x4ec>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004556:	f7fd f8a9 	bl	80016ac <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455e:	f7fd f8a5 	bl	80016ac <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e03f      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004570:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x44a>
 800457c:	e037      	b.n	80045ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e032      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800458a:	4b1c      	ldr	r3, [pc, #112]	; (80045fc <HAL_RCC_OscConfig+0x4e8>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d028      	beq.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d121      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d11a      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d111      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40007000 	.word	0x40007000
 80045fc:	40023800 	.word	0x40023800
 8004600:	42470060 	.word	0x42470060

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0cc      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90c      	bls.n	8004640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d119      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e067      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4934      	ldr	r1, [pc, #208]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fc ffda 	bl	80016ac <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fc ffd6 	bl	80016ac <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20c      	bcs.n	800474c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f821 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478e:	4602      	mov	r2, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	490a      	ldr	r1, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	5ccb      	ldrb	r3, [r1, r3]
 800479e:	fa22 f303 	lsr.w	r3, r2, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc fcf0 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	0800666c 	.word	0x0800666c
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	2300      	movs	r3, #0
 80047e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d00d      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x40>
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	f200 80bd 	bhi.w	8004974 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d003      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x3a>
 8004802:	e0b7      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004804:	4b61      	ldr	r3, [pc, #388]	; (800498c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004806:	60bb      	str	r3, [r7, #8]
       break;
 8004808:	e0b7      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800480c:	60bb      	str	r3, [r7, #8]
      break;
 800480e:	e0b4      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04d      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004826:	4b58      	ldr	r3, [pc, #352]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	461a      	mov	r2, r3
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	ea02 0800 	and.w	r8, r2, r0
 800483e:	ea03 0901 	and.w	r9, r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	014b      	lsls	r3, r1, #5
 8004850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004854:	0142      	lsls	r2, r0, #5
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	ebb0 0008 	subs.w	r0, r0, r8
 800485e:	eb61 0109 	sbc.w	r1, r1, r9
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	018b      	lsls	r3, r1, #6
 800486c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004870:	0182      	lsls	r2, r0, #6
 8004872:	1a12      	subs	r2, r2, r0
 8004874:	eb63 0301 	sbc.w	r3, r3, r1
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	00d9      	lsls	r1, r3, #3
 8004882:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004886:	00d0      	lsls	r0, r2, #3
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	eb12 0208 	adds.w	r2, r2, r8
 8004890:	eb43 0309 	adc.w	r3, r3, r9
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	0259      	lsls	r1, r3, #9
 800489e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048a2:	0250      	lsls	r0, r2, #9
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	4610      	mov	r0, r2
 80048aa:	4619      	mov	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	f7fb fc9a 	bl	80001ec <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e04a      	b.n	8004958 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c2:	4b31      	ldr	r3, [pc, #196]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	461a      	mov	r2, r3
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	ea02 0400 	and.w	r4, r2, r0
 80048da:	ea03 0501 	and.w	r5, r3, r1
 80048de:	4620      	mov	r0, r4
 80048e0:	4629      	mov	r1, r5
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	014b      	lsls	r3, r1, #5
 80048ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048f0:	0142      	lsls	r2, r0, #5
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	1b00      	subs	r0, r0, r4
 80048f8:	eb61 0105 	sbc.w	r1, r1, r5
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	018b      	lsls	r3, r1, #6
 8004906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800490a:	0182      	lsls	r2, r0, #6
 800490c:	1a12      	subs	r2, r2, r0
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	f04f 0000 	mov.w	r0, #0
 8004916:	f04f 0100 	mov.w	r1, #0
 800491a:	00d9      	lsls	r1, r3, #3
 800491c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004920:	00d0      	lsls	r0, r2, #3
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	1912      	adds	r2, r2, r4
 8004928:	eb45 0303 	adc.w	r3, r5, r3
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0299      	lsls	r1, r3, #10
 8004936:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800493a:	0290      	lsls	r0, r2, #10
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f7fb fc4e 	bl	80001ec <__aeabi_uldivmod>
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4613      	mov	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	3301      	adds	r3, #1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	60bb      	str	r3, [r7, #8]
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004976:	60bb      	str	r3, [r7, #8]
      break;
 8004978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497a:	68bb      	ldr	r3, [r7, #8]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	00f42400 	.word	0x00f42400
 8004990:	007a1200 	.word	0x007a1200

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000000 	.word	0x20000000

080049ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049b0:	f7ff fff0 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	0800667c 	.word	0x0800667c

080049d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049d8:	f7ff ffdc 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0b5b      	lsrs	r3, r3, #13
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	0800667c 	.word	0x0800667c

080049fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	220f      	movs	r2, #15
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0203 	and.w	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_RCC_GetClockConfig+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40023c00 	.word	0x40023c00

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d075      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a94:	4bad      	ldr	r3, [pc, #692]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fe07 	bl	80016ac <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aa2:	f7fc fe03 	bl	80016ac <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e18b      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab4:	4ba6      	ldr	r3, [pc, #664]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	019a      	lsls	r2, r3, #6
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	071b      	lsls	r3, r3, #28
 8004ad8:	499d      	ldr	r1, [pc, #628]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aec:	4b98      	ldr	r3, [pc, #608]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af2:	0f1b      	lsrs	r3, r3, #28
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	019a      	lsls	r2, r3, #6
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	431a      	orrs	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	071b      	lsls	r3, r3, #28
 8004b0c:	4990      	ldr	r1, [pc, #576]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b14:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1a:	f023 021f 	bic.w	r2, r3, #31
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	498a      	ldr	r1, [pc, #552]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	019a      	lsls	r2, r3, #6
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	4980      	ldr	r1, [pc, #512]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b54:	4b7d      	ldr	r3, [pc, #500]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fda7 	bl	80016ac <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b62:	f7fc fda3 	bl	80016ac <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e12b      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b74:	4b76      	ldr	r3, [pc, #472]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d079      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b98:	4b6e      	ldr	r3, [pc, #440]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b9e:	f7fc fd85 	bl	80016ac <HAL_GetTick>
 8004ba2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ba6:	f7fc fd81 	bl	80016ac <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e109      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bb8:	4b65      	ldr	r3, [pc, #404]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc4:	d0ef      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bd2:	4b5f      	ldr	r3, [pc, #380]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	0f1b      	lsrs	r3, r3, #28
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	019a      	lsls	r2, r3, #6
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	061b      	lsls	r3, r3, #24
 8004bec:	431a      	orrs	r2, r3
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	4957      	ldr	r1, [pc, #348]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bfa:	4b55      	ldr	r3, [pc, #340]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	4950      	ldr	r1, [pc, #320]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01e      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c20:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0e1b      	lsrs	r3, r3, #24
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	071b      	lsls	r3, r3, #28
 8004c40:	4943      	ldr	r1, [pc, #268]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	493e      	ldr	r1, [pc, #248]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c5e:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c64:	f7fc fd22 	bl	80016ac <HAL_GetTick>
 8004c68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004c6c:	f7fc fd1e 	bl	80016ac <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0a6      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c7e:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d1ef      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 808d 	beq.w	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4a2b      	ldr	r2, [pc, #172]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cc2:	f7fc fcf3 	bl	80016ac <HAL_GetTick>
 8004cc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fc fcef 	bl	80016ac <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e077      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d039      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d032      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d11e      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7fc fcbd 	bl	80016ac <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	e014      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fc fcb9 	bl	80016ac <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d90b      	bls.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e03f      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004d4c:	42470068 	.word	0x42470068
 8004d50:	40023800 	.word	0x40023800
 8004d54:	42470070 	.word	0x42470070
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d60:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0e4      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d78:	d10d      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d7a:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	4911      	ldr	r1, [pc, #68]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]
 8004d94:	e005      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004d96:	4b0f      	ldr	r3, [pc, #60]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dae:	4909      	ldr	r1, [pc, #36]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004dc8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	424711e0 	.word	0x424711e0

08004ddc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e025      	b.n	8004e3c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fccf 	bl	80007a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f000 ff31 	bl	8005c84 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	f000 ff9c 	bl	8005d6a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e07b      	b.n	8004f4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e66:	d009      	beq.n	8004e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	61da      	str	r2, [r3, #28]
 8004e6e:	e005      	b.n	8004e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fc f90a 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	ea42 0103 	orr.w	r1, r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	f003 0104 	and.w	r1, r3, #4
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0210 	and.w	r2, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e041      	b.n	8004fec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc fa17 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f000 fa95 	bl	80054c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3708      	adds	r7, #8
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d001      	beq.n	800500c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e04e      	b.n	80050aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d01d      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <HAL_TIM_Base_Start_IT+0xc8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d018      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d013      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00e      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d009      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0307 	and.w	r3, r3, #7
 800507e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d010      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005096:	e007      	b.n	80050a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40001800 	.word	0x40001800

080050d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d122      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d11b      	bne.n	8005130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0202 	mvn.w	r2, #2
 8005100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9b5 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 800511c:	e005      	b.n	800512a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9a7 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f9b8 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b04      	cmp	r3, #4
 800513c:	d122      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d11b      	bne.n	8005184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f06f 0204 	mvn.w	r2, #4
 8005154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f98b 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 8005170:	e005      	b.n	800517e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f97d 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f98e 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b08      	cmp	r3, #8
 8005190:	d122      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b08      	cmp	r3, #8
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0208 	mvn.w	r2, #8
 80051a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2204      	movs	r2, #4
 80051ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f961 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 80051c4:	e005      	b.n	80051d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f953 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f964 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d122      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	d11b      	bne.n	800522c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f937 	bl	8005486 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f929 	bl	8005472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f93a 	bl	800549a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0201 	mvn.w	r2, #1
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fb fede 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005262:	2b80      	cmp	r3, #128	; 0x80
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fae0 	bl	8005844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8ff 	bl	80054ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0220 	mvn.w	r2, #32
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 faaa 	bl	8005830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIM_ConfigClockSource+0x1c>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0b4      	b.n	800546a <HAL_TIM_ConfigClockSource+0x186>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800531e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005338:	d03e      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xd4>
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	f200 8087 	bhi.w	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	f000 8086 	beq.w	8005456 <HAL_TIM_ConfigClockSource+0x172>
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534e:	d87f      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b70      	cmp	r3, #112	; 0x70
 8005352:	d01a      	beq.n	800538a <HAL_TIM_ConfigClockSource+0xa6>
 8005354:	2b70      	cmp	r3, #112	; 0x70
 8005356:	d87b      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b60      	cmp	r3, #96	; 0x60
 800535a:	d050      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x11a>
 800535c:	2b60      	cmp	r3, #96	; 0x60
 800535e:	d877      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b50      	cmp	r3, #80	; 0x50
 8005362:	d03c      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xfa>
 8005364:	2b50      	cmp	r3, #80	; 0x50
 8005366:	d873      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d058      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x13a>
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d86f      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d064      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b30      	cmp	r3, #48	; 0x30
 8005376:	d86b      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d060      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d867      	bhi.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b10      	cmp	r3, #16
 8005386:	d05a      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x15a>
 8005388:	e062      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6899      	ldr	r1, [r3, #8]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f000 f9ad 	bl	80056f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	609a      	str	r2, [r3, #8]
      break;
 80053b6:	e04f      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6899      	ldr	r1, [r3, #8]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f000 f996 	bl	80056f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053da:	609a      	str	r2, [r3, #8]
      break;
 80053dc:	e03c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 f90a 	bl	8005604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2150      	movs	r1, #80	; 0x50
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f963 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 80053fc:	e02c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 f929 	bl	8005662 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2160      	movs	r1, #96	; 0x60
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f953 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800541c:	e01c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 f8ea 	bl	8005604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f943 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800543c:	e00c      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f000 f93a 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 800544e:	e003      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      break;
 8005454:	e000      	b.n	8005458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005468:	7bfb      	ldrb	r3, [r7, #15]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a2:	bf00      	nop
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a40      	ldr	r2, [pc, #256]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d00f      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a3d      	ldr	r2, [pc, #244]	; (80055dc <TIM_Base_SetConfig+0x118>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00b      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a3c      	ldr	r2, [pc, #240]	; (80055e0 <TIM_Base_SetConfig+0x11c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a3b      	ldr	r2, [pc, #236]	; (80055e4 <TIM_Base_SetConfig+0x120>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a3a      	ldr	r2, [pc, #232]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d027      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2c      	ldr	r2, [pc, #176]	; (80055dc <TIM_Base_SetConfig+0x118>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d023      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2b      	ldr	r2, [pc, #172]	; (80055e0 <TIM_Base_SetConfig+0x11c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01f      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <TIM_Base_SetConfig+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a29      	ldr	r2, [pc, #164]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d017      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a28      	ldr	r2, [pc, #160]	; (80055ec <TIM_Base_SetConfig+0x128>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <TIM_Base_SetConfig+0x12c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00f      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a26      	ldr	r2, [pc, #152]	; (80055f4 <TIM_Base_SetConfig+0x130>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00b      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a25      	ldr	r2, [pc, #148]	; (80055f8 <TIM_Base_SetConfig+0x134>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d007      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a24      	ldr	r2, [pc, #144]	; (80055fc <TIM_Base_SetConfig+0x138>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d003      	beq.n	8005576 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a23      	ldr	r2, [pc, #140]	; (8005600 <TIM_Base_SetConfig+0x13c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d108      	bne.n	8005588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <TIM_Base_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0xf8>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a0c      	ldr	r2, [pc, #48]	; (80055e8 <TIM_Base_SetConfig+0x124>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d103      	bne.n	80055c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	615a      	str	r2, [r3, #20]
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40010400 	.word	0x40010400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40001800 	.word	0x40001800
 80055fc:	40001c00 	.word	0x40001c00
 8005600:	40002000 	.word	0x40002000

08005604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f023 030a 	bic.w	r3, r3, #10
 8005640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800568c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	031b      	lsls	r3, r3, #12
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800569e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e05a      	b.n	8005806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d01d      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1a      	ldr	r2, [pc, #104]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a18      	ldr	r2, [pc, #96]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a17      	ldr	r2, [pc, #92]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10c      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000
 8005818:	40000400 	.word	0x40000400
 800581c:	40000800 	.word	0x40000800
 8005820:	40000c00 	.word	0x40000c00
 8005824:	40010400 	.word	0x40010400
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800

08005830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e03f      	b.n	80058ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fde2 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f829 	bl	80058f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	b09f      	sub	sp, #124	; 0x7c
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590a:	68d9      	ldr	r1, [r3, #12]
 800590c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	ea40 0301 	orr.w	r3, r0, r1
 8005914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	431a      	orrs	r2, r3
 8005920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	431a      	orrs	r2, r3
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	4313      	orrs	r3, r2
 800592c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005938:	f021 010c 	bic.w	r1, r1, #12
 800593c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005942:	430b      	orrs	r3, r1
 8005944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	6999      	ldr	r1, [r3, #24]
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	ea40 0301 	orr.w	r3, r0, r1
 800595c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4bc5      	ldr	r3, [pc, #788]	; (8005c78 <UART_SetConfig+0x384>)
 8005964:	429a      	cmp	r2, r3
 8005966:	d004      	beq.n	8005972 <UART_SetConfig+0x7e>
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4bc3      	ldr	r3, [pc, #780]	; (8005c7c <UART_SetConfig+0x388>)
 800596e:	429a      	cmp	r2, r3
 8005970:	d103      	bne.n	800597a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005972:	f7ff f82f 	bl	80049d4 <HAL_RCC_GetPCLK2Freq>
 8005976:	6778      	str	r0, [r7, #116]	; 0x74
 8005978:	e002      	b.n	8005980 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7ff f817 	bl	80049ac <HAL_RCC_GetPCLK1Freq>
 800597e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005988:	f040 80b6 	bne.w	8005af8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800598e:	461c      	mov	r4, r3
 8005990:	f04f 0500 	mov.w	r5, #0
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	1891      	adds	r1, r2, r2
 800599a:	6439      	str	r1, [r7, #64]	; 0x40
 800599c:	415b      	adcs	r3, r3
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059a4:	1912      	adds	r2, r2, r4
 80059a6:	eb45 0303 	adc.w	r3, r5, r3
 80059aa:	f04f 0000 	mov.w	r0, #0
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	00d9      	lsls	r1, r3, #3
 80059b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059b8:	00d0      	lsls	r0, r2, #3
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	1911      	adds	r1, r2, r4
 80059c0:	6639      	str	r1, [r7, #96]	; 0x60
 80059c2:	416b      	adcs	r3, r5
 80059c4:	667b      	str	r3, [r7, #100]	; 0x64
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d4:	415b      	adcs	r3, r3
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059e0:	f7fa fc04 	bl	80001ec <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4ba5      	ldr	r3, [pc, #660]	; (8005c80 <UART_SetConfig+0x38c>)
 80059ea:	fba3 2302 	umull	r2, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	011e      	lsls	r6, r3, #4
 80059f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f4:	461c      	mov	r4, r3
 80059f6:	f04f 0500 	mov.w	r5, #0
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	6339      	str	r1, [r7, #48]	; 0x30
 8005a02:	415b      	adcs	r3, r3
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34
 8005a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a0a:	1912      	adds	r2, r2, r4
 8005a0c:	eb45 0303 	adc.w	r3, r5, r3
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	00d9      	lsls	r1, r3, #3
 8005a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a1e:	00d0      	lsls	r0, r2, #3
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	1911      	adds	r1, r2, r4
 8005a26:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a28:	416b      	adcs	r3, r5
 8005a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	461a      	mov	r2, r3
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	1891      	adds	r1, r2, r2
 8005a38:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a3a:	415b      	adcs	r3, r3
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a46:	f7fa fbd1 	bl	80001ec <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b8c      	ldr	r3, [pc, #560]	; (8005c80 <UART_SetConfig+0x38c>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a87      	ldr	r2, [pc, #540]	; (8005c80 <UART_SetConfig+0x38c>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a70:	441e      	add	r6, r3
 8005a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a74:	4618      	mov	r0, r3
 8005a76:	f04f 0100 	mov.w	r1, #0
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	1894      	adds	r4, r2, r2
 8005a80:	623c      	str	r4, [r7, #32]
 8005a82:	415b      	adcs	r3, r3
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
 8005a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a8a:	1812      	adds	r2, r2, r0
 8005a8c:	eb41 0303 	adc.w	r3, r1, r3
 8005a90:	f04f 0400 	mov.w	r4, #0
 8005a94:	f04f 0500 	mov.w	r5, #0
 8005a98:	00dd      	lsls	r5, r3, #3
 8005a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a9e:	00d4      	lsls	r4, r2, #3
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	1814      	adds	r4, r2, r0
 8005aa6:	653c      	str	r4, [r7, #80]	; 0x50
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	1891      	adds	r1, r2, r2
 8005ab8:	61b9      	str	r1, [r7, #24]
 8005aba:	415b      	adcs	r3, r3
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ac6:	f7fa fb91 	bl	80001ec <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4b6c      	ldr	r3, [pc, #432]	; (8005c80 <UART_SetConfig+0x38c>)
 8005ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	2164      	movs	r1, #100	; 0x64
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	3332      	adds	r3, #50	; 0x32
 8005ae2:	4a67      	ldr	r2, [pc, #412]	; (8005c80 <UART_SetConfig+0x38c>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	f003 0207 	and.w	r2, r3, #7
 8005aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4432      	add	r2, r6
 8005af4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af6:	e0b9      	b.n	8005c6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005afa:	461c      	mov	r4, r3
 8005afc:	f04f 0500 	mov.w	r5, #0
 8005b00:	4622      	mov	r2, r4
 8005b02:	462b      	mov	r3, r5
 8005b04:	1891      	adds	r1, r2, r2
 8005b06:	6139      	str	r1, [r7, #16]
 8005b08:	415b      	adcs	r3, r3
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b10:	1912      	adds	r2, r2, r4
 8005b12:	eb45 0303 	adc.w	r3, r5, r3
 8005b16:	f04f 0000 	mov.w	r0, #0
 8005b1a:	f04f 0100 	mov.w	r1, #0
 8005b1e:	00d9      	lsls	r1, r3, #3
 8005b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b24:	00d0      	lsls	r0, r2, #3
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	eb12 0804 	adds.w	r8, r2, r4
 8005b2e:	eb43 0905 	adc.w	r9, r3, r5
 8005b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	008b      	lsls	r3, r1, #2
 8005b46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b4a:	0082      	lsls	r2, r0, #2
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f7fa fb4c 	bl	80001ec <__aeabi_uldivmod>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4b49      	ldr	r3, [pc, #292]	; (8005c80 <UART_SetConfig+0x38c>)
 8005b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	011e      	lsls	r6, r3, #4
 8005b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b64:	4618      	mov	r0, r3
 8005b66:	f04f 0100 	mov.w	r1, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	1894      	adds	r4, r2, r2
 8005b70:	60bc      	str	r4, [r7, #8]
 8005b72:	415b      	adcs	r3, r3
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b7a:	1812      	adds	r2, r2, r0
 8005b7c:	eb41 0303 	adc.w	r3, r1, r3
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	f04f 0500 	mov.w	r5, #0
 8005b88:	00dd      	lsls	r5, r3, #3
 8005b8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b8e:	00d4      	lsls	r4, r2, #3
 8005b90:	4622      	mov	r2, r4
 8005b92:	462b      	mov	r3, r5
 8005b94:	1814      	adds	r4, r2, r0
 8005b96:	64bc      	str	r4, [r7, #72]	; 0x48
 8005b98:	414b      	adcs	r3, r1
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	008b      	lsls	r3, r1, #2
 8005bb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bb4:	0082      	lsls	r2, r0, #2
 8005bb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bba:	f7fa fb17 	bl	80001ec <__aeabi_uldivmod>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <UART_SetConfig+0x38c>)
 8005bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	2164      	movs	r1, #100	; 0x64
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	3332      	adds	r3, #50	; 0x32
 8005bd6:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <UART_SetConfig+0x38c>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	441e      	add	r6, r3
 8005be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be6:	4618      	mov	r0, r3
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	1894      	adds	r4, r2, r2
 8005bf2:	603c      	str	r4, [r7, #0]
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfc:	1812      	adds	r2, r2, r0
 8005bfe:	eb41 0303 	adc.w	r3, r1, r3
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	f04f 0500 	mov.w	r5, #0
 8005c0a:	00dd      	lsls	r5, r3, #3
 8005c0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c10:	00d4      	lsls	r4, r2, #3
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	eb12 0a00 	adds.w	sl, r2, r0
 8005c1a:	eb43 0b01 	adc.w	fp, r3, r1
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f04f 0100 	mov.w	r1, #0
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	008b      	lsls	r3, r1, #2
 8005c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c36:	0082      	lsls	r2, r0, #2
 8005c38:	4650      	mov	r0, sl
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	f7fa fad6 	bl	80001ec <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <UART_SetConfig+0x38c>)
 8005c46:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2164      	movs	r1, #100	; 0x64
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	; 0x32
 8005c58:	4a09      	ldr	r2, [pc, #36]	; (8005c80 <UART_SetConfig+0x38c>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4432      	add	r2, r6
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	377c      	adds	r7, #124	; 0x7c
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c76:	bf00      	nop
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	40011400 	.word	0x40011400
 8005c80:	51eb851f 	.word	0x51eb851f

08005c84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d029      	beq.n	8005cf2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005caa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005cb8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8005cbe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8005cc4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005cca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005cd0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005cd6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005cdc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005ce2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	e034      	b.n	8005d5c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cfe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005d0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d26:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d30:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005d36:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005d3c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005d42:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005d48:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d02e      	beq.n	8005de2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005d90:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005da0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005daa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005db4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005dbe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005dc8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	e03b      	b.n	8005e5a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005df2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005e04:	4313      	orrs	r3, r2
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e18:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e28:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005e32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005e3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005e46:	4313      	orrs	r3, r2
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 001c 	add.w	r0, r7, #28
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d122      	bne.n	8005ec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d105      	bne.n	8005eba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f950 	bl	8006160 <USB_CoreReset>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
 8005ec4:	e01a      	b.n	8005efc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f944 	bl	8006160 <USB_CoreReset>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
 8005eee:	e005      	b.n	8005efc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d10b      	bne.n	8005f1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f043 0206 	orr.w	r2, r3, #6
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f26:	b004      	add	sp, #16
 8005f28:	4770      	bx	lr

08005f2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d115      	bne.n	8005f9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fb fba2 	bl	80016c4 <HAL_Delay>
      ms++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8db 	bl	8006142 <USB_GetMode>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d01e      	beq.n	8005fd0 <USB_SetCurrentMode+0x84>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b31      	cmp	r3, #49	; 0x31
 8005f96:	d9f0      	bls.n	8005f7a <USB_SetCurrentMode+0x2e>
 8005f98:	e01a      	b.n	8005fd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d115      	bne.n	8005fcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7fb fb89 	bl	80016c4 <HAL_Delay>
      ms++;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f8c2 	bl	8006142 <USB_GetMode>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <USB_SetCurrentMode+0x84>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b31      	cmp	r3, #49	; 0x31
 8005fc8:	d9f0      	bls.n	8005fac <USB_SetCurrentMode+0x60>
 8005fca:	e001      	b.n	8005fd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e005      	b.n	8005fdc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b32      	cmp	r3, #50	; 0x32
 8005fd4:	d101      	bne.n	8005fda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e000      	b.n	8005fdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	4a08      	ldr	r2, [pc, #32]	; (8006028 <USB_FlushTxFifo+0x44>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e006      	b.n	800601c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b20      	cmp	r3, #32
 8006018:	d0f1      	beq.n	8005ffe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	00030d40 	.word	0x00030d40

0800602c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2210      	movs	r2, #16
 800603c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	4a08      	ldr	r2, [pc, #32]	; (8006068 <USB_FlushRxFifo+0x3c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e006      	b.n	800605c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b10      	cmp	r3, #16
 8006058:	d0f1      	beq.n	800603e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	00030d40 	.word	0x00030d40

0800606c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800606c:	b480      	push	{r7}
 800606e:	b08b      	sub	sp, #44	; 0x2c
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	089b      	lsrs	r3, r3, #2
 8006086:	b29b      	uxth	r3, r3
 8006088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006092:	2300      	movs	r3, #0
 8006094:	623b      	str	r3, [r7, #32]
 8006096:	e014      	b.n	80060c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	3301      	adds	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	3301      	adds	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	3301      	adds	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	3301      	adds	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	3301      	adds	r3, #1
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	6a3a      	ldr	r2, [r7, #32]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d3e6      	bcc.n	8006098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060ca:	8bfb      	ldrh	r3, [r7, #30]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01e      	beq.n	800610e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	461a      	mov	r2, r3
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	701a      	strb	r2, [r3, #0]
      i++;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	3301      	adds	r3, #1
 80060fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006102:	8bfb      	ldrh	r3, [r7, #30]
 8006104:	3b01      	subs	r3, #1
 8006106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006108:	8bfb      	ldrh	r3, [r7, #30]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ea      	bne.n	80060e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006110:	4618      	mov	r0, r3
 8006112:	372c      	adds	r7, #44	; 0x2c
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006134:	68fb      	ldr	r3, [r7, #12]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0301 	and.w	r3, r3, #1
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4a13      	ldr	r2, [pc, #76]	; (80061c0 <USB_CoreReset+0x60>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d901      	bls.n	800617c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e01a      	b.n	80061b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	daf3      	bge.n	800616c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f043 0201 	orr.w	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <USB_CoreReset+0x60>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d901      	bls.n	80061a4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e006      	b.n	80061b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d0f1      	beq.n	8006194 <USB_CoreReset+0x34>

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	00030d40 	.word	0x00030d40

080061c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c4:	b084      	sub	sp, #16
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	f107 001c 	add.w	r0, r7, #28
 80061d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10a      	bne.n	8006232 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	e014      	b.n	800625c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006240:	f023 0304 	bic.w	r3, r3, #4
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	e009      	b.n	800625c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006256:	f023 0304 	bic.w	r3, r3, #4
 800625a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800625c:	2110      	movs	r1, #16
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fec0 	bl	8005fe4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff fee1 	bl	800602c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e015      	b.n	800629c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	461a      	mov	r2, r3
 800627e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006282:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4413      	add	r3, r2
 800628c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d3e5      	bcc.n	8006270 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062b0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <USB_HostInit+0x154>)
 80062ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <USB_HostInit+0x158>)
 80062d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80062d4:	e009      	b.n	80062ea <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a10      	ldr	r2, [pc, #64]	; (8006320 <USB_HostInit+0x15c>)
 80062e0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <USB_HostInit+0x160>)
 80062e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d105      	bne.n	80062fc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f043 0210 	orr.w	r2, r3, #16
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699a      	ldr	r2, [r3, #24]
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <USB_HostInit+0x164>)
 8006302:	4313      	orrs	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006314:	b004      	add	sp, #16
 8006316:	4770      	bx	lr
 8006318:	01000200 	.word	0x01000200
 800631c:	00e00300 	.word	0x00e00300
 8006320:	00600080 	.word	0x00600080
 8006324:	004000e0 	.word	0x004000e0
 8006328:	a3200008 	.word	0xa3200008

0800632c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800634a:	f023 0303 	bic.w	r3, r3, #3
 800634e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006374:	461a      	mov	r2, r3
 8006376:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800637a:	6053      	str	r3, [r2, #4]
 800637c:	e009      	b.n	8006392 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d106      	bne.n	8006392 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638a:	461a      	mov	r2, r3
 800638c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006390:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	b29b      	uxth	r3, r3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b089      	sub	sp, #36	; 0x24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80063d2:	78fb      	ldrb	r3, [r7, #3]
 80063d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	0c9b      	lsrs	r3, r3, #18
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	0fdb      	lsrs	r3, r3, #31
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d104      	bne.n	800641c <USB_HC_Halt+0x5a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e0e8      	b.n	80065ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <USB_HC_Halt+0x66>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d173      	bne.n	8006510 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	440a      	add	r2, r1
 800643e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006446:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 80cb 	bne.w	80065ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d143      	bne.n	80064ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	440a      	add	r2, r1
 8006478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006480:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	0151      	lsls	r1, r2, #5
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	440a      	add	r2, r1
 8006498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800649c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	0151      	lsls	r1, r2, #5
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	440a      	add	r2, r1
 80064b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3301      	adds	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ce:	d81d      	bhi.n	800650c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064e6:	d0ec      	beq.n	80064c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064e8:	e080      	b.n	80065ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006508:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650a:	e06f      	b.n	80065ec <USB_HC_Halt+0x22a>
            break;
 800650c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800650e:	e06d      	b.n	80065ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d143      	bne.n	80065c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	440a      	add	r2, r1
 8006556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800655e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	440a      	add	r2, r1
 8006576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800657e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	4413      	add	r3, r2
 8006588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	0151      	lsls	r1, r2, #5
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	440a      	add	r2, r1
 8006596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800659a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800659e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ac:	d81d      	bhi.n	80065ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c4:	d0ec      	beq.n	80065a0 <USB_HC_Halt+0x1de>
 80065c6:	e011      	b.n	80065ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	e000      	b.n	80065ec <USB_HC_Halt+0x22a>
          break;
 80065ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <__libc_init_array>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	4d0d      	ldr	r5, [pc, #52]	; (8006634 <__libc_init_array+0x38>)
 8006600:	4c0d      	ldr	r4, [pc, #52]	; (8006638 <__libc_init_array+0x3c>)
 8006602:	1b64      	subs	r4, r4, r5
 8006604:	10a4      	asrs	r4, r4, #2
 8006606:	2600      	movs	r6, #0
 8006608:	42a6      	cmp	r6, r4
 800660a:	d109      	bne.n	8006620 <__libc_init_array+0x24>
 800660c:	4d0b      	ldr	r5, [pc, #44]	; (800663c <__libc_init_array+0x40>)
 800660e:	4c0c      	ldr	r4, [pc, #48]	; (8006640 <__libc_init_array+0x44>)
 8006610:	f000 f820 	bl	8006654 <_init>
 8006614:	1b64      	subs	r4, r4, r5
 8006616:	10a4      	asrs	r4, r4, #2
 8006618:	2600      	movs	r6, #0
 800661a:	42a6      	cmp	r6, r4
 800661c:	d105      	bne.n	800662a <__libc_init_array+0x2e>
 800661e:	bd70      	pop	{r4, r5, r6, pc}
 8006620:	f855 3b04 	ldr.w	r3, [r5], #4
 8006624:	4798      	blx	r3
 8006626:	3601      	adds	r6, #1
 8006628:	e7ee      	b.n	8006608 <__libc_init_array+0xc>
 800662a:	f855 3b04 	ldr.w	r3, [r5], #4
 800662e:	4798      	blx	r3
 8006630:	3601      	adds	r6, #1
 8006632:	e7f2      	b.n	800661a <__libc_init_array+0x1e>
 8006634:	0800668c 	.word	0x0800668c
 8006638:	0800668c 	.word	0x0800668c
 800663c:	0800668c 	.word	0x0800668c
 8006640:	08006690 	.word	0x08006690

08006644 <memset>:
 8006644:	4402      	add	r2, r0
 8006646:	4603      	mov	r3, r0
 8006648:	4293      	cmp	r3, r2
 800664a:	d100      	bne.n	800664e <memset+0xa>
 800664c:	4770      	bx	lr
 800664e:	f803 1b01 	strb.w	r1, [r3], #1
 8006652:	e7f9      	b.n	8006648 <memset+0x4>

08006654 <_init>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	bf00      	nop
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr

08006660 <_fini>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr
