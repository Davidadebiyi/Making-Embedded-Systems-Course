
smart_coaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006898  08006898  00016898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cac  08006cac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb4  08006cb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb4  08006cb4  00016cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000000f0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f529  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002352  00000000  00000000  0002f735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00031a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00032850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e24  00000000  00000000  00033518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109ed  00000000  00000000  0005833c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc59d  00000000  00000000  00068d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001452c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004aa0  00000000  00000000  0014531c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800687c 	.word	0x0800687c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800687c 	.word	0x0800687c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	4bb2      	ldr	r3, [pc, #712]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4ab1      	ldr	r2, [pc, #708]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4baf      	ldr	r3, [pc, #700]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4aaa      	ldr	r2, [pc, #680]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4aa3      	ldr	r2, [pc, #652]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a9c      	ldr	r2, [pc, #624]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b9a      	ldr	r3, [pc, #616]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b96      	ldr	r3, [pc, #600]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a95      	ldr	r2, [pc, #596]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b85      	ldr	r3, [pc, #532]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a80      	ldr	r2, [pc, #512]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b7e      	ldr	r3, [pc, #504]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	487b      	ldr	r0, [pc, #492]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000fbc:	f001 fa82 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2116      	movs	r1, #22
 8000fc4:	4879      	ldr	r0, [pc, #484]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8000fc6:	f001 fa7d 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4878      	ldr	r0, [pc, #480]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 8000fd0:	f001 fa78 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fda:	4876      	ldr	r0, [pc, #472]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 8000fdc:	f001 fa72 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fe6:	4874      	ldr	r0, [pc, #464]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 8000fe8:	f001 fa6c 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4869      	ldr	r0, [pc, #420]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8001004:	f001 f89a 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A2_Pin|A3_Pin|A5_Pin|SDNRAS_Pin
 8001008:	f64f 032c 	movw	r3, #63532	; 0xf82c
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800101a:	230c      	movs	r3, #12
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4865      	ldr	r0, [pc, #404]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001026:	f001 f889 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esnes_pmet_Pin;
 800102a:	2310      	movs	r3, #16
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(esnes_pmet_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	485f      	ldr	r0, [pc, #380]	; (80011bc <MX_GPIO_Init+0x2fc>)
 800103e:	f001 f87d 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001042:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001054:	2305      	movs	r3, #5
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4857      	ldr	r0, [pc, #348]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001060:	f001 f86c 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001076:	230e      	movs	r3, #14
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	484e      	ldr	r0, [pc, #312]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001082:	f001 f85b 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001086:	2301      	movs	r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001096:	230c      	movs	r3, #12
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4842      	ldr	r0, [pc, #264]	; (80011ac <MX_GPIO_Init+0x2ec>)
 80010a2:	f001 f84b 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80010a6:	2316      	movs	r3, #22
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	483b      	ldr	r0, [pc, #236]	; (80011ac <MX_GPIO_Init+0x2ec>)
 80010be:	f001 f83d 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80010c2:	f248 0307 	movw	r3, #32775	; 0x8007
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4835      	ldr	r0, [pc, #212]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 80010da:	f001 f82f 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010de:	f641 0358 	movw	r3, #6232	; 0x1858
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f0:	230e      	movs	r3, #14
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 80010fc:	f001 f81e 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 8001118:	f001 f810 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800111c:	2320      	movs	r3, #32
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001120:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8001132:	f001 f803 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001136:	2303      	movs	r3, #3
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001146:	2309      	movs	r3, #9
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_GPIO_Init+0x300>)
 8001152:	f000 fff3 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001156:	2304      	movs	r3, #4
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x300>)
 800116a:	f000 ffe7 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800116e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001180:	230c      	movs	r3, #12
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 800118c:	f000 ffd6 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001190:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	e010      	b.n	80011c4 <MX_GPIO_Init+0x304>
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021400 	.word	0x40021400
 80011c0:	40020400 	.word	0x40020400
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c6:	230c      	movs	r3, #12
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	487b      	ldr	r0, [pc, #492]	; (80013c0 <MX_GPIO_Init+0x500>)
 80011d2:	f000 ffb3 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011d6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e8:	230e      	movs	r3, #14
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	4874      	ldr	r0, [pc, #464]	; (80013c4 <MX_GPIO_Init+0x504>)
 80011f4:	f000 ffa2 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80011f8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800120a:	230c      	movs	r3, #12
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	486b      	ldr	r0, [pc, #428]	; (80013c4 <MX_GPIO_Init+0x504>)
 8001216:	f000 ff91 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800121a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4865      	ldr	r0, [pc, #404]	; (80013c4 <MX_GPIO_Init+0x504>)
 8001230:	f000 ff84 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001234:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001246:	230c      	movs	r3, #12
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	485d      	ldr	r0, [pc, #372]	; (80013c8 <MX_GPIO_Init+0x508>)
 8001252:	f000 ff73 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	4857      	ldr	r0, [pc, #348]	; (80013c8 <MX_GPIO_Init+0x508>)
 800126c:	f000 ff66 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001270:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <MX_GPIO_Init+0x508>)
 800128a:	f000 ff57 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800128e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4848      	ldr	r0, [pc, #288]	; (80013cc <MX_GPIO_Init+0x50c>)
 80012ac:	f000 ff46 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012b0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c2:	230e      	movs	r3, #14
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4840      	ldr	r0, [pc, #256]	; (80013d0 <MX_GPIO_Init+0x510>)
 80012ce:	f000 ff35 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80012d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012e4:	2304      	movs	r3, #4
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4838      	ldr	r0, [pc, #224]	; (80013d0 <MX_GPIO_Init+0x510>)
 80012f0:	f000 ff24 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	2312      	movs	r3, #18
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001306:	2304      	movs	r3, #4
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4830      	ldr	r0, [pc, #192]	; (80013d4 <MX_GPIO_Init+0x514>)
 8001312:	f000 ff13 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4828      	ldr	r0, [pc, #160]	; (80013d4 <MX_GPIO_Init+0x514>)
 8001334:	f000 ff02 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001338:	2348      	movs	r3, #72	; 0x48
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001348:	230e      	movs	r3, #14
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	481d      	ldr	r0, [pc, #116]	; (80013c8 <MX_GPIO_Init+0x508>)
 8001354:	f000 fef2 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001358:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800136a:	2309      	movs	r3, #9
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <MX_GPIO_Init+0x50c>)
 8001376:	f000 fee1 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800137a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <MX_GPIO_Init+0x50c>)
 8001394:	f000 fed2 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001398:	2360      	movs	r3, #96	; 0x60
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a8:	230c      	movs	r3, #12
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <MX_GPIO_Init+0x504>)
 80013b4:	f000 fec2 	bl	800213c <HAL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3738      	adds	r7, #56	; 0x38
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000

080013d8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f043 030c 	orr.w	r3, r3, #12
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	b2db      	uxtb	r3, r3
 8001402:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	f043 030c 	orr.w	r3, r3, #12
 800140a:	b2db      	uxtb	r3, r3
 800140c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001418:	f107 0208 	add.w	r2, r7, #8
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2304      	movs	r3, #4
 8001422:	214e      	movs	r1, #78	; 0x4e
 8001424:	4803      	ldr	r0, [pc, #12]	; (8001434 <lcd_send_cmd+0x5c>)
 8001426:	f001 f9ab 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000210 	.word	0x20000210

08001438 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af02      	add	r7, sp, #8
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f023 030f 	bic.w	r3, r3, #15
 8001448:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	f043 030d 	orr.w	r3, r3, #13
 8001456:	b2db      	uxtb	r3, r3
 8001458:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	f043 0309 	orr.w	r3, r3, #9
 8001460:	b2db      	uxtb	r3, r3
 8001462:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	f043 030d 	orr.w	r3, r3, #13
 800146a:	b2db      	uxtb	r3, r3
 800146c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	f043 0309 	orr.w	r3, r3, #9
 8001474:	b2db      	uxtb	r3, r3
 8001476:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2304      	movs	r3, #4
 8001482:	214e      	movs	r1, #78	; 0x4e
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <lcd_send_data+0x5c>)
 8001486:	f001 f97b 	bl	8002780 <HAL_I2C_Master_Transmit>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000210 	.word	0x20000210

08001498 <lcd_clear>:

void lcd_clear (void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	f7ff ff9a 	bl	80013d8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	e005      	b.n	80014b6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80014aa:	2020      	movs	r0, #32
 80014ac:	f7ff ffc4 	bl	8001438 <lcd_send_data>
	for (int i=0; i<70; i++)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b45      	cmp	r3, #69	; 0x45
 80014ba:	ddf6      	ble.n	80014aa <lcd_clear+0x12>
	}
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
    switch (row)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <lcd_put_cur+0x18>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <lcd_put_cur+0x22>
 80014dc:	e009      	b.n	80014f2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	603b      	str	r3, [r7, #0]
            break;
 80014e6:	e004      	b.n	80014f2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014ee:	603b      	str	r3, [r7, #0]
            break;
 80014f0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff6e 	bl	80013d8 <lcd_send_cmd>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <lcd_init>:


void lcd_init (void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001508:	2032      	movs	r0, #50	; 0x32
 800150a:	f000 fd0d 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 800150e:	2030      	movs	r0, #48	; 0x30
 8001510:	f7ff ff62 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001514:	2005      	movs	r0, #5
 8001516:	f000 fd07 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 800151a:	2030      	movs	r0, #48	; 0x30
 800151c:	f7ff ff5c 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001520:	2001      	movs	r0, #1
 8001522:	f000 fd01 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001526:	2030      	movs	r0, #48	; 0x30
 8001528:	f7ff ff56 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f000 fcfb 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001532:	2020      	movs	r0, #32
 8001534:	f7ff ff50 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f000 fcf5 	bl	8001f28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800153e:	2028      	movs	r0, #40	; 0x28
 8001540:	f7ff ff4a 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f000 fcef 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800154a:	2008      	movs	r0, #8
 800154c:	f7ff ff44 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(1);
 8001550:	2001      	movs	r0, #1
 8001552:	f000 fce9 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001556:	2001      	movs	r0, #1
 8001558:	f7ff ff3e 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f000 fce3 	bl	8001f28 <HAL_Delay>
	HAL_Delay(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f000 fce0 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001568:	2006      	movs	r0, #6
 800156a:	f7ff ff35 	bl	80013d8 <lcd_send_cmd>
	HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f000 fcda 	bl	8001f28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001574:	200c      	movs	r0, #12
 8001576:	f7ff ff2f 	bl	80013d8 <lcd_send_cmd>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}

0800157e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001586:	e006      	b.n	8001596 <lcd_send_string+0x18>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff51 	bl	8001438 <lcd_send_data>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f4      	bne.n	8001588 <lcd_send_string+0xa>
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_I2C2_Init+0x74>)
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MX_I2C2_Init+0x78>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_I2C2_Init+0x74>)
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <MX_I2C2_Init+0x7c>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_I2C2_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_I2C2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_I2C2_Init+0x74>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <MX_I2C2_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_I2C2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_I2C2_Init+0x74>)
 80015e6:	f000 ff87 	bl	80024f8 <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015f0:	f000 fa76 	bl	8001ae0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_I2C2_Init+0x74>)
 80015f8:	f001 fbc9 	bl	8002d8e <HAL_I2CEx_ConfigAnalogFilter>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001602:	f000 fa6d 	bl	8001ae0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001606:	2100      	movs	r1, #0
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_I2C2_Init+0x74>)
 800160a:	f001 fbfc 	bl	8002e06 <HAL_I2CEx_ConfigDigitalFilter>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001614:	f000 fa64 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000210 	.word	0x20000210
 8001620:	40005800 	.word	0x40005800
 8001624:	000186a0 	.word	0x000186a0

08001628 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12b      	bne.n	80016a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001654:	f043 0320 	orr.w	r3, r3, #32
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001666:	2303      	movs	r3, #3
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001676:	2304      	movs	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <HAL_I2C_MspInit+0x8c>)
 8001682:	f000 fd5b 	bl	800213c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005800 	.word	0x40005800
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021400 	.word	0x40021400

080016b8 <delay>:
*/
//DHT_DataTypedef DHT11_Data;
//float Temperature, Humidity;

void delay (uint16_t time)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <delay+0x30>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 80016ca:	bf00      	nop
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <delay+0x30>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3f9      	bcc.n	80016cc <delay+0x14>
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000270 	.word	0x20000270

080016ec <Display_Temp>:

void Display_Temp (float Temp)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 0);
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fedb 	bl	80014c6 <lcd_put_cur>

//	sprintf (str, "TEMP:- %.2f ", Temp);
	sprintf (str, "TEMP: %.2f ", Temp);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe ff29 	bl	8000568 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	f107 000c 	add.w	r0, r7, #12
 800171e:	4907      	ldr	r1, [pc, #28]	; (800173c <Display_Temp+0x50>)
 8001720:	f002 fe80 	bl	8004424 <siprintf>
	lcd_send_string(str);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff28 	bl	800157e <lcd_send_string>
	lcd_send_data('C');
 800172e:	2043      	movs	r0, #67	; 0x43
 8001730:	f7ff fe82 	bl	8001438 <lcd_send_data>
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	08006898 	.word	0x08006898

08001740 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 fce4 	bl	800213c <HAL_GPIO_Init>
}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fcc6 	bl	800213c <HAL_GPIO_Init>
}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <DHT11_Start>:

#define DHT11_PORT esnes_pmet_GPIO_Port
#define DHT11_PIN esnes_pmet_Pin

void DHT11_Start (void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80017bc:	2110      	movs	r1, #16
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <DHT11_Start+0x3c>)
 80017c0:	f7ff ffbe 	bl	8001740 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80017c4:	2200      	movs	r2, #0
 80017c6:	2110      	movs	r1, #16
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <DHT11_Start+0x3c>)
 80017ca:	f000 fe7b 	bl	80024c4 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 80017ce:	f244 6050 	movw	r0, #18000	; 0x4650
 80017d2:	f7ff ff71 	bl	80016b8 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80017d6:	2201      	movs	r2, #1
 80017d8:	2110      	movs	r1, #16
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <DHT11_Start+0x3c>)
 80017dc:	f000 fe72 	bl	80024c4 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 80017e0:	2014      	movs	r0, #20
 80017e2:	f7ff ff69 	bl	80016b8 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80017e6:	2110      	movs	r1, #16
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DHT11_Start+0x3c>)
 80017ea:	f7ff ffc7 	bl	800177c <Set_Pin_Input>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021400 	.word	0x40021400

080017f8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001802:	2028      	movs	r0, #40	; 0x28
 8001804:	f7ff ff58 	bl	80016b8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001808:	2110      	movs	r1, #16
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <DHT11_Check_Response+0x58>)
 800180c:	f000 fe42 	bl	8002494 <HAL_GPIO_ReadPin>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10e      	bne.n	8001834 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001816:	2050      	movs	r0, #80	; 0x50
 8001818:	f7ff ff4e 	bl	80016b8 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800181c:	2110      	movs	r1, #16
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <DHT11_Check_Response+0x58>)
 8001820:	f000 fe38 	bl	8002494 <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <DHT11_Check_Response+0x38>
 800182a:	2301      	movs	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	e001      	b.n	8001834 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001830:	23ff      	movs	r3, #255	; 0xff
 8001832:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001834:	bf00      	nop
 8001836:	2110      	movs	r1, #16
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <DHT11_Check_Response+0x58>)
 800183a:	f000 fe2b 	bl	8002494 <HAL_GPIO_ReadPin>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f8      	bne.n	8001836 <DHT11_Check_Response+0x3e>

	return Response;
 8001844:	79fb      	ldrb	r3, [r7, #7]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021400 	.word	0x40021400

08001854 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800185a:	2300      	movs	r3, #0
 800185c:	71bb      	strb	r3, [r7, #6]
 800185e:	e037      	b.n	80018d0 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001860:	bf00      	nop
 8001862:	2110      	movs	r1, #16
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <DHT11_Read+0x8c>)
 8001866:	f000 fe15 	bl	8002494 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f8      	beq.n	8001862 <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8001870:	2028      	movs	r0, #40	; 0x28
 8001872:	f7ff ff21 	bl	80016b8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001876:	2110      	movs	r1, #16
 8001878:	4819      	ldr	r0, [pc, #100]	; (80018e0 <DHT11_Read+0x8c>)
 800187a:	f000 fe0b 	bl	8002494 <HAL_GPIO_ReadPin>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10e      	bne.n	80018a2 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001884:	79bb      	ldrb	r3, [r7, #6]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2201      	movs	r2, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	b25b      	sxtb	r3, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	b25a      	sxtb	r2, r3
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	4013      	ands	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	71fb      	strb	r3, [r7, #7]
 80018a0:	e00b      	b.n	80018ba <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	f1c3 0307 	rsb	r3, r3, #7
 80018a8:	2201      	movs	r2, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80018ba:	bf00      	nop
 80018bc:	2110      	movs	r1, #16
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <DHT11_Read+0x8c>)
 80018c0:	f000 fde8 	bl	8002494 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f8      	bne.n	80018bc <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	3301      	adds	r3, #1
 80018ce:	71bb      	strb	r3, [r7, #6]
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d9c4      	bls.n	8001860 <DHT11_Read+0xc>
	}
	return i;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021400 	.word	0x40021400

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e8:	f000 faac 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ec:	f000 f88c 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f0:	f7ff fae6 	bl	8000ec0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80018f4:	f7ff fe58 	bl	80015a8 <MX_I2C2_Init>
  MX_TIM6_Init();
 80018f8:	f000 fa22 	bl	8001d40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 80018fc:	4836      	ldr	r0, [pc, #216]	; (80019d8 <main+0xf4>)
 80018fe:	f001 ff71 	bl	80037e4 <HAL_TIM_Base_Start>


  lcd_init();
 8001902:	f7ff fdff 	bl	8001504 <lcd_init>


  HAL_Delay(1000);
 8001906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190a:	f000 fb0d 	bl	8001f28 <HAL_Delay>
  lcd_clear();
 800190e:	f7ff fdc3 	bl	8001498 <lcd_clear>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	2140      	movs	r1, #64	; 0x40
 8001916:	4831      	ldr	r0, [pc, #196]	; (80019dc <main+0xf8>)
 8001918:	f000 fdd4 	bl	80024c4 <HAL_GPIO_WritePin>
	  lcd_init();
 800191c:	f7ff fdf2 	bl	8001504 <lcd_init>
	  HAL_Delay(1000);
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f000 fb00 	bl	8001f28 <HAL_Delay>
	  lcd_clear();
 8001928:	f7ff fdb6 	bl	8001498 <lcd_clear>
	  Display_Temp(Temperature);
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <main+0xfc>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eeb0 0a67 	vmov.f32	s0, s15
 8001936:	f7ff fed9 	bl	80016ec <Display_Temp>
//	  Display_Rh(Humidity);



	  DHT11_Start();
 800193a:	f7ff ff3d 	bl	80017b8 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 800193e:	f7ff ff5b 	bl	80017f8 <DHT11_Check_Response>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <main+0x100>)
 8001948:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 800194a:	f7ff ff83 	bl	8001854 <DHT11_Read>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <main+0x104>)
 8001954:	701a      	strb	r2, [r3, #0]
      Rh_byte2 = DHT11_Read ();
 8001956:	f7ff ff7d 	bl	8001854 <DHT11_Read>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	4b23      	ldr	r3, [pc, #140]	; (80019ec <main+0x108>)
 8001960:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8001962:	f7ff ff77 	bl	8001854 <DHT11_Read>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <main+0x10c>)
 800196c:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 800196e:	f7ff ff71 	bl	8001854 <DHT11_Read>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <main+0x110>)
 8001978:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 800197a:	f7ff ff6b 	bl	8001854 <DHT11_Read>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <main+0x114>)
 8001984:	801a      	strh	r2, [r3, #0]



	  TEMP = Temp_byte1;
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <main+0x10c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <main+0x118>)
 800198e:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <main+0x104>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <main+0x11c>)
 8001998:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <main+0x118>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <main+0xfc>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <main+0x11c>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <main+0x120>)
 80019ba:	edc3 7a00 	vstr	s15, [r3]




	  HAL_Delay(1000);
 80019be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c2:	f000 fab1 	bl	8001f28 <HAL_Delay>
	  lcd_clear();
 80019c6:	f7ff fd67 	bl	8001498 <lcd_clear>
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <main+0xf8>)
 80019d0:	f000 fd78 	bl	80024c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80019d4:	e79d      	b.n	8001912 <main+0x2e>
 80019d6:	bf00      	nop
 80019d8:	20000270 	.word	0x20000270
 80019dc:	40021000 	.word	0x40021000
 80019e0:	200001f8 	.word	0x200001f8
 80019e4:	20000200 	.word	0x20000200
 80019e8:	20000264 	.word	0x20000264
 80019ec:	2000026b 	.word	0x2000026b
 80019f0:	2000026a 	.word	0x2000026a
 80019f4:	2000026e 	.word	0x2000026e
 80019f8:	2000026c 	.word	0x2000026c
 80019fc:	20000268 	.word	0x20000268
 8001a00:	20000266 	.word	0x20000266
 8001a04:	200001fc 	.word	0x200001fc

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f892 	bl	8003b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <SystemClock_Config+0xd4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <SystemClock_Config+0xd4>)
 8001a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <SystemClock_Config+0xd4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a70:	2310      	movs	r3, #16
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a80:	2348      	movs	r3, #72	; 0x48
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8c:	f107 0320 	add.w	r3, r7, #32
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 f9f7 	bl	8002e84 <HAL_RCC_OscConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a9c:	f000 f820 	bl	8001ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 fc58 	bl	8003374 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aca:	f000 f809 	bl	8001ae0 <Error_Handler>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3750      	adds	r7, #80	; 0x50
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <Error_Handler+0x8>
	...

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_MspInit+0x4c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f9ae 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_getpid>:
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	2301      	movs	r3, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	f001 ff9f 	bl	8003aec <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
 8001bd2:	e7fe      	b.n	8001bd2 <_exit+0x12>

08001bd4 <_read>:
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	2300      	movs	r3, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	2301      	movs	r3, #1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
 8001ce0:	f001 ff04 	bl	8003aec <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20030000 	.word	0x20030000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000204 	.word	0x20000204
 8001d18:	200002d0 	.word	0x200002d0

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d50:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <MX_TIM6_Init+0x68>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d56:	2231      	movs	r2, #49	; 0x31
 8001d58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d6e:	480d      	ldr	r0, [pc, #52]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d70:	f001 fce8 	bl	8003744 <HAL_TIM_Base_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001d7a:	f7ff feb1 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4806      	ldr	r0, [pc, #24]	; (8001da4 <MX_TIM6_Init+0x64>)
 8001d8c:	f001 fe32 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d96:	f7ff fea3 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000270 	.word	0x20000270
 8001da8:	40001000 	.word	0x40001000

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_TIM_Base_MspInit+0x3c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10d      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_TIM_Base_MspInit+0x40>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40001000 	.word	0x40001000
 8001dec:	40023800 	.word	0x40023800

08001df0 <Reset_Handler>:
 8001df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e28 <LoopFillZerobss+0x12>
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
 8001df6:	490e      	ldr	r1, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1a>)
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1e>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:
 8001dfe:	58d4      	ldr	r4, [r2, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:
 8001e04:	18c4      	adds	r4, r0, r3
 8001e06:	428c      	cmp	r4, r1
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LoopFillZerobss+0x22>)
 8001e0c:	4c0b      	ldr	r4, [pc, #44]	; (8001e3c <LoopFillZerobss+0x26>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:
 8001e16:	42a2      	cmp	r2, r4
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>
 8001e1a:	f7ff ff7f 	bl	8001d1c <SystemInit>
 8001e1e:	f001 fe6b 	bl	8003af8 <__libc_init_array>
 8001e22:	f7ff fd5f 	bl	80018e4 <main>
 8001e26:	4770      	bx	lr
 8001e28:	20030000 	.word	0x20030000
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	200001dc 	.word	0x200001dc
 8001e34:	08006cbc 	.word	0x08006cbc
 8001e38:	200001dc 	.word	0x200001dc
 8001e3c:	200002cc 	.word	0x200002cc

08001e40 <ADC_IRQHandler>:
 8001e40:	e7fe      	b.n	8001e40 <ADC_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_Init+0x40>)
 8001e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_Init+0x40>)
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_Init+0x40>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f000 f931 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e72:	200f      	movs	r0, #15
 8001e74:	f000 f808 	bl	8001e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e78:	f7ff fe38 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x54>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x58>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f93b 	bl	8002122 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d80a      	bhi.n	8001ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec4:	f000 f911 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_InitTick+0x5c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000008 	.word	0x20000008
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	200002b8 	.word	0x200002b8

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	200002b8 	.word	0x200002b8

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff47 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff5c 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffb0 	bl	8002090 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e177      	b.n	8002448 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8166 	bne.w	8002442 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d005      	beq.n	800218e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	2b02      	cmp	r3, #2
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80c0 	beq.w	8002442 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b66      	ldr	r3, [pc, #408]	; (8002460 <HAL_GPIO_Init+0x324>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a65      	ldr	r2, [pc, #404]	; (8002460 <HAL_GPIO_Init+0x324>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_GPIO_Init+0x324>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a61      	ldr	r2, [pc, #388]	; (8002464 <HAL_GPIO_Init+0x328>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a58      	ldr	r2, [pc, #352]	; (8002468 <HAL_GPIO_Init+0x32c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d037      	beq.n	800237a <HAL_GPIO_Init+0x23e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <HAL_GPIO_Init+0x330>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d031      	beq.n	8002376 <HAL_GPIO_Init+0x23a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_GPIO_Init+0x334>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d02b      	beq.n	8002372 <HAL_GPIO_Init+0x236>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a55      	ldr	r2, [pc, #340]	; (8002474 <HAL_GPIO_Init+0x338>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d025      	beq.n	800236e <HAL_GPIO_Init+0x232>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a54      	ldr	r2, [pc, #336]	; (8002478 <HAL_GPIO_Init+0x33c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01f      	beq.n	800236a <HAL_GPIO_Init+0x22e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a53      	ldr	r2, [pc, #332]	; (800247c <HAL_GPIO_Init+0x340>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x22a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_GPIO_Init+0x344>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x226>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a51      	ldr	r2, [pc, #324]	; (8002484 <HAL_GPIO_Init+0x348>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x222>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a50      	ldr	r2, [pc, #320]	; (8002488 <HAL_GPIO_Init+0x34c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x21e>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4f      	ldr	r2, [pc, #316]	; (800248c <HAL_GPIO_Init+0x350>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x21a>
 8002352:	2309      	movs	r3, #9
 8002354:	e012      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002356:	230a      	movs	r3, #10
 8002358:	e010      	b.n	800237c <HAL_GPIO_Init+0x240>
 800235a:	2308      	movs	r3, #8
 800235c:	e00e      	b.n	800237c <HAL_GPIO_Init+0x240>
 800235e:	2307      	movs	r3, #7
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002362:	2306      	movs	r3, #6
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x240>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x240>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x240>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x240>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	; (8002464 <HAL_GPIO_Init+0x328>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_GPIO_Init+0x354>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <HAL_GPIO_Init+0x354>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_GPIO_Init+0x354>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <HAL_GPIO_Init+0x354>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ee:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_GPIO_Init+0x354>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002412:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_GPIO_Init+0x354>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_GPIO_Init+0x354>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_GPIO_Init+0x354>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae84 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40021400 	.word	0x40021400
 8002480:	40021800 	.word	0x40021800
 8002484:	40021c00 	.word	0x40021c00
 8002488:	40022000 	.word	0x40022000
 800248c:	40022400 	.word	0x40022400
 8002490:	40013c00 	.word	0x40013c00

08002494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e001      	b.n	80024b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e12b      	b.n	8002762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f882 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800255c:	f001 f8de 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a81      	ldr	r2, [pc, #516]	; (800276c <HAL_I2C_Init+0x274>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d807      	bhi.n	800257c <HAL_I2C_Init+0x84>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_I2C_Init+0x278>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e006      	b.n	800258a <HAL_I2C_Init+0x92>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a7d      	ldr	r2, [pc, #500]	; (8002774 <HAL_I2C_Init+0x27c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	bf94      	ite	ls
 8002584:	2301      	movls	r3, #1
 8002586:	2300      	movhi	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0e7      	b.n	8002762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4a78      	ldr	r2, [pc, #480]	; (8002778 <HAL_I2C_Init+0x280>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0c9b      	lsrs	r3, r3, #18
 800259c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a6a      	ldr	r2, [pc, #424]	; (800276c <HAL_I2C_Init+0x274>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d802      	bhi.n	80025cc <HAL_I2C_Init+0xd4>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3301      	adds	r3, #1
 80025ca:	e009      	b.n	80025e0 <HAL_I2C_Init+0xe8>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	4a69      	ldr	r2, [pc, #420]	; (800277c <HAL_I2C_Init+0x284>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	3301      	adds	r3, #1
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	495c      	ldr	r1, [pc, #368]	; (800276c <HAL_I2C_Init+0x274>)
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d819      	bhi.n	8002634 <HAL_I2C_Init+0x13c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e59      	subs	r1, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb1 f3f3 	udiv	r3, r1, r3
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002614:	400b      	ands	r3, r1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_I2C_Init+0x138>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e59      	subs	r1, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fbb1 f3f3 	udiv	r3, r1, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	e051      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002630:	2304      	movs	r3, #4
 8002632:	e04f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d111      	bne.n	8002660 <HAL_I2C_Init+0x168>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	fbb0 f3f3 	udiv	r3, r0, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_I2C_Init+0x18e>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Init+0x196>
 800268a:	2301      	movs	r3, #1
 800268c:	e022      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <HAL_I2C_Init+0x1bc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e58      	subs	r0, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	440b      	add	r3, r1
 80026a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026b2:	e00f      	b.n	80026d4 <HAL_I2C_Init+0x1dc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6809      	ldr	r1, [r1, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6911      	ldr	r1, [r2, #16]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	4311      	orrs	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	000186a0 	.word	0x000186a0
 8002770:	001e847f 	.word	0x001e847f
 8002774:	003d08ff 	.word	0x003d08ff
 8002778:	431bde83 	.word	0x431bde83
 800277c:	10624dd3 	.word	0x10624dd3

08002780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	460b      	mov	r3, r1
 800278e:	817b      	strh	r3, [r7, #10]
 8002790:	4613      	mov	r3, r2
 8002792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff fbbc 	bl	8001f10 <HAL_GetTick>
 8002798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80e0 	bne.w	8002968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4970      	ldr	r1, [pc, #448]	; (8002974 <HAL_I2C_Master_Transmit+0x1f4>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f964 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
 80027c0:	e0d3      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2C_Master_Transmit+0x50>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0cc      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d007      	beq.n	80027f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2221      	movs	r2, #33	; 0x21
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2210      	movs	r2, #16
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_I2C_Master_Transmit+0x1f8>)
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002838:	8979      	ldrh	r1, [r7, #10]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f89c 	bl	800297c <I2C_MasterRequestWrite>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e08d      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002864:	e066      	b.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9de 	bl	8002c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00d      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b04      	cmp	r3, #4
 800287c:	d107      	bne.n	800288e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e06b      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d11b      	bne.n	8002908 <HAL_I2C_Master_Transmit+0x188>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	6a39      	ldr	r1, [r7, #32]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f9ce 	bl	8002cae <I2C_WaitOnBTFFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00d      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e01a      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d194      	bne.n	8002866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	e000      	b.n	800296a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002968:	2302      	movs	r3, #2
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	00100002 	.word	0x00100002
 8002978:	ffff0000 	.word	0xffff0000

0800297c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d006      	beq.n	80029a6 <I2C_MasterRequestWrite+0x2a>
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d003      	beq.n	80029a6 <I2C_MasterRequestWrite+0x2a>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029a4:	d108      	bne.n	80029b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e00b      	b.n	80029d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	2b12      	cmp	r3, #18
 80029be:	d107      	bne.n	80029d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f84f 	bl	8002a80 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f6:	d103      	bne.n	8002a00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e035      	b.n	8002a70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a0c:	d108      	bne.n	8002a20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e01b      	b.n	8002a58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a20:	897b      	ldrh	r3, [r7, #10]
 8002a22:	11db      	asrs	r3, r3, #7
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 0306 	and.w	r3, r3, #6
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f063 030f 	orn	r3, r3, #15
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	490e      	ldr	r1, [pc, #56]	; (8002a78 <I2C_MasterRequestWrite+0xfc>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f875 	bl	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e010      	b.n	8002a70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <I2C_MasterRequestWrite+0x100>)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f865 	bl	8002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	00010008 	.word	0x00010008
 8002a7c:	00010002 	.word	0x00010002

08002a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a90:	e025      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a98:	d021      	beq.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7ff fa39 	bl	8001f10 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e023      	b.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d10d      	bne.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	e00c      	b.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d0b6      	beq.n	8002a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b3c:	e051      	b.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d123      	bne.n	8002b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e046      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b9c:	d021      	beq.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7ff f9b7 	bl	8001f10 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e020      	b.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10c      	bne.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e00b      	b.n	8002c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf14      	ite	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d18d      	bne.n	8002b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c38:	e02d      	b.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f878 	bl	8002d30 <I2C_IsAcknowledgeFailed>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02d      	b.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c50:	d021      	beq.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7ff f95d 	bl	8001f10 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d116      	bne.n	8002c96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d1ca      	bne.n	8002c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cba:	e02d      	b.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f837 	bl	8002d30 <I2C_IsAcknowledgeFailed>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e02d      	b.n	8002d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd2:	d021      	beq.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd4:	f7ff f91c 	bl	8001f10 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d1ca      	bne.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d11b      	bne.n	8002d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d129      	bne.n	8002df8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0210 	bic.w	r2, r2, #16
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d12a      	bne.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	f023 030f 	bic.w	r3, r3, #15
 8002e46:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	89fa      	ldrh	r2, [r7, #14]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e264      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d075      	beq.n	8002f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea2:	4ba3      	ldr	r3, [pc, #652]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d00c      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eae:	4ba0      	ldr	r3, [pc, #640]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d112      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eba:	4b9d      	ldr	r3, [pc, #628]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec6:	d10b      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec8:	4b99      	ldr	r3, [pc, #612]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d05b      	beq.n	8002f8c <HAL_RCC_OscConfig+0x108>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d157      	bne.n	8002f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e23f      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee8:	d106      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x74>
 8002eea:	4b91      	ldr	r3, [pc, #580]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a90      	ldr	r2, [pc, #576]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b8b      	ldr	r3, [pc, #556]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a8a      	ldr	r2, [pc, #552]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a87      	ldr	r2, [pc, #540]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	4b84      	ldr	r3, [pc, #528]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a83      	ldr	r2, [pc, #524]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a80      	ldr	r2, [pc, #512]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe ffe8 	bl	8001f10 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe ffe4 	bl	8001f10 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e204      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xc0>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe ffd4 	bl	8001f10 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe ffd0 	bl	8001f10 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1f0      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b6c      	ldr	r3, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0xe8>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f9a:	4b65      	ldr	r3, [pc, #404]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c4      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4952      	ldr	r1, [pc, #328]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_RCC_OscConfig+0x2b0>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe ff89 	bl	8001f10 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe ff85 	bl	8001f10 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a5      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b43      	ldr	r3, [pc, #268]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4940      	ldr	r1, [pc, #256]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCC_OscConfig+0x2b0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe ff68 	bl	8001f10 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe ff64 	bl	8001f10 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e184      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d030      	beq.n	80030d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d016      	beq.n	80030a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_RCC_OscConfig+0x2b4>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe ff48 	bl	8001f10 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe ff44 	bl	8001f10 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e164      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x200>
 80030a2:	e015      	b.n	80030d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_OscConfig+0x2b4>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030aa:	f7fe ff31 	bl	8001f10 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b2:	f7fe ff2d 	bl	8001f10 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e14d      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a0 	beq.w	800321e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_OscConfig+0x2b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <HAL_RCC_OscConfig+0x2b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <HAL_RCC_OscConfig+0x2b8>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fe fef3 	bl	8001f10 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e011      	b.n	8003152 <HAL_RCC_OscConfig+0x2ce>
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	42470000 	.word	0x42470000
 8003138:	42470e80 	.word	0x42470e80
 800313c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003140:	f7fe fee6 	bl	8001f10 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e106      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b85      	ldr	r3, [pc, #532]	; (8003368 <HAL_RCC_OscConfig+0x4e4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d106      	bne.n	8003174 <HAL_RCC_OscConfig+0x2f0>
 8003166:	4b81      	ldr	r3, [pc, #516]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a80      	ldr	r2, [pc, #512]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6713      	str	r3, [r2, #112]	; 0x70
 8003172:	e01c      	b.n	80031ae <HAL_RCC_OscConfig+0x32a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d10c      	bne.n	8003196 <HAL_RCC_OscConfig+0x312>
 800317c:	4b7b      	ldr	r3, [pc, #492]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a7a      	ldr	r2, [pc, #488]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	4b78      	ldr	r3, [pc, #480]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a77      	ldr	r2, [pc, #476]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e00b      	b.n	80031ae <HAL_RCC_OscConfig+0x32a>
 8003196:	4b75      	ldr	r3, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a74      	ldr	r2, [pc, #464]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
 80031a2:	4b72      	ldr	r3, [pc, #456]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a71      	ldr	r2, [pc, #452]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80031a8:	f023 0304 	bic.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d015      	beq.n	80031e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe feab 	bl	8001f10 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fe fea7 	bl	8001f10 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0c5      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d4:	4b65      	ldr	r3, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0ee      	beq.n	80031be <HAL_RCC_OscConfig+0x33a>
 80031e0:	e014      	b.n	800320c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe fe95 	bl	8001f10 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe fe91 	bl	8001f10 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0af      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003200:	4b5a      	ldr	r3, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4b56      	ldr	r3, [pc, #344]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a55      	ldr	r2, [pc, #340]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 809b 	beq.w	800335e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003228:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 030c 	and.w	r3, r3, #12
 8003230:	2b08      	cmp	r3, #8
 8003232:	d05c      	beq.n	80032ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d141      	bne.n	80032c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800323c:	4b4c      	ldr	r3, [pc, #304]	; (8003370 <HAL_RCC_OscConfig+0x4ec>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fe65 	bl	8001f10 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fe61 	bl	8001f10 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e081      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f0      	bne.n	800324a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	019b      	lsls	r3, r3, #6
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	3b01      	subs	r3, #1
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	4937      	ldr	r1, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <HAL_RCC_OscConfig+0x4ec>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fe3a 	bl	8001f10 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fe36 	bl	8001f10 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e056      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x41c>
 80032be:	e04e      	b.n	800335e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCC_OscConfig+0x4ec>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fe23 	bl	8001f10 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe fe1f 	bl	8001f10 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e03f      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e0:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x44a>
 80032ec:	e037      	b.n	800335e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e032      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d028      	beq.n	800335a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003312:	429a      	cmp	r2, r3
 8003314:	d121      	bne.n	800335a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d11a      	bne.n	800335a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003330:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003332:	4293      	cmp	r3, r2
 8003334:	d111      	bne.n	800335a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	085b      	lsrs	r3, r3, #1
 8003342:	3b01      	subs	r3, #1
 8003344:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d107      	bne.n	800335a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d001      	beq.n	800335e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40007000 	.word	0x40007000
 800336c:	40023800 	.word	0x40023800
 8003370:	42470060 	.word	0x42470060

08003374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cc      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b68      	ldr	r3, [pc, #416]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90c      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b8      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a58      	ldr	r2, [pc, #352]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a52      	ldr	r2, [pc, #328]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ec:	4b50      	ldr	r3, [pc, #320]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	494d      	ldr	r1, [pc, #308]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d044      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d119      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d003      	beq.n	8003432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e067      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fe fd54 	bl	8001f10 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fe fd50 	bl	8001f10 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04f      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d20c      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e032      	b.n	8003522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4916      	ldr	r1, [pc, #88]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	490e      	ldr	r1, [pc, #56]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034fa:	f000 f821 	bl	8003540 <HAL_RCC_GetSysClockFreq>
 80034fe:	4602      	mov	r2, r0
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	490a      	ldr	r1, [pc, #40]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	5ccb      	ldrb	r3, [r1, r3]
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fcb4 	bl	8001e88 <HAL_InitTick>

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023c00 	.word	0x40023c00
 8003530:	40023800 	.word	0x40023800
 8003534:	080068b0 	.word	0x080068b0
 8003538:	20000000 	.word	0x20000000
 800353c:	20000004 	.word	0x20000004

08003540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	2300      	movs	r3, #0
 8003552:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003558:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b08      	cmp	r3, #8
 8003562:	d00d      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x40>
 8003564:	2b08      	cmp	r3, #8
 8003566:	f200 80bd 	bhi.w	80036e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCC_GetSysClockFreq+0x34>
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x3a>
 8003572:	e0b7      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003576:	60bb      	str	r3, [r7, #8]
       break;
 8003578:	e0b7      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800357c:	60bb      	str	r3, [r7, #8]
      break;
 800357e:	e0b4      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003580:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003588:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358a:	4b5b      	ldr	r3, [pc, #364]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04d      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	461a      	mov	r2, r3
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	ea02 0800 	and.w	r8, r2, r0
 80035ae:	ea03 0901 	and.w	r9, r3, r1
 80035b2:	4640      	mov	r0, r8
 80035b4:	4649      	mov	r1, r9
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	014b      	lsls	r3, r1, #5
 80035c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035c4:	0142      	lsls	r2, r0, #5
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	ebb0 0008 	subs.w	r0, r0, r8
 80035ce:	eb61 0109 	sbc.w	r1, r1, r9
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	018b      	lsls	r3, r1, #6
 80035dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035e0:	0182      	lsls	r2, r0, #6
 80035e2:	1a12      	subs	r2, r2, r0
 80035e4:	eb63 0301 	sbc.w	r3, r3, r1
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	00d9      	lsls	r1, r3, #3
 80035f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035f6:	00d0      	lsls	r0, r2, #3
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	eb12 0208 	adds.w	r2, r2, r8
 8003600:	eb43 0309 	adc.w	r3, r3, r9
 8003604:	f04f 0000 	mov.w	r0, #0
 8003608:	f04f 0100 	mov.w	r1, #0
 800360c:	0259      	lsls	r1, r3, #9
 800360e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003612:	0250      	lsls	r0, r2, #9
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	f7fd fad0 	bl	8000bc8 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	e04a      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	461a      	mov	r2, r3
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	ea02 0400 	and.w	r4, r2, r0
 800364a:	ea03 0501 	and.w	r5, r3, r1
 800364e:	4620      	mov	r0, r4
 8003650:	4629      	mov	r1, r5
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	014b      	lsls	r3, r1, #5
 800365c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003660:	0142      	lsls	r2, r0, #5
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	1b00      	subs	r0, r0, r4
 8003668:	eb61 0105 	sbc.w	r1, r1, r5
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	018b      	lsls	r3, r1, #6
 8003676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800367a:	0182      	lsls	r2, r0, #6
 800367c:	1a12      	subs	r2, r2, r0
 800367e:	eb63 0301 	sbc.w	r3, r3, r1
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	00d9      	lsls	r1, r3, #3
 800368c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003690:	00d0      	lsls	r0, r2, #3
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	1912      	adds	r2, r2, r4
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	f04f 0000 	mov.w	r0, #0
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	0299      	lsls	r1, r3, #10
 80036a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036aa:	0290      	lsls	r0, r2, #10
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4610      	mov	r0, r2
 80036b2:	4619      	mov	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	f7fd fa84 	bl	8000bc8 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4613      	mov	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	3301      	adds	r3, #1
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	60bb      	str	r3, [r7, #8]
      break;
 80036e2:	e002      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036e6:	60bb      	str	r3, [r7, #8]
      break;
 80036e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ea:	68bb      	ldr	r3, [r7, #8]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	007a1200 	.word	0x007a1200

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	080068c0 	.word	0x080068c0

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fb1e 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 f896 	bl	80038b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e046      	b.n	800388a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_TIM_Base_Start+0xb4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d01d      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_TIM_Base_Start+0xb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_TIM_Base_Start+0xbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <HAL_TIM_Base_Start+0xc0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <HAL_TIM_Base_Start+0xc4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_TIM_Base_Start+0xc8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_TIM_Base_Start+0xcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d111      	bne.n	8003878 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d010      	beq.n	8003888 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	e007      	b.n	8003888 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40010000 	.word	0x40010000
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40000c00 	.word	0x40000c00
 80038a8:	40010400 	.word	0x40010400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40001800 	.word	0x40001800

080038b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d00f      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3d      	ldr	r2, [pc, #244]	; (80039cc <TIM_Base_SetConfig+0x118>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00b      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d007      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d108      	bne.n	8003906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d02b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d027      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2c      	ldr	r2, [pc, #176]	; (80039cc <TIM_Base_SetConfig+0x118>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d023      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <TIM_Base_SetConfig+0x11c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <TIM_Base_SetConfig+0x120>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d017      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <TIM_Base_SetConfig+0x128>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <TIM_Base_SetConfig+0x12c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00f      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <TIM_Base_SetConfig+0x130>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00b      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <TIM_Base_SetConfig+0x134>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <TIM_Base_SetConfig+0x138>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <TIM_Base_SetConfig+0x13c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <TIM_Base_SetConfig+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_Base_SetConfig+0xf8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <TIM_Base_SetConfig+0x124>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d103      	bne.n	80039b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	615a      	str	r2, [r3, #20]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40014400 	.word	0x40014400
 80039e4:	40014800 	.word	0x40014800
 80039e8:	40001800 	.word	0x40001800
 80039ec:	40001c00 	.word	0x40001c00
 80039f0:	40002000 	.word	0x40002000

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e05a      	b.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a21      	ldr	r2, [pc, #132]	; (8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d022      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d01d      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d018      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1a      	ldr	r2, [pc, #104]	; (8003adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00e      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d009      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d004      	beq.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40010400 	.word	0x40010400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40001800 	.word	0x40001800

08003aec <__errno>:
 8003aec:	4b01      	ldr	r3, [pc, #4]	; (8003af4 <__errno+0x8>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <__libc_init_array>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4d0d      	ldr	r5, [pc, #52]	; (8003b30 <__libc_init_array+0x38>)
 8003afc:	4c0d      	ldr	r4, [pc, #52]	; (8003b34 <__libc_init_array+0x3c>)
 8003afe:	1b64      	subs	r4, r4, r5
 8003b00:	10a4      	asrs	r4, r4, #2
 8003b02:	2600      	movs	r6, #0
 8003b04:	42a6      	cmp	r6, r4
 8003b06:	d109      	bne.n	8003b1c <__libc_init_array+0x24>
 8003b08:	4d0b      	ldr	r5, [pc, #44]	; (8003b38 <__libc_init_array+0x40>)
 8003b0a:	4c0c      	ldr	r4, [pc, #48]	; (8003b3c <__libc_init_array+0x44>)
 8003b0c:	f002 feb6 	bl	800687c <_init>
 8003b10:	1b64      	subs	r4, r4, r5
 8003b12:	10a4      	asrs	r4, r4, #2
 8003b14:	2600      	movs	r6, #0
 8003b16:	42a6      	cmp	r6, r4
 8003b18:	d105      	bne.n	8003b26 <__libc_init_array+0x2e>
 8003b1a:	bd70      	pop	{r4, r5, r6, pc}
 8003b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b20:	4798      	blx	r3
 8003b22:	3601      	adds	r6, #1
 8003b24:	e7ee      	b.n	8003b04 <__libc_init_array+0xc>
 8003b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2a:	4798      	blx	r3
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7f2      	b.n	8003b16 <__libc_init_array+0x1e>
 8003b30:	08006cb4 	.word	0x08006cb4
 8003b34:	08006cb4 	.word	0x08006cb4
 8003b38:	08006cb4 	.word	0x08006cb4
 8003b3c:	08006cb8 	.word	0x08006cb8

08003b40 <memset>:
 8003b40:	4402      	add	r2, r0
 8003b42:	4603      	mov	r3, r0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d100      	bne.n	8003b4a <memset+0xa>
 8003b48:	4770      	bx	lr
 8003b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4e:	e7f9      	b.n	8003b44 <memset+0x4>

08003b50 <__cvt>:
 8003b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b54:	ec55 4b10 	vmov	r4, r5, d0
 8003b58:	2d00      	cmp	r5, #0
 8003b5a:	460e      	mov	r6, r1
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	462b      	mov	r3, r5
 8003b60:	bfbb      	ittet	lt
 8003b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b66:	461d      	movlt	r5, r3
 8003b68:	2300      	movge	r3, #0
 8003b6a:	232d      	movlt	r3, #45	; 0x2d
 8003b6c:	700b      	strb	r3, [r1, #0]
 8003b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b74:	4691      	mov	r9, r2
 8003b76:	f023 0820 	bic.w	r8, r3, #32
 8003b7a:	bfbc      	itt	lt
 8003b7c:	4622      	movlt	r2, r4
 8003b7e:	4614      	movlt	r4, r2
 8003b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003b84:	d005      	beq.n	8003b92 <__cvt+0x42>
 8003b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003b8a:	d100      	bne.n	8003b8e <__cvt+0x3e>
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	2102      	movs	r1, #2
 8003b90:	e000      	b.n	8003b94 <__cvt+0x44>
 8003b92:	2103      	movs	r1, #3
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	ab02      	add	r3, sp, #8
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	ec45 4b10 	vmov	d0, r4, r5
 8003ba0:	4653      	mov	r3, sl
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	f000 fcec 	bl	8004580 <_dtoa_r>
 8003ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003bac:	4607      	mov	r7, r0
 8003bae:	d102      	bne.n	8003bb6 <__cvt+0x66>
 8003bb0:	f019 0f01 	tst.w	r9, #1
 8003bb4:	d022      	beq.n	8003bfc <__cvt+0xac>
 8003bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003bba:	eb07 0906 	add.w	r9, r7, r6
 8003bbe:	d110      	bne.n	8003be2 <__cvt+0x92>
 8003bc0:	783b      	ldrb	r3, [r7, #0]
 8003bc2:	2b30      	cmp	r3, #48	; 0x30
 8003bc4:	d10a      	bne.n	8003bdc <__cvt+0x8c>
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	f7fc ff8b 	bl	8000ae8 <__aeabi_dcmpeq>
 8003bd2:	b918      	cbnz	r0, 8003bdc <__cvt+0x8c>
 8003bd4:	f1c6 0601 	rsb	r6, r6, #1
 8003bd8:	f8ca 6000 	str.w	r6, [sl]
 8003bdc:	f8da 3000 	ldr.w	r3, [sl]
 8003be0:	4499      	add	r9, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	2300      	movs	r3, #0
 8003be6:	4620      	mov	r0, r4
 8003be8:	4629      	mov	r1, r5
 8003bea:	f7fc ff7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8003bee:	b108      	cbz	r0, 8003bf4 <__cvt+0xa4>
 8003bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8003bf4:	2230      	movs	r2, #48	; 0x30
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	454b      	cmp	r3, r9
 8003bfa:	d307      	bcc.n	8003c0c <__cvt+0xbc>
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c00:	1bdb      	subs	r3, r3, r7
 8003c02:	4638      	mov	r0, r7
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	b004      	add	sp, #16
 8003c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c0c:	1c59      	adds	r1, r3, #1
 8003c0e:	9103      	str	r1, [sp, #12]
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e7f0      	b.n	8003bf6 <__cvt+0xa6>

08003c14 <__exponent>:
 8003c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c16:	4603      	mov	r3, r0
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	bfb8      	it	lt
 8003c1c:	4249      	neglt	r1, r1
 8003c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8003c22:	bfb4      	ite	lt
 8003c24:	222d      	movlt	r2, #45	; 0x2d
 8003c26:	222b      	movge	r2, #43	; 0x2b
 8003c28:	2909      	cmp	r1, #9
 8003c2a:	7042      	strb	r2, [r0, #1]
 8003c2c:	dd2a      	ble.n	8003c84 <__exponent+0x70>
 8003c2e:	f10d 0407 	add.w	r4, sp, #7
 8003c32:	46a4      	mov	ip, r4
 8003c34:	270a      	movs	r7, #10
 8003c36:	46a6      	mov	lr, r4
 8003c38:	460a      	mov	r2, r1
 8003c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8003c42:	3530      	adds	r5, #48	; 0x30
 8003c44:	2a63      	cmp	r2, #99	; 0x63
 8003c46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003c4e:	4631      	mov	r1, r6
 8003c50:	dcf1      	bgt.n	8003c36 <__exponent+0x22>
 8003c52:	3130      	adds	r1, #48	; 0x30
 8003c54:	f1ae 0502 	sub.w	r5, lr, #2
 8003c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003c5c:	1c44      	adds	r4, r0, #1
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4561      	cmp	r1, ip
 8003c62:	d30a      	bcc.n	8003c7a <__exponent+0x66>
 8003c64:	f10d 0209 	add.w	r2, sp, #9
 8003c68:	eba2 020e 	sub.w	r2, r2, lr
 8003c6c:	4565      	cmp	r5, ip
 8003c6e:	bf88      	it	hi
 8003c70:	2200      	movhi	r2, #0
 8003c72:	4413      	add	r3, r2
 8003c74:	1a18      	subs	r0, r3, r0
 8003c76:	b003      	add	sp, #12
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003c82:	e7ed      	b.n	8003c60 <__exponent+0x4c>
 8003c84:	2330      	movs	r3, #48	; 0x30
 8003c86:	3130      	adds	r1, #48	; 0x30
 8003c88:	7083      	strb	r3, [r0, #2]
 8003c8a:	70c1      	strb	r1, [r0, #3]
 8003c8c:	1d03      	adds	r3, r0, #4
 8003c8e:	e7f1      	b.n	8003c74 <__exponent+0x60>

08003c90 <_printf_float>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	ed2d 8b02 	vpush	{d8}
 8003c98:	b08d      	sub	sp, #52	; 0x34
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ca0:	4616      	mov	r6, r2
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	f001 fa57 	bl	8005158 <_localeconv_r>
 8003caa:	f8d0 a000 	ldr.w	sl, [r0]
 8003cae:	4650      	mov	r0, sl
 8003cb0:	f7fc fa9e 	bl	80001f0 <strlen>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	9305      	str	r3, [sp, #20]
 8003cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003cc4:	3307      	adds	r3, #7
 8003cc6:	f023 0307 	bic.w	r3, r3, #7
 8003cca:	f103 0208 	add.w	r2, r3, #8
 8003cce:	f8c8 2000 	str.w	r2, [r8]
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003cda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ce2:	9307      	str	r3, [sp, #28]
 8003ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ce8:	ee08 0a10 	vmov	s16, r0
 8003cec:	4b9f      	ldr	r3, [pc, #636]	; (8003f6c <_printf_float+0x2dc>)
 8003cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cf6:	f7fc ff29 	bl	8000b4c <__aeabi_dcmpun>
 8003cfa:	bb88      	cbnz	r0, 8003d60 <_printf_float+0xd0>
 8003cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d00:	4b9a      	ldr	r3, [pc, #616]	; (8003f6c <_printf_float+0x2dc>)
 8003d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d06:	f7fc ff03 	bl	8000b10 <__aeabi_dcmple>
 8003d0a:	bb48      	cbnz	r0, 8003d60 <_printf_float+0xd0>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc fef2 	bl	8000afc <__aeabi_dcmplt>
 8003d18:	b110      	cbz	r0, 8003d20 <_printf_float+0x90>
 8003d1a:	232d      	movs	r3, #45	; 0x2d
 8003d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d20:	4b93      	ldr	r3, [pc, #588]	; (8003f70 <_printf_float+0x2e0>)
 8003d22:	4894      	ldr	r0, [pc, #592]	; (8003f74 <_printf_float+0x2e4>)
 8003d24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003d28:	bf94      	ite	ls
 8003d2a:	4698      	movls	r8, r3
 8003d2c:	4680      	movhi	r8, r0
 8003d2e:	2303      	movs	r3, #3
 8003d30:	6123      	str	r3, [r4, #16]
 8003d32:	9b05      	ldr	r3, [sp, #20]
 8003d34:	f023 0204 	bic.w	r2, r3, #4
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	f04f 0900 	mov.w	r9, #0
 8003d3e:	9700      	str	r7, [sp, #0]
 8003d40:	4633      	mov	r3, r6
 8003d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f9d8 	bl	80040fc <_printf_common>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	f040 8090 	bne.w	8003e72 <_printf_float+0x1e2>
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d56:	b00d      	add	sp, #52	; 0x34
 8003d58:	ecbd 8b02 	vpop	{d8}
 8003d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	f7fc fef0 	bl	8000b4c <__aeabi_dcmpun>
 8003d6c:	b140      	cbz	r0, 8003d80 <_printf_float+0xf0>
 8003d6e:	464b      	mov	r3, r9
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfbc      	itt	lt
 8003d74:	232d      	movlt	r3, #45	; 0x2d
 8003d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003d7a:	487f      	ldr	r0, [pc, #508]	; (8003f78 <_printf_float+0x2e8>)
 8003d7c:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <_printf_float+0x2ec>)
 8003d7e:	e7d1      	b.n	8003d24 <_printf_float+0x94>
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003d86:	9206      	str	r2, [sp, #24]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	d13f      	bne.n	8003e0c <_printf_float+0x17c>
 8003d8c:	2306      	movs	r3, #6
 8003d8e:	6063      	str	r3, [r4, #4]
 8003d90:	9b05      	ldr	r3, [sp, #20]
 8003d92:	6861      	ldr	r1, [r4, #4]
 8003d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9303      	str	r3, [sp, #12]
 8003d9c:	ab0a      	add	r3, sp, #40	; 0x28
 8003d9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003da2:	ab09      	add	r3, sp, #36	; 0x24
 8003da4:	ec49 8b10 	vmov	d0, r8, r9
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6022      	str	r2, [r4, #0]
 8003dac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003db0:	4628      	mov	r0, r5
 8003db2:	f7ff fecd 	bl	8003b50 <__cvt>
 8003db6:	9b06      	ldr	r3, [sp, #24]
 8003db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dba:	2b47      	cmp	r3, #71	; 0x47
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	d108      	bne.n	8003dd2 <_printf_float+0x142>
 8003dc0:	1cc8      	adds	r0, r1, #3
 8003dc2:	db02      	blt.n	8003dca <_printf_float+0x13a>
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	dd41      	ble.n	8003e4e <_printf_float+0x1be>
 8003dca:	f1ab 0b02 	sub.w	fp, fp, #2
 8003dce:	fa5f fb8b 	uxtb.w	fp, fp
 8003dd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003dd6:	d820      	bhi.n	8003e1a <_printf_float+0x18a>
 8003dd8:	3901      	subs	r1, #1
 8003dda:	465a      	mov	r2, fp
 8003ddc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003de0:	9109      	str	r1, [sp, #36]	; 0x24
 8003de2:	f7ff ff17 	bl	8003c14 <__exponent>
 8003de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003de8:	1813      	adds	r3, r2, r0
 8003dea:	2a01      	cmp	r2, #1
 8003dec:	4681      	mov	r9, r0
 8003dee:	6123      	str	r3, [r4, #16]
 8003df0:	dc02      	bgt.n	8003df8 <_printf_float+0x168>
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	07d2      	lsls	r2, r2, #31
 8003df6:	d501      	bpl.n	8003dfc <_printf_float+0x16c>
 8003df8:	3301      	adds	r3, #1
 8003dfa:	6123      	str	r3, [r4, #16]
 8003dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d09c      	beq.n	8003d3e <_printf_float+0xae>
 8003e04:	232d      	movs	r3, #45	; 0x2d
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0a:	e798      	b.n	8003d3e <_printf_float+0xae>
 8003e0c:	9a06      	ldr	r2, [sp, #24]
 8003e0e:	2a47      	cmp	r2, #71	; 0x47
 8003e10:	d1be      	bne.n	8003d90 <_printf_float+0x100>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1bc      	bne.n	8003d90 <_printf_float+0x100>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e7b9      	b.n	8003d8e <_printf_float+0xfe>
 8003e1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003e1e:	d118      	bne.n	8003e52 <_printf_float+0x1c2>
 8003e20:	2900      	cmp	r1, #0
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	dd0b      	ble.n	8003e3e <_printf_float+0x1ae>
 8003e26:	6121      	str	r1, [r4, #16]
 8003e28:	b913      	cbnz	r3, 8003e30 <_printf_float+0x1a0>
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	07d0      	lsls	r0, r2, #31
 8003e2e:	d502      	bpl.n	8003e36 <_printf_float+0x1a6>
 8003e30:	3301      	adds	r3, #1
 8003e32:	440b      	add	r3, r1
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8003e38:	f04f 0900 	mov.w	r9, #0
 8003e3c:	e7de      	b.n	8003dfc <_printf_float+0x16c>
 8003e3e:	b913      	cbnz	r3, 8003e46 <_printf_float+0x1b6>
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	07d2      	lsls	r2, r2, #31
 8003e44:	d501      	bpl.n	8003e4a <_printf_float+0x1ba>
 8003e46:	3302      	adds	r3, #2
 8003e48:	e7f4      	b.n	8003e34 <_printf_float+0x1a4>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e7f2      	b.n	8003e34 <_printf_float+0x1a4>
 8003e4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e54:	4299      	cmp	r1, r3
 8003e56:	db05      	blt.n	8003e64 <_printf_float+0x1d4>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	6121      	str	r1, [r4, #16]
 8003e5c:	07d8      	lsls	r0, r3, #31
 8003e5e:	d5ea      	bpl.n	8003e36 <_printf_float+0x1a6>
 8003e60:	1c4b      	adds	r3, r1, #1
 8003e62:	e7e7      	b.n	8003e34 <_printf_float+0x1a4>
 8003e64:	2900      	cmp	r1, #0
 8003e66:	bfd4      	ite	le
 8003e68:	f1c1 0202 	rsble	r2, r1, #2
 8003e6c:	2201      	movgt	r2, #1
 8003e6e:	4413      	add	r3, r2
 8003e70:	e7e0      	b.n	8003e34 <_printf_float+0x1a4>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	055a      	lsls	r2, r3, #21
 8003e76:	d407      	bmi.n	8003e88 <_printf_float+0x1f8>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	4631      	mov	r1, r6
 8003e7e:	4628      	mov	r0, r5
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	d12c      	bne.n	8003ee0 <_printf_float+0x250>
 8003e86:	e764      	b.n	8003d52 <_printf_float+0xc2>
 8003e88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003e8c:	f240 80e0 	bls.w	8004050 <_printf_float+0x3c0>
 8003e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e94:	2200      	movs	r2, #0
 8003e96:	2300      	movs	r3, #0
 8003e98:	f7fc fe26 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d034      	beq.n	8003f0a <_printf_float+0x27a>
 8003ea0:	4a37      	ldr	r2, [pc, #220]	; (8003f80 <_printf_float+0x2f0>)
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	47b8      	blx	r7
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f43f af51 	beq.w	8003d52 <_printf_float+0xc2>
 8003eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	db02      	blt.n	8003ebe <_printf_float+0x22e>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	07d8      	lsls	r0, r3, #31
 8003ebc:	d510      	bpl.n	8003ee0 <_printf_float+0x250>
 8003ebe:	ee18 3a10 	vmov	r3, s16
 8003ec2:	4652      	mov	r2, sl
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	47b8      	blx	r7
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f43f af41 	beq.w	8003d52 <_printf_float+0xc2>
 8003ed0:	f04f 0800 	mov.w	r8, #0
 8003ed4:	f104 091a 	add.w	r9, r4, #26
 8003ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4543      	cmp	r3, r8
 8003ede:	dc09      	bgt.n	8003ef4 <_printf_float+0x264>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	079b      	lsls	r3, r3, #30
 8003ee4:	f100 8105 	bmi.w	80040f2 <_printf_float+0x462>
 8003ee8:	68e0      	ldr	r0, [r4, #12]
 8003eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eec:	4298      	cmp	r0, r3
 8003eee:	bfb8      	it	lt
 8003ef0:	4618      	movlt	r0, r3
 8003ef2:	e730      	b.n	8003d56 <_printf_float+0xc6>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	464a      	mov	r2, r9
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4628      	mov	r0, r5
 8003efc:	47b8      	blx	r7
 8003efe:	3001      	adds	r0, #1
 8003f00:	f43f af27 	beq.w	8003d52 <_printf_float+0xc2>
 8003f04:	f108 0801 	add.w	r8, r8, #1
 8003f08:	e7e6      	b.n	8003ed8 <_printf_float+0x248>
 8003f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dc39      	bgt.n	8003f84 <_printf_float+0x2f4>
 8003f10:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <_printf_float+0x2f0>)
 8003f12:	2301      	movs	r3, #1
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f43f af19 	beq.w	8003d52 <_printf_float+0xc2>
 8003f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d102      	bne.n	8003f2e <_printf_float+0x29e>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	07d9      	lsls	r1, r3, #31
 8003f2c:	d5d8      	bpl.n	8003ee0 <_printf_float+0x250>
 8003f2e:	ee18 3a10 	vmov	r3, s16
 8003f32:	4652      	mov	r2, sl
 8003f34:	4631      	mov	r1, r6
 8003f36:	4628      	mov	r0, r5
 8003f38:	47b8      	blx	r7
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f43f af09 	beq.w	8003d52 <_printf_float+0xc2>
 8003f40:	f04f 0900 	mov.w	r9, #0
 8003f44:	f104 0a1a 	add.w	sl, r4, #26
 8003f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	454b      	cmp	r3, r9
 8003f4e:	dc01      	bgt.n	8003f54 <_printf_float+0x2c4>
 8003f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f52:	e792      	b.n	8003e7a <_printf_float+0x1ea>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4652      	mov	r2, sl
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	47b8      	blx	r7
 8003f5e:	3001      	adds	r0, #1
 8003f60:	f43f aef7 	beq.w	8003d52 <_printf_float+0xc2>
 8003f64:	f109 0901 	add.w	r9, r9, #1
 8003f68:	e7ee      	b.n	8003f48 <_printf_float+0x2b8>
 8003f6a:	bf00      	nop
 8003f6c:	7fefffff 	.word	0x7fefffff
 8003f70:	080068cc 	.word	0x080068cc
 8003f74:	080068d0 	.word	0x080068d0
 8003f78:	080068d8 	.word	0x080068d8
 8003f7c:	080068d4 	.word	0x080068d4
 8003f80:	080068dc 	.word	0x080068dc
 8003f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	bfa8      	it	ge
 8003f8c:	461a      	movge	r2, r3
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	4691      	mov	r9, r2
 8003f92:	dc37      	bgt.n	8004004 <_printf_float+0x374>
 8003f94:	f04f 0b00 	mov.w	fp, #0
 8003f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f9c:	f104 021a 	add.w	r2, r4, #26
 8003fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fa2:	9305      	str	r3, [sp, #20]
 8003fa4:	eba3 0309 	sub.w	r3, r3, r9
 8003fa8:	455b      	cmp	r3, fp
 8003faa:	dc33      	bgt.n	8004014 <_printf_float+0x384>
 8003fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	db3b      	blt.n	800402c <_printf_float+0x39c>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	07da      	lsls	r2, r3, #31
 8003fb8:	d438      	bmi.n	800402c <_printf_float+0x39c>
 8003fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fbc:	9b05      	ldr	r3, [sp, #20]
 8003fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	eba2 0901 	sub.w	r9, r2, r1
 8003fc6:	4599      	cmp	r9, r3
 8003fc8:	bfa8      	it	ge
 8003fca:	4699      	movge	r9, r3
 8003fcc:	f1b9 0f00 	cmp.w	r9, #0
 8003fd0:	dc35      	bgt.n	800403e <_printf_float+0x3ae>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003fda:	f104 0a1a 	add.w	sl, r4, #26
 8003fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	eba3 0309 	sub.w	r3, r3, r9
 8003fe8:	4543      	cmp	r3, r8
 8003fea:	f77f af79 	ble.w	8003ee0 <_printf_float+0x250>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4652      	mov	r2, sl
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	47b8      	blx	r7
 8003ff8:	3001      	adds	r0, #1
 8003ffa:	f43f aeaa 	beq.w	8003d52 <_printf_float+0xc2>
 8003ffe:	f108 0801 	add.w	r8, r8, #1
 8004002:	e7ec      	b.n	8003fde <_printf_float+0x34e>
 8004004:	4613      	mov	r3, r2
 8004006:	4631      	mov	r1, r6
 8004008:	4642      	mov	r2, r8
 800400a:	4628      	mov	r0, r5
 800400c:	47b8      	blx	r7
 800400e:	3001      	adds	r0, #1
 8004010:	d1c0      	bne.n	8003f94 <_printf_float+0x304>
 8004012:	e69e      	b.n	8003d52 <_printf_float+0xc2>
 8004014:	2301      	movs	r3, #1
 8004016:	4631      	mov	r1, r6
 8004018:	4628      	mov	r0, r5
 800401a:	9205      	str	r2, [sp, #20]
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f ae97 	beq.w	8003d52 <_printf_float+0xc2>
 8004024:	9a05      	ldr	r2, [sp, #20]
 8004026:	f10b 0b01 	add.w	fp, fp, #1
 800402a:	e7b9      	b.n	8003fa0 <_printf_float+0x310>
 800402c:	ee18 3a10 	vmov	r3, s16
 8004030:	4652      	mov	r2, sl
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	47b8      	blx	r7
 8004038:	3001      	adds	r0, #1
 800403a:	d1be      	bne.n	8003fba <_printf_float+0x32a>
 800403c:	e689      	b.n	8003d52 <_printf_float+0xc2>
 800403e:	9a05      	ldr	r2, [sp, #20]
 8004040:	464b      	mov	r3, r9
 8004042:	4442      	add	r2, r8
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	d1c1      	bne.n	8003fd2 <_printf_float+0x342>
 800404e:	e680      	b.n	8003d52 <_printf_float+0xc2>
 8004050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004052:	2a01      	cmp	r2, #1
 8004054:	dc01      	bgt.n	800405a <_printf_float+0x3ca>
 8004056:	07db      	lsls	r3, r3, #31
 8004058:	d538      	bpl.n	80040cc <_printf_float+0x43c>
 800405a:	2301      	movs	r3, #1
 800405c:	4642      	mov	r2, r8
 800405e:	4631      	mov	r1, r6
 8004060:	4628      	mov	r0, r5
 8004062:	47b8      	blx	r7
 8004064:	3001      	adds	r0, #1
 8004066:	f43f ae74 	beq.w	8003d52 <_printf_float+0xc2>
 800406a:	ee18 3a10 	vmov	r3, s16
 800406e:	4652      	mov	r2, sl
 8004070:	4631      	mov	r1, r6
 8004072:	4628      	mov	r0, r5
 8004074:	47b8      	blx	r7
 8004076:	3001      	adds	r0, #1
 8004078:	f43f ae6b 	beq.w	8003d52 <_printf_float+0xc2>
 800407c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004080:	2200      	movs	r2, #0
 8004082:	2300      	movs	r3, #0
 8004084:	f7fc fd30 	bl	8000ae8 <__aeabi_dcmpeq>
 8004088:	b9d8      	cbnz	r0, 80040c2 <_printf_float+0x432>
 800408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408c:	f108 0201 	add.w	r2, r8, #1
 8004090:	3b01      	subs	r3, #1
 8004092:	4631      	mov	r1, r6
 8004094:	4628      	mov	r0, r5
 8004096:	47b8      	blx	r7
 8004098:	3001      	adds	r0, #1
 800409a:	d10e      	bne.n	80040ba <_printf_float+0x42a>
 800409c:	e659      	b.n	8003d52 <_printf_float+0xc2>
 800409e:	2301      	movs	r3, #1
 80040a0:	4652      	mov	r2, sl
 80040a2:	4631      	mov	r1, r6
 80040a4:	4628      	mov	r0, r5
 80040a6:	47b8      	blx	r7
 80040a8:	3001      	adds	r0, #1
 80040aa:	f43f ae52 	beq.w	8003d52 <_printf_float+0xc2>
 80040ae:	f108 0801 	add.w	r8, r8, #1
 80040b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b4:	3b01      	subs	r3, #1
 80040b6:	4543      	cmp	r3, r8
 80040b8:	dcf1      	bgt.n	800409e <_printf_float+0x40e>
 80040ba:	464b      	mov	r3, r9
 80040bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040c0:	e6dc      	b.n	8003e7c <_printf_float+0x1ec>
 80040c2:	f04f 0800 	mov.w	r8, #0
 80040c6:	f104 0a1a 	add.w	sl, r4, #26
 80040ca:	e7f2      	b.n	80040b2 <_printf_float+0x422>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4642      	mov	r2, r8
 80040d0:	e7df      	b.n	8004092 <_printf_float+0x402>
 80040d2:	2301      	movs	r3, #1
 80040d4:	464a      	mov	r2, r9
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	f43f ae38 	beq.w	8003d52 <_printf_float+0xc2>
 80040e2:	f108 0801 	add.w	r8, r8, #1
 80040e6:	68e3      	ldr	r3, [r4, #12]
 80040e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ea:	1a5b      	subs	r3, r3, r1
 80040ec:	4543      	cmp	r3, r8
 80040ee:	dcf0      	bgt.n	80040d2 <_printf_float+0x442>
 80040f0:	e6fa      	b.n	8003ee8 <_printf_float+0x258>
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	f104 0919 	add.w	r9, r4, #25
 80040fa:	e7f4      	b.n	80040e6 <_printf_float+0x456>

080040fc <_printf_common>:
 80040fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004100:	4616      	mov	r6, r2
 8004102:	4699      	mov	r9, r3
 8004104:	688a      	ldr	r2, [r1, #8]
 8004106:	690b      	ldr	r3, [r1, #16]
 8004108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800410c:	4293      	cmp	r3, r2
 800410e:	bfb8      	it	lt
 8004110:	4613      	movlt	r3, r2
 8004112:	6033      	str	r3, [r6, #0]
 8004114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004118:	4607      	mov	r7, r0
 800411a:	460c      	mov	r4, r1
 800411c:	b10a      	cbz	r2, 8004122 <_printf_common+0x26>
 800411e:	3301      	adds	r3, #1
 8004120:	6033      	str	r3, [r6, #0]
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	0699      	lsls	r1, r3, #26
 8004126:	bf42      	ittt	mi
 8004128:	6833      	ldrmi	r3, [r6, #0]
 800412a:	3302      	addmi	r3, #2
 800412c:	6033      	strmi	r3, [r6, #0]
 800412e:	6825      	ldr	r5, [r4, #0]
 8004130:	f015 0506 	ands.w	r5, r5, #6
 8004134:	d106      	bne.n	8004144 <_printf_common+0x48>
 8004136:	f104 0a19 	add.w	sl, r4, #25
 800413a:	68e3      	ldr	r3, [r4, #12]
 800413c:	6832      	ldr	r2, [r6, #0]
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	42ab      	cmp	r3, r5
 8004142:	dc26      	bgt.n	8004192 <_printf_common+0x96>
 8004144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004148:	1e13      	subs	r3, r2, #0
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	bf18      	it	ne
 800414e:	2301      	movne	r3, #1
 8004150:	0692      	lsls	r2, r2, #26
 8004152:	d42b      	bmi.n	80041ac <_printf_common+0xb0>
 8004154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004158:	4649      	mov	r1, r9
 800415a:	4638      	mov	r0, r7
 800415c:	47c0      	blx	r8
 800415e:	3001      	adds	r0, #1
 8004160:	d01e      	beq.n	80041a0 <_printf_common+0xa4>
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	68e5      	ldr	r5, [r4, #12]
 8004166:	6832      	ldr	r2, [r6, #0]
 8004168:	f003 0306 	and.w	r3, r3, #6
 800416c:	2b04      	cmp	r3, #4
 800416e:	bf08      	it	eq
 8004170:	1aad      	subeq	r5, r5, r2
 8004172:	68a3      	ldr	r3, [r4, #8]
 8004174:	6922      	ldr	r2, [r4, #16]
 8004176:	bf0c      	ite	eq
 8004178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800417c:	2500      	movne	r5, #0
 800417e:	4293      	cmp	r3, r2
 8004180:	bfc4      	itt	gt
 8004182:	1a9b      	subgt	r3, r3, r2
 8004184:	18ed      	addgt	r5, r5, r3
 8004186:	2600      	movs	r6, #0
 8004188:	341a      	adds	r4, #26
 800418a:	42b5      	cmp	r5, r6
 800418c:	d11a      	bne.n	80041c4 <_printf_common+0xc8>
 800418e:	2000      	movs	r0, #0
 8004190:	e008      	b.n	80041a4 <_printf_common+0xa8>
 8004192:	2301      	movs	r3, #1
 8004194:	4652      	mov	r2, sl
 8004196:	4649      	mov	r1, r9
 8004198:	4638      	mov	r0, r7
 800419a:	47c0      	blx	r8
 800419c:	3001      	adds	r0, #1
 800419e:	d103      	bne.n	80041a8 <_printf_common+0xac>
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a8:	3501      	adds	r5, #1
 80041aa:	e7c6      	b.n	800413a <_printf_common+0x3e>
 80041ac:	18e1      	adds	r1, r4, r3
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	2030      	movs	r0, #48	; 0x30
 80041b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041b6:	4422      	add	r2, r4
 80041b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041c0:	3302      	adds	r3, #2
 80041c2:	e7c7      	b.n	8004154 <_printf_common+0x58>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4622      	mov	r2, r4
 80041c8:	4649      	mov	r1, r9
 80041ca:	4638      	mov	r0, r7
 80041cc:	47c0      	blx	r8
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0e6      	beq.n	80041a0 <_printf_common+0xa4>
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7d9      	b.n	800418a <_printf_common+0x8e>
	...

080041d8 <_printf_i>:
 80041d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	460c      	mov	r4, r1
 80041de:	4691      	mov	r9, r2
 80041e0:	7e27      	ldrb	r7, [r4, #24]
 80041e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041e4:	2f78      	cmp	r7, #120	; 0x78
 80041e6:	4680      	mov	r8, r0
 80041e8:	469a      	mov	sl, r3
 80041ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041ee:	d807      	bhi.n	8004200 <_printf_i+0x28>
 80041f0:	2f62      	cmp	r7, #98	; 0x62
 80041f2:	d80a      	bhi.n	800420a <_printf_i+0x32>
 80041f4:	2f00      	cmp	r7, #0
 80041f6:	f000 80d8 	beq.w	80043aa <_printf_i+0x1d2>
 80041fa:	2f58      	cmp	r7, #88	; 0x58
 80041fc:	f000 80a3 	beq.w	8004346 <_printf_i+0x16e>
 8004200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004208:	e03a      	b.n	8004280 <_printf_i+0xa8>
 800420a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800420e:	2b15      	cmp	r3, #21
 8004210:	d8f6      	bhi.n	8004200 <_printf_i+0x28>
 8004212:	a001      	add	r0, pc, #4	; (adr r0, 8004218 <_printf_i+0x40>)
 8004214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004218:	08004271 	.word	0x08004271
 800421c:	08004285 	.word	0x08004285
 8004220:	08004201 	.word	0x08004201
 8004224:	08004201 	.word	0x08004201
 8004228:	08004201 	.word	0x08004201
 800422c:	08004201 	.word	0x08004201
 8004230:	08004285 	.word	0x08004285
 8004234:	08004201 	.word	0x08004201
 8004238:	08004201 	.word	0x08004201
 800423c:	08004201 	.word	0x08004201
 8004240:	08004201 	.word	0x08004201
 8004244:	08004391 	.word	0x08004391
 8004248:	080042b5 	.word	0x080042b5
 800424c:	08004373 	.word	0x08004373
 8004250:	08004201 	.word	0x08004201
 8004254:	08004201 	.word	0x08004201
 8004258:	080043b3 	.word	0x080043b3
 800425c:	08004201 	.word	0x08004201
 8004260:	080042b5 	.word	0x080042b5
 8004264:	08004201 	.word	0x08004201
 8004268:	08004201 	.word	0x08004201
 800426c:	0800437b 	.word	0x0800437b
 8004270:	680b      	ldr	r3, [r1, #0]
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	600a      	str	r2, [r1, #0]
 8004278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800427c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004280:	2301      	movs	r3, #1
 8004282:	e0a3      	b.n	80043cc <_printf_i+0x1f4>
 8004284:	6825      	ldr	r5, [r4, #0]
 8004286:	6808      	ldr	r0, [r1, #0]
 8004288:	062e      	lsls	r6, r5, #24
 800428a:	f100 0304 	add.w	r3, r0, #4
 800428e:	d50a      	bpl.n	80042a6 <_printf_i+0xce>
 8004290:	6805      	ldr	r5, [r0, #0]
 8004292:	600b      	str	r3, [r1, #0]
 8004294:	2d00      	cmp	r5, #0
 8004296:	da03      	bge.n	80042a0 <_printf_i+0xc8>
 8004298:	232d      	movs	r3, #45	; 0x2d
 800429a:	426d      	negs	r5, r5
 800429c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a0:	485e      	ldr	r0, [pc, #376]	; (800441c <_printf_i+0x244>)
 80042a2:	230a      	movs	r3, #10
 80042a4:	e019      	b.n	80042da <_printf_i+0x102>
 80042a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042aa:	6805      	ldr	r5, [r0, #0]
 80042ac:	600b      	str	r3, [r1, #0]
 80042ae:	bf18      	it	ne
 80042b0:	b22d      	sxthne	r5, r5
 80042b2:	e7ef      	b.n	8004294 <_printf_i+0xbc>
 80042b4:	680b      	ldr	r3, [r1, #0]
 80042b6:	6825      	ldr	r5, [r4, #0]
 80042b8:	1d18      	adds	r0, r3, #4
 80042ba:	6008      	str	r0, [r1, #0]
 80042bc:	0628      	lsls	r0, r5, #24
 80042be:	d501      	bpl.n	80042c4 <_printf_i+0xec>
 80042c0:	681d      	ldr	r5, [r3, #0]
 80042c2:	e002      	b.n	80042ca <_printf_i+0xf2>
 80042c4:	0669      	lsls	r1, r5, #25
 80042c6:	d5fb      	bpl.n	80042c0 <_printf_i+0xe8>
 80042c8:	881d      	ldrh	r5, [r3, #0]
 80042ca:	4854      	ldr	r0, [pc, #336]	; (800441c <_printf_i+0x244>)
 80042cc:	2f6f      	cmp	r7, #111	; 0x6f
 80042ce:	bf0c      	ite	eq
 80042d0:	2308      	moveq	r3, #8
 80042d2:	230a      	movne	r3, #10
 80042d4:	2100      	movs	r1, #0
 80042d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042da:	6866      	ldr	r6, [r4, #4]
 80042dc:	60a6      	str	r6, [r4, #8]
 80042de:	2e00      	cmp	r6, #0
 80042e0:	bfa2      	ittt	ge
 80042e2:	6821      	ldrge	r1, [r4, #0]
 80042e4:	f021 0104 	bicge.w	r1, r1, #4
 80042e8:	6021      	strge	r1, [r4, #0]
 80042ea:	b90d      	cbnz	r5, 80042f0 <_printf_i+0x118>
 80042ec:	2e00      	cmp	r6, #0
 80042ee:	d04d      	beq.n	800438c <_printf_i+0x1b4>
 80042f0:	4616      	mov	r6, r2
 80042f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f6:	fb03 5711 	mls	r7, r3, r1, r5
 80042fa:	5dc7      	ldrb	r7, [r0, r7]
 80042fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004300:	462f      	mov	r7, r5
 8004302:	42bb      	cmp	r3, r7
 8004304:	460d      	mov	r5, r1
 8004306:	d9f4      	bls.n	80042f2 <_printf_i+0x11a>
 8004308:	2b08      	cmp	r3, #8
 800430a:	d10b      	bne.n	8004324 <_printf_i+0x14c>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	07df      	lsls	r7, r3, #31
 8004310:	d508      	bpl.n	8004324 <_printf_i+0x14c>
 8004312:	6923      	ldr	r3, [r4, #16]
 8004314:	6861      	ldr	r1, [r4, #4]
 8004316:	4299      	cmp	r1, r3
 8004318:	bfde      	ittt	le
 800431a:	2330      	movle	r3, #48	; 0x30
 800431c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004320:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004324:	1b92      	subs	r2, r2, r6
 8004326:	6122      	str	r2, [r4, #16]
 8004328:	f8cd a000 	str.w	sl, [sp]
 800432c:	464b      	mov	r3, r9
 800432e:	aa03      	add	r2, sp, #12
 8004330:	4621      	mov	r1, r4
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fee2 	bl	80040fc <_printf_common>
 8004338:	3001      	adds	r0, #1
 800433a:	d14c      	bne.n	80043d6 <_printf_i+0x1fe>
 800433c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004340:	b004      	add	sp, #16
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	4835      	ldr	r0, [pc, #212]	; (800441c <_printf_i+0x244>)
 8004348:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	680e      	ldr	r6, [r1, #0]
 8004350:	061f      	lsls	r7, r3, #24
 8004352:	f856 5b04 	ldr.w	r5, [r6], #4
 8004356:	600e      	str	r6, [r1, #0]
 8004358:	d514      	bpl.n	8004384 <_printf_i+0x1ac>
 800435a:	07d9      	lsls	r1, r3, #31
 800435c:	bf44      	itt	mi
 800435e:	f043 0320 	orrmi.w	r3, r3, #32
 8004362:	6023      	strmi	r3, [r4, #0]
 8004364:	b91d      	cbnz	r5, 800436e <_printf_i+0x196>
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	f023 0320 	bic.w	r3, r3, #32
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	2310      	movs	r3, #16
 8004370:	e7b0      	b.n	80042d4 <_printf_i+0xfc>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f043 0320 	orr.w	r3, r3, #32
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	2378      	movs	r3, #120	; 0x78
 800437c:	4828      	ldr	r0, [pc, #160]	; (8004420 <_printf_i+0x248>)
 800437e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004382:	e7e3      	b.n	800434c <_printf_i+0x174>
 8004384:	065e      	lsls	r6, r3, #25
 8004386:	bf48      	it	mi
 8004388:	b2ad      	uxthmi	r5, r5
 800438a:	e7e6      	b.n	800435a <_printf_i+0x182>
 800438c:	4616      	mov	r6, r2
 800438e:	e7bb      	b.n	8004308 <_printf_i+0x130>
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	6826      	ldr	r6, [r4, #0]
 8004394:	6960      	ldr	r0, [r4, #20]
 8004396:	1d1d      	adds	r5, r3, #4
 8004398:	600d      	str	r5, [r1, #0]
 800439a:	0635      	lsls	r5, r6, #24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0x1cc>
 80043a0:	6018      	str	r0, [r3, #0]
 80043a2:	e002      	b.n	80043aa <_printf_i+0x1d2>
 80043a4:	0671      	lsls	r1, r6, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0x1c8>
 80043a8:	8018      	strh	r0, [r3, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	4616      	mov	r6, r2
 80043b0:	e7ba      	b.n	8004328 <_printf_i+0x150>
 80043b2:	680b      	ldr	r3, [r1, #0]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	600a      	str	r2, [r1, #0]
 80043b8:	681e      	ldr	r6, [r3, #0]
 80043ba:	6862      	ldr	r2, [r4, #4]
 80043bc:	2100      	movs	r1, #0
 80043be:	4630      	mov	r0, r6
 80043c0:	f7fb ff1e 	bl	8000200 <memchr>
 80043c4:	b108      	cbz	r0, 80043ca <_printf_i+0x1f2>
 80043c6:	1b80      	subs	r0, r0, r6
 80043c8:	6060      	str	r0, [r4, #4]
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	6123      	str	r3, [r4, #16]
 80043ce:	2300      	movs	r3, #0
 80043d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d4:	e7a8      	b.n	8004328 <_printf_i+0x150>
 80043d6:	6923      	ldr	r3, [r4, #16]
 80043d8:	4632      	mov	r2, r6
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	47d0      	blx	sl
 80043e0:	3001      	adds	r0, #1
 80043e2:	d0ab      	beq.n	800433c <_printf_i+0x164>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	079b      	lsls	r3, r3, #30
 80043e8:	d413      	bmi.n	8004412 <_printf_i+0x23a>
 80043ea:	68e0      	ldr	r0, [r4, #12]
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	4298      	cmp	r0, r3
 80043f0:	bfb8      	it	lt
 80043f2:	4618      	movlt	r0, r3
 80043f4:	e7a4      	b.n	8004340 <_printf_i+0x168>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4632      	mov	r2, r6
 80043fa:	4649      	mov	r1, r9
 80043fc:	4640      	mov	r0, r8
 80043fe:	47d0      	blx	sl
 8004400:	3001      	adds	r0, #1
 8004402:	d09b      	beq.n	800433c <_printf_i+0x164>
 8004404:	3501      	adds	r5, #1
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	9903      	ldr	r1, [sp, #12]
 800440a:	1a5b      	subs	r3, r3, r1
 800440c:	42ab      	cmp	r3, r5
 800440e:	dcf2      	bgt.n	80043f6 <_printf_i+0x21e>
 8004410:	e7eb      	b.n	80043ea <_printf_i+0x212>
 8004412:	2500      	movs	r5, #0
 8004414:	f104 0619 	add.w	r6, r4, #25
 8004418:	e7f5      	b.n	8004406 <_printf_i+0x22e>
 800441a:	bf00      	nop
 800441c:	080068de 	.word	0x080068de
 8004420:	080068ef 	.word	0x080068ef

08004424 <siprintf>:
 8004424:	b40e      	push	{r1, r2, r3}
 8004426:	b500      	push	{lr}
 8004428:	b09c      	sub	sp, #112	; 0x70
 800442a:	ab1d      	add	r3, sp, #116	; 0x74
 800442c:	9002      	str	r0, [sp, #8]
 800442e:	9006      	str	r0, [sp, #24]
 8004430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004434:	4809      	ldr	r0, [pc, #36]	; (800445c <siprintf+0x38>)
 8004436:	9107      	str	r1, [sp, #28]
 8004438:	9104      	str	r1, [sp, #16]
 800443a:	4909      	ldr	r1, [pc, #36]	; (8004460 <siprintf+0x3c>)
 800443c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	a902      	add	r1, sp, #8
 8004448:	f001 fb34 	bl	8005ab4 <_svfiprintf_r>
 800444c:	9b02      	ldr	r3, [sp, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	b01c      	add	sp, #112	; 0x70
 8004454:	f85d eb04 	ldr.w	lr, [sp], #4
 8004458:	b003      	add	sp, #12
 800445a:	4770      	bx	lr
 800445c:	2000000c 	.word	0x2000000c
 8004460:	ffff0208 	.word	0xffff0208

08004464 <quorem>:
 8004464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	6903      	ldr	r3, [r0, #16]
 800446a:	690c      	ldr	r4, [r1, #16]
 800446c:	42a3      	cmp	r3, r4
 800446e:	4607      	mov	r7, r0
 8004470:	f2c0 8081 	blt.w	8004576 <quorem+0x112>
 8004474:	3c01      	subs	r4, #1
 8004476:	f101 0814 	add.w	r8, r1, #20
 800447a:	f100 0514 	add.w	r5, r0, #20
 800447e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004488:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800448c:	3301      	adds	r3, #1
 800448e:	429a      	cmp	r2, r3
 8004490:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004494:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004498:	fbb2 f6f3 	udiv	r6, r2, r3
 800449c:	d331      	bcc.n	8004502 <quorem+0x9e>
 800449e:	f04f 0e00 	mov.w	lr, #0
 80044a2:	4640      	mov	r0, r8
 80044a4:	46ac      	mov	ip, r5
 80044a6:	46f2      	mov	sl, lr
 80044a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80044ac:	b293      	uxth	r3, r2
 80044ae:	fb06 e303 	mla	r3, r6, r3, lr
 80044b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ebaa 0303 	sub.w	r3, sl, r3
 80044bc:	0c12      	lsrs	r2, r2, #16
 80044be:	f8dc a000 	ldr.w	sl, [ip]
 80044c2:	fb06 e202 	mla	r2, r6, r2, lr
 80044c6:	fa13 f38a 	uxtah	r3, r3, sl
 80044ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80044ce:	fa1f fa82 	uxth.w	sl, r2
 80044d2:	f8dc 2000 	ldr.w	r2, [ip]
 80044d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80044da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044e4:	4581      	cmp	r9, r0
 80044e6:	f84c 3b04 	str.w	r3, [ip], #4
 80044ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80044ee:	d2db      	bcs.n	80044a8 <quorem+0x44>
 80044f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80044f4:	b92b      	cbnz	r3, 8004502 <quorem+0x9e>
 80044f6:	9b01      	ldr	r3, [sp, #4]
 80044f8:	3b04      	subs	r3, #4
 80044fa:	429d      	cmp	r5, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	d32e      	bcc.n	800455e <quorem+0xfa>
 8004500:	613c      	str	r4, [r7, #16]
 8004502:	4638      	mov	r0, r7
 8004504:	f001 f8c0 	bl	8005688 <__mcmp>
 8004508:	2800      	cmp	r0, #0
 800450a:	db24      	blt.n	8004556 <quorem+0xf2>
 800450c:	3601      	adds	r6, #1
 800450e:	4628      	mov	r0, r5
 8004510:	f04f 0c00 	mov.w	ip, #0
 8004514:	f858 2b04 	ldr.w	r2, [r8], #4
 8004518:	f8d0 e000 	ldr.w	lr, [r0]
 800451c:	b293      	uxth	r3, r2
 800451e:	ebac 0303 	sub.w	r3, ip, r3
 8004522:	0c12      	lsrs	r2, r2, #16
 8004524:	fa13 f38e 	uxtah	r3, r3, lr
 8004528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800452c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004530:	b29b      	uxth	r3, r3
 8004532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004536:	45c1      	cmp	r9, r8
 8004538:	f840 3b04 	str.w	r3, [r0], #4
 800453c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004540:	d2e8      	bcs.n	8004514 <quorem+0xb0>
 8004542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800454a:	b922      	cbnz	r2, 8004556 <quorem+0xf2>
 800454c:	3b04      	subs	r3, #4
 800454e:	429d      	cmp	r5, r3
 8004550:	461a      	mov	r2, r3
 8004552:	d30a      	bcc.n	800456a <quorem+0x106>
 8004554:	613c      	str	r4, [r7, #16]
 8004556:	4630      	mov	r0, r6
 8004558:	b003      	add	sp, #12
 800455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	3b04      	subs	r3, #4
 8004562:	2a00      	cmp	r2, #0
 8004564:	d1cc      	bne.n	8004500 <quorem+0x9c>
 8004566:	3c01      	subs	r4, #1
 8004568:	e7c7      	b.n	80044fa <quorem+0x96>
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	3b04      	subs	r3, #4
 800456e:	2a00      	cmp	r2, #0
 8004570:	d1f0      	bne.n	8004554 <quorem+0xf0>
 8004572:	3c01      	subs	r4, #1
 8004574:	e7eb      	b.n	800454e <quorem+0xea>
 8004576:	2000      	movs	r0, #0
 8004578:	e7ee      	b.n	8004558 <quorem+0xf4>
 800457a:	0000      	movs	r0, r0
 800457c:	0000      	movs	r0, r0
	...

08004580 <_dtoa_r>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	ed2d 8b02 	vpush	{d8}
 8004588:	ec57 6b10 	vmov	r6, r7, d0
 800458c:	b095      	sub	sp, #84	; 0x54
 800458e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004590:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004594:	9105      	str	r1, [sp, #20]
 8004596:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800459a:	4604      	mov	r4, r0
 800459c:	9209      	str	r2, [sp, #36]	; 0x24
 800459e:	930f      	str	r3, [sp, #60]	; 0x3c
 80045a0:	b975      	cbnz	r5, 80045c0 <_dtoa_r+0x40>
 80045a2:	2010      	movs	r0, #16
 80045a4:	f000 fddc 	bl	8005160 <malloc>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6260      	str	r0, [r4, #36]	; 0x24
 80045ac:	b920      	cbnz	r0, 80045b8 <_dtoa_r+0x38>
 80045ae:	4bb2      	ldr	r3, [pc, #712]	; (8004878 <_dtoa_r+0x2f8>)
 80045b0:	21ea      	movs	r1, #234	; 0xea
 80045b2:	48b2      	ldr	r0, [pc, #712]	; (800487c <_dtoa_r+0x2fc>)
 80045b4:	f001 fb8e 	bl	8005cd4 <__assert_func>
 80045b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045bc:	6005      	str	r5, [r0, #0]
 80045be:	60c5      	str	r5, [r0, #12]
 80045c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	b151      	cbz	r1, 80045dc <_dtoa_r+0x5c>
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	604a      	str	r2, [r1, #4]
 80045ca:	2301      	movs	r3, #1
 80045cc:	4093      	lsls	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 fe1b 	bl	800520c <_Bfree>
 80045d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	1e3b      	subs	r3, r7, #0
 80045de:	bfb9      	ittee	lt
 80045e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	9303      	strlt	r3, [sp, #12]
 80045e6:	2300      	movge	r3, #0
 80045e8:	f8c8 3000 	strge.w	r3, [r8]
 80045ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80045f0:	4ba3      	ldr	r3, [pc, #652]	; (8004880 <_dtoa_r+0x300>)
 80045f2:	bfbc      	itt	lt
 80045f4:	2201      	movlt	r2, #1
 80045f6:	f8c8 2000 	strlt.w	r2, [r8]
 80045fa:	ea33 0309 	bics.w	r3, r3, r9
 80045fe:	d11b      	bne.n	8004638 <_dtoa_r+0xb8>
 8004600:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004602:	f242 730f 	movw	r3, #9999	; 0x270f
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800460c:	4333      	orrs	r3, r6
 800460e:	f000 857a 	beq.w	8005106 <_dtoa_r+0xb86>
 8004612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004614:	b963      	cbnz	r3, 8004630 <_dtoa_r+0xb0>
 8004616:	4b9b      	ldr	r3, [pc, #620]	; (8004884 <_dtoa_r+0x304>)
 8004618:	e024      	b.n	8004664 <_dtoa_r+0xe4>
 800461a:	4b9b      	ldr	r3, [pc, #620]	; (8004888 <_dtoa_r+0x308>)
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	9800      	ldr	r0, [sp, #0]
 8004626:	b015      	add	sp, #84	; 0x54
 8004628:	ecbd 8b02 	vpop	{d8}
 800462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004630:	4b94      	ldr	r3, [pc, #592]	; (8004884 <_dtoa_r+0x304>)
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	3303      	adds	r3, #3
 8004636:	e7f3      	b.n	8004620 <_dtoa_r+0xa0>
 8004638:	ed9d 7b02 	vldr	d7, [sp, #8]
 800463c:	2200      	movs	r2, #0
 800463e:	ec51 0b17 	vmov	r0, r1, d7
 8004642:	2300      	movs	r3, #0
 8004644:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004648:	f7fc fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800464c:	4680      	mov	r8, r0
 800464e:	b158      	cbz	r0, 8004668 <_dtoa_r+0xe8>
 8004650:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004652:	2301      	movs	r3, #1
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8551 	beq.w	8005100 <_dtoa_r+0xb80>
 800465e:	488b      	ldr	r0, [pc, #556]	; (800488c <_dtoa_r+0x30c>)
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	1e43      	subs	r3, r0, #1
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	e7dd      	b.n	8004624 <_dtoa_r+0xa4>
 8004668:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800466c:	aa12      	add	r2, sp, #72	; 0x48
 800466e:	a913      	add	r1, sp, #76	; 0x4c
 8004670:	4620      	mov	r0, r4
 8004672:	f001 f8ad 	bl	80057d0 <__d2b>
 8004676:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800467a:	4683      	mov	fp, r0
 800467c:	2d00      	cmp	r5, #0
 800467e:	d07c      	beq.n	800477a <_dtoa_r+0x1fa>
 8004680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004682:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800468e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800469a:	4b7d      	ldr	r3, [pc, #500]	; (8004890 <_dtoa_r+0x310>)
 800469c:	2200      	movs	r2, #0
 800469e:	4630      	mov	r0, r6
 80046a0:	4639      	mov	r1, r7
 80046a2:	f7fb fe01 	bl	80002a8 <__aeabi_dsub>
 80046a6:	a36e      	add	r3, pc, #440	; (adr r3, 8004860 <_dtoa_r+0x2e0>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb ffb4 	bl	8000618 <__aeabi_dmul>
 80046b0:	a36d      	add	r3, pc, #436	; (adr r3, 8004868 <_dtoa_r+0x2e8>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb fdf9 	bl	80002ac <__adddf3>
 80046ba:	4606      	mov	r6, r0
 80046bc:	4628      	mov	r0, r5
 80046be:	460f      	mov	r7, r1
 80046c0:	f7fb ff40 	bl	8000544 <__aeabi_i2d>
 80046c4:	a36a      	add	r3, pc, #424	; (adr r3, 8004870 <_dtoa_r+0x2f0>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ffa5 	bl	8000618 <__aeabi_dmul>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4630      	mov	r0, r6
 80046d4:	4639      	mov	r1, r7
 80046d6:	f7fb fde9 	bl	80002ac <__adddf3>
 80046da:	4606      	mov	r6, r0
 80046dc:	460f      	mov	r7, r1
 80046de:	f7fc fa4b 	bl	8000b78 <__aeabi_d2iz>
 80046e2:	2200      	movs	r2, #0
 80046e4:	4682      	mov	sl, r0
 80046e6:	2300      	movs	r3, #0
 80046e8:	4630      	mov	r0, r6
 80046ea:	4639      	mov	r1, r7
 80046ec:	f7fc fa06 	bl	8000afc <__aeabi_dcmplt>
 80046f0:	b148      	cbz	r0, 8004706 <_dtoa_r+0x186>
 80046f2:	4650      	mov	r0, sl
 80046f4:	f7fb ff26 	bl	8000544 <__aeabi_i2d>
 80046f8:	4632      	mov	r2, r6
 80046fa:	463b      	mov	r3, r7
 80046fc:	f7fc f9f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004700:	b908      	cbnz	r0, 8004706 <_dtoa_r+0x186>
 8004702:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004706:	f1ba 0f16 	cmp.w	sl, #22
 800470a:	d854      	bhi.n	80047b6 <_dtoa_r+0x236>
 800470c:	4b61      	ldr	r3, [pc, #388]	; (8004894 <_dtoa_r+0x314>)
 800470e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800471a:	f7fc f9ef 	bl	8000afc <__aeabi_dcmplt>
 800471e:	2800      	cmp	r0, #0
 8004720:	d04b      	beq.n	80047ba <_dtoa_r+0x23a>
 8004722:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004726:	2300      	movs	r3, #0
 8004728:	930e      	str	r3, [sp, #56]	; 0x38
 800472a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800472c:	1b5d      	subs	r5, r3, r5
 800472e:	1e6b      	subs	r3, r5, #1
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	bf43      	ittte	mi
 8004734:	2300      	movmi	r3, #0
 8004736:	f1c5 0801 	rsbmi	r8, r5, #1
 800473a:	9304      	strmi	r3, [sp, #16]
 800473c:	f04f 0800 	movpl.w	r8, #0
 8004740:	f1ba 0f00 	cmp.w	sl, #0
 8004744:	db3b      	blt.n	80047be <_dtoa_r+0x23e>
 8004746:	9b04      	ldr	r3, [sp, #16]
 8004748:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800474c:	4453      	add	r3, sl
 800474e:	9304      	str	r3, [sp, #16]
 8004750:	2300      	movs	r3, #0
 8004752:	9306      	str	r3, [sp, #24]
 8004754:	9b05      	ldr	r3, [sp, #20]
 8004756:	2b09      	cmp	r3, #9
 8004758:	d869      	bhi.n	800482e <_dtoa_r+0x2ae>
 800475a:	2b05      	cmp	r3, #5
 800475c:	bfc4      	itt	gt
 800475e:	3b04      	subgt	r3, #4
 8004760:	9305      	strgt	r3, [sp, #20]
 8004762:	9b05      	ldr	r3, [sp, #20]
 8004764:	f1a3 0302 	sub.w	r3, r3, #2
 8004768:	bfcc      	ite	gt
 800476a:	2500      	movgt	r5, #0
 800476c:	2501      	movle	r5, #1
 800476e:	2b03      	cmp	r3, #3
 8004770:	d869      	bhi.n	8004846 <_dtoa_r+0x2c6>
 8004772:	e8df f003 	tbb	[pc, r3]
 8004776:	4e2c      	.short	0x4e2c
 8004778:	5a4c      	.short	0x5a4c
 800477a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800477e:	441d      	add	r5, r3
 8004780:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004784:	2b20      	cmp	r3, #32
 8004786:	bfc1      	itttt	gt
 8004788:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800478c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004790:	fa09 f303 	lslgt.w	r3, r9, r3
 8004794:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004798:	bfda      	itte	le
 800479a:	f1c3 0320 	rsble	r3, r3, #32
 800479e:	fa06 f003 	lslle.w	r0, r6, r3
 80047a2:	4318      	orrgt	r0, r3
 80047a4:	f7fb febe 	bl	8000524 <__aeabi_ui2d>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4606      	mov	r6, r0
 80047ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80047b0:	3d01      	subs	r5, #1
 80047b2:	9310      	str	r3, [sp, #64]	; 0x40
 80047b4:	e771      	b.n	800469a <_dtoa_r+0x11a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e7b6      	b.n	8004728 <_dtoa_r+0x1a8>
 80047ba:	900e      	str	r0, [sp, #56]	; 0x38
 80047bc:	e7b5      	b.n	800472a <_dtoa_r+0x1aa>
 80047be:	f1ca 0300 	rsb	r3, sl, #0
 80047c2:	9306      	str	r3, [sp, #24]
 80047c4:	2300      	movs	r3, #0
 80047c6:	eba8 080a 	sub.w	r8, r8, sl
 80047ca:	930d      	str	r3, [sp, #52]	; 0x34
 80047cc:	e7c2      	b.n	8004754 <_dtoa_r+0x1d4>
 80047ce:	2300      	movs	r3, #0
 80047d0:	9308      	str	r3, [sp, #32]
 80047d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dc39      	bgt.n	800484c <_dtoa_r+0x2cc>
 80047d8:	f04f 0901 	mov.w	r9, #1
 80047dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80047e0:	464b      	mov	r3, r9
 80047e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047e8:	2200      	movs	r2, #0
 80047ea:	6042      	str	r2, [r0, #4]
 80047ec:	2204      	movs	r2, #4
 80047ee:	f102 0614 	add.w	r6, r2, #20
 80047f2:	429e      	cmp	r6, r3
 80047f4:	6841      	ldr	r1, [r0, #4]
 80047f6:	d92f      	bls.n	8004858 <_dtoa_r+0x2d8>
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fcc7 	bl	800518c <_Balloc>
 80047fe:	9000      	str	r0, [sp, #0]
 8004800:	2800      	cmp	r0, #0
 8004802:	d14b      	bne.n	800489c <_dtoa_r+0x31c>
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <_dtoa_r+0x318>)
 8004806:	4602      	mov	r2, r0
 8004808:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800480c:	e6d1      	b.n	80045b2 <_dtoa_r+0x32>
 800480e:	2301      	movs	r3, #1
 8004810:	e7de      	b.n	80047d0 <_dtoa_r+0x250>
 8004812:	2300      	movs	r3, #0
 8004814:	9308      	str	r3, [sp, #32]
 8004816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004818:	eb0a 0903 	add.w	r9, sl, r3
 800481c:	f109 0301 	add.w	r3, r9, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	bfb8      	it	lt
 8004826:	2301      	movlt	r3, #1
 8004828:	e7dd      	b.n	80047e6 <_dtoa_r+0x266>
 800482a:	2301      	movs	r3, #1
 800482c:	e7f2      	b.n	8004814 <_dtoa_r+0x294>
 800482e:	2501      	movs	r5, #1
 8004830:	2300      	movs	r3, #0
 8004832:	9305      	str	r3, [sp, #20]
 8004834:	9508      	str	r5, [sp, #32]
 8004836:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800483a:	2200      	movs	r2, #0
 800483c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004840:	2312      	movs	r3, #18
 8004842:	9209      	str	r2, [sp, #36]	; 0x24
 8004844:	e7cf      	b.n	80047e6 <_dtoa_r+0x266>
 8004846:	2301      	movs	r3, #1
 8004848:	9308      	str	r3, [sp, #32]
 800484a:	e7f4      	b.n	8004836 <_dtoa_r+0x2b6>
 800484c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004850:	f8cd 9004 	str.w	r9, [sp, #4]
 8004854:	464b      	mov	r3, r9
 8004856:	e7c6      	b.n	80047e6 <_dtoa_r+0x266>
 8004858:	3101      	adds	r1, #1
 800485a:	6041      	str	r1, [r0, #4]
 800485c:	0052      	lsls	r2, r2, #1
 800485e:	e7c6      	b.n	80047ee <_dtoa_r+0x26e>
 8004860:	636f4361 	.word	0x636f4361
 8004864:	3fd287a7 	.word	0x3fd287a7
 8004868:	8b60c8b3 	.word	0x8b60c8b3
 800486c:	3fc68a28 	.word	0x3fc68a28
 8004870:	509f79fb 	.word	0x509f79fb
 8004874:	3fd34413 	.word	0x3fd34413
 8004878:	0800690d 	.word	0x0800690d
 800487c:	08006924 	.word	0x08006924
 8004880:	7ff00000 	.word	0x7ff00000
 8004884:	08006909 	.word	0x08006909
 8004888:	08006900 	.word	0x08006900
 800488c:	080068dd 	.word	0x080068dd
 8004890:	3ff80000 	.word	0x3ff80000
 8004894:	08006a20 	.word	0x08006a20
 8004898:	08006983 	.word	0x08006983
 800489c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800489e:	9a00      	ldr	r2, [sp, #0]
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	2b0e      	cmp	r3, #14
 80048a6:	f200 80ad 	bhi.w	8004a04 <_dtoa_r+0x484>
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	f000 80aa 	beq.w	8004a04 <_dtoa_r+0x484>
 80048b0:	f1ba 0f00 	cmp.w	sl, #0
 80048b4:	dd36      	ble.n	8004924 <_dtoa_r+0x3a4>
 80048b6:	4ac3      	ldr	r2, [pc, #780]	; (8004bc4 <_dtoa_r+0x644>)
 80048b8:	f00a 030f 	and.w	r3, sl, #15
 80048bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048c0:	ed93 7b00 	vldr	d7, [r3]
 80048c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80048c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80048cc:	eeb0 8a47 	vmov.f32	s16, s14
 80048d0:	eef0 8a67 	vmov.f32	s17, s15
 80048d4:	d016      	beq.n	8004904 <_dtoa_r+0x384>
 80048d6:	4bbc      	ldr	r3, [pc, #752]	; (8004bc8 <_dtoa_r+0x648>)
 80048d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80048dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80048e0:	f7fb ffc4 	bl	800086c <__aeabi_ddiv>
 80048e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e8:	f007 070f 	and.w	r7, r7, #15
 80048ec:	2503      	movs	r5, #3
 80048ee:	4eb6      	ldr	r6, [pc, #728]	; (8004bc8 <_dtoa_r+0x648>)
 80048f0:	b957      	cbnz	r7, 8004908 <_dtoa_r+0x388>
 80048f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048f6:	ec53 2b18 	vmov	r2, r3, d8
 80048fa:	f7fb ffb7 	bl	800086c <__aeabi_ddiv>
 80048fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004902:	e029      	b.n	8004958 <_dtoa_r+0x3d8>
 8004904:	2502      	movs	r5, #2
 8004906:	e7f2      	b.n	80048ee <_dtoa_r+0x36e>
 8004908:	07f9      	lsls	r1, r7, #31
 800490a:	d508      	bpl.n	800491e <_dtoa_r+0x39e>
 800490c:	ec51 0b18 	vmov	r0, r1, d8
 8004910:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004914:	f7fb fe80 	bl	8000618 <__aeabi_dmul>
 8004918:	ec41 0b18 	vmov	d8, r0, r1
 800491c:	3501      	adds	r5, #1
 800491e:	107f      	asrs	r7, r7, #1
 8004920:	3608      	adds	r6, #8
 8004922:	e7e5      	b.n	80048f0 <_dtoa_r+0x370>
 8004924:	f000 80a6 	beq.w	8004a74 <_dtoa_r+0x4f4>
 8004928:	f1ca 0600 	rsb	r6, sl, #0
 800492c:	4ba5      	ldr	r3, [pc, #660]	; (8004bc4 <_dtoa_r+0x644>)
 800492e:	4fa6      	ldr	r7, [pc, #664]	; (8004bc8 <_dtoa_r+0x648>)
 8004930:	f006 020f 	and.w	r2, r6, #15
 8004934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004940:	f7fb fe6a 	bl	8000618 <__aeabi_dmul>
 8004944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004948:	1136      	asrs	r6, r6, #4
 800494a:	2300      	movs	r3, #0
 800494c:	2502      	movs	r5, #2
 800494e:	2e00      	cmp	r6, #0
 8004950:	f040 8085 	bne.w	8004a5e <_dtoa_r+0x4de>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1d2      	bne.n	80048fe <_dtoa_r+0x37e>
 8004958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 808c 	beq.w	8004a78 <_dtoa_r+0x4f8>
 8004960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004964:	4b99      	ldr	r3, [pc, #612]	; (8004bcc <_dtoa_r+0x64c>)
 8004966:	2200      	movs	r2, #0
 8004968:	4630      	mov	r0, r6
 800496a:	4639      	mov	r1, r7
 800496c:	f7fc f8c6 	bl	8000afc <__aeabi_dcmplt>
 8004970:	2800      	cmp	r0, #0
 8004972:	f000 8081 	beq.w	8004a78 <_dtoa_r+0x4f8>
 8004976:	9b01      	ldr	r3, [sp, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d07d      	beq.n	8004a78 <_dtoa_r+0x4f8>
 800497c:	f1b9 0f00 	cmp.w	r9, #0
 8004980:	dd3c      	ble.n	80049fc <_dtoa_r+0x47c>
 8004982:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004986:	9307      	str	r3, [sp, #28]
 8004988:	2200      	movs	r2, #0
 800498a:	4b91      	ldr	r3, [pc, #580]	; (8004bd0 <_dtoa_r+0x650>)
 800498c:	4630      	mov	r0, r6
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fe42 	bl	8000618 <__aeabi_dmul>
 8004994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004998:	3501      	adds	r5, #1
 800499a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800499e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80049a2:	4628      	mov	r0, r5
 80049a4:	f7fb fdce 	bl	8000544 <__aeabi_i2d>
 80049a8:	4632      	mov	r2, r6
 80049aa:	463b      	mov	r3, r7
 80049ac:	f7fb fe34 	bl	8000618 <__aeabi_dmul>
 80049b0:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <_dtoa_r+0x654>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	f7fb fc7a 	bl	80002ac <__adddf3>
 80049b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80049bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d15c      	bne.n	8004a82 <_dtoa_r+0x502>
 80049c8:	4b83      	ldr	r3, [pc, #524]	; (8004bd8 <_dtoa_r+0x658>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	4630      	mov	r0, r6
 80049ce:	4639      	mov	r1, r7
 80049d0:	f7fb fc6a 	bl	80002a8 <__aeabi_dsub>
 80049d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	f7fc f8ac 	bl	8000b38 <__aeabi_dcmpgt>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f040 8296 	bne.w	8004f12 <_dtoa_r+0x992>
 80049e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80049ea:	4630      	mov	r0, r6
 80049ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049f0:	4639      	mov	r1, r7
 80049f2:	f7fc f883 	bl	8000afc <__aeabi_dcmplt>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	f040 8288 	bne.w	8004f0c <_dtoa_r+0x98c>
 80049fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f2c0 8158 	blt.w	8004cbc <_dtoa_r+0x73c>
 8004a0c:	f1ba 0f0e 	cmp.w	sl, #14
 8004a10:	f300 8154 	bgt.w	8004cbc <_dtoa_r+0x73c>
 8004a14:	4b6b      	ldr	r3, [pc, #428]	; (8004bc4 <_dtoa_r+0x644>)
 8004a16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004a1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f280 80e3 	bge.w	8004bec <_dtoa_r+0x66c>
 8004a26:	9b01      	ldr	r3, [sp, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f300 80df 	bgt.w	8004bec <_dtoa_r+0x66c>
 8004a2e:	f040 826d 	bne.w	8004f0c <_dtoa_r+0x98c>
 8004a32:	4b69      	ldr	r3, [pc, #420]	; (8004bd8 <_dtoa_r+0x658>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	4640      	mov	r0, r8
 8004a38:	4649      	mov	r1, r9
 8004a3a:	f7fb fded 	bl	8000618 <__aeabi_dmul>
 8004a3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a42:	f7fc f86f 	bl	8000b24 <__aeabi_dcmpge>
 8004a46:	9e01      	ldr	r6, [sp, #4]
 8004a48:	4637      	mov	r7, r6
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f040 8243 	bne.w	8004ed6 <_dtoa_r+0x956>
 8004a50:	9d00      	ldr	r5, [sp, #0]
 8004a52:	2331      	movs	r3, #49	; 0x31
 8004a54:	f805 3b01 	strb.w	r3, [r5], #1
 8004a58:	f10a 0a01 	add.w	sl, sl, #1
 8004a5c:	e23f      	b.n	8004ede <_dtoa_r+0x95e>
 8004a5e:	07f2      	lsls	r2, r6, #31
 8004a60:	d505      	bpl.n	8004a6e <_dtoa_r+0x4ee>
 8004a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a66:	f7fb fdd7 	bl	8000618 <__aeabi_dmul>
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	1076      	asrs	r6, r6, #1
 8004a70:	3708      	adds	r7, #8
 8004a72:	e76c      	b.n	800494e <_dtoa_r+0x3ce>
 8004a74:	2502      	movs	r5, #2
 8004a76:	e76f      	b.n	8004958 <_dtoa_r+0x3d8>
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004a7e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a80:	e78d      	b.n	800499e <_dtoa_r+0x41e>
 8004a82:	9900      	ldr	r1, [sp, #0]
 8004a84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <_dtoa_r+0x644>)
 8004a8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a8e:	4401      	add	r1, r0
 8004a90:	9102      	str	r1, [sp, #8]
 8004a92:	9908      	ldr	r1, [sp, #32]
 8004a94:	eeb0 8a47 	vmov.f32	s16, s14
 8004a98:	eef0 8a67 	vmov.f32	s17, s15
 8004a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d045      	beq.n	8004b34 <_dtoa_r+0x5b4>
 8004aa8:	494c      	ldr	r1, [pc, #304]	; (8004bdc <_dtoa_r+0x65c>)
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f7fb fede 	bl	800086c <__aeabi_ddiv>
 8004ab0:	ec53 2b18 	vmov	r2, r3, d8
 8004ab4:	f7fb fbf8 	bl	80002a8 <__aeabi_dsub>
 8004ab8:	9d00      	ldr	r5, [sp, #0]
 8004aba:	ec41 0b18 	vmov	d8, r0, r1
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7fc f859 	bl	8000b78 <__aeabi_d2iz>
 8004ac6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ac8:	f7fb fd3c 	bl	8000544 <__aeabi_i2d>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f7fb fbe8 	bl	80002a8 <__aeabi_dsub>
 8004ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ada:	3330      	adds	r3, #48	; 0x30
 8004adc:	f805 3b01 	strb.w	r3, [r5], #1
 8004ae0:	ec53 2b18 	vmov	r2, r3, d8
 8004ae4:	4606      	mov	r6, r0
 8004ae6:	460f      	mov	r7, r1
 8004ae8:	f7fc f808 	bl	8000afc <__aeabi_dcmplt>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d165      	bne.n	8004bbc <_dtoa_r+0x63c>
 8004af0:	4632      	mov	r2, r6
 8004af2:	463b      	mov	r3, r7
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <_dtoa_r+0x64c>)
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fb fbd6 	bl	80002a8 <__aeabi_dsub>
 8004afc:	ec53 2b18 	vmov	r2, r3, d8
 8004b00:	f7fb fffc 	bl	8000afc <__aeabi_dcmplt>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	f040 80b9 	bne.w	8004c7c <_dtoa_r+0x6fc>
 8004b0a:	9b02      	ldr	r3, [sp, #8]
 8004b0c:	429d      	cmp	r5, r3
 8004b0e:	f43f af75 	beq.w	80049fc <_dtoa_r+0x47c>
 8004b12:	4b2f      	ldr	r3, [pc, #188]	; (8004bd0 <_dtoa_r+0x650>)
 8004b14:	ec51 0b18 	vmov	r0, r1, d8
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f7fb fd7d 	bl	8000618 <__aeabi_dmul>
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <_dtoa_r+0x650>)
 8004b20:	ec41 0b18 	vmov	d8, r0, r1
 8004b24:	2200      	movs	r2, #0
 8004b26:	4630      	mov	r0, r6
 8004b28:	4639      	mov	r1, r7
 8004b2a:	f7fb fd75 	bl	8000618 <__aeabi_dmul>
 8004b2e:	4606      	mov	r6, r0
 8004b30:	460f      	mov	r7, r1
 8004b32:	e7c4      	b.n	8004abe <_dtoa_r+0x53e>
 8004b34:	ec51 0b17 	vmov	r0, r1, d7
 8004b38:	f7fb fd6e 	bl	8000618 <__aeabi_dmul>
 8004b3c:	9b02      	ldr	r3, [sp, #8]
 8004b3e:	9d00      	ldr	r5, [sp, #0]
 8004b40:	930c      	str	r3, [sp, #48]	; 0x30
 8004b42:	ec41 0b18 	vmov	d8, r0, r1
 8004b46:	4639      	mov	r1, r7
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f7fc f815 	bl	8000b78 <__aeabi_d2iz>
 8004b4e:	9011      	str	r0, [sp, #68]	; 0x44
 8004b50:	f7fb fcf8 	bl	8000544 <__aeabi_i2d>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	f7fb fba4 	bl	80002a8 <__aeabi_dsub>
 8004b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b62:	3330      	adds	r3, #48	; 0x30
 8004b64:	f805 3b01 	strb.w	r3, [r5], #1
 8004b68:	9b02      	ldr	r3, [sp, #8]
 8004b6a:	429d      	cmp	r5, r3
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	460f      	mov	r7, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	d134      	bne.n	8004be0 <_dtoa_r+0x660>
 8004b76:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <_dtoa_r+0x65c>)
 8004b78:	ec51 0b18 	vmov	r0, r1, d8
 8004b7c:	f7fb fb96 	bl	80002ac <__adddf3>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4630      	mov	r0, r6
 8004b86:	4639      	mov	r1, r7
 8004b88:	f7fb ffd6 	bl	8000b38 <__aeabi_dcmpgt>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d175      	bne.n	8004c7c <_dtoa_r+0x6fc>
 8004b90:	ec53 2b18 	vmov	r2, r3, d8
 8004b94:	4911      	ldr	r1, [pc, #68]	; (8004bdc <_dtoa_r+0x65c>)
 8004b96:	2000      	movs	r0, #0
 8004b98:	f7fb fb86 	bl	80002a8 <__aeabi_dsub>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb ffaa 	bl	8000afc <__aeabi_dcmplt>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	f43f af27 	beq.w	80049fc <_dtoa_r+0x47c>
 8004bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb0:	1e6b      	subs	r3, r5, #1
 8004bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8004bb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004bb8:	2b30      	cmp	r3, #48	; 0x30
 8004bba:	d0f8      	beq.n	8004bae <_dtoa_r+0x62e>
 8004bbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004bc0:	e04a      	b.n	8004c58 <_dtoa_r+0x6d8>
 8004bc2:	bf00      	nop
 8004bc4:	08006a20 	.word	0x08006a20
 8004bc8:	080069f8 	.word	0x080069f8
 8004bcc:	3ff00000 	.word	0x3ff00000
 8004bd0:	40240000 	.word	0x40240000
 8004bd4:	401c0000 	.word	0x401c0000
 8004bd8:	40140000 	.word	0x40140000
 8004bdc:	3fe00000 	.word	0x3fe00000
 8004be0:	4baf      	ldr	r3, [pc, #700]	; (8004ea0 <_dtoa_r+0x920>)
 8004be2:	f7fb fd19 	bl	8000618 <__aeabi_dmul>
 8004be6:	4606      	mov	r6, r0
 8004be8:	460f      	mov	r7, r1
 8004bea:	e7ac      	b.n	8004b46 <_dtoa_r+0x5c6>
 8004bec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bf0:	9d00      	ldr	r5, [sp, #0]
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	464b      	mov	r3, r9
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	4639      	mov	r1, r7
 8004bfa:	f7fb fe37 	bl	800086c <__aeabi_ddiv>
 8004bfe:	f7fb ffbb 	bl	8000b78 <__aeabi_d2iz>
 8004c02:	9002      	str	r0, [sp, #8]
 8004c04:	f7fb fc9e 	bl	8000544 <__aeabi_i2d>
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	f7fb fd04 	bl	8000618 <__aeabi_dmul>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4630      	mov	r0, r6
 8004c16:	4639      	mov	r1, r7
 8004c18:	f7fb fb46 	bl	80002a8 <__aeabi_dsub>
 8004c1c:	9e02      	ldr	r6, [sp, #8]
 8004c1e:	9f01      	ldr	r7, [sp, #4]
 8004c20:	3630      	adds	r6, #48	; 0x30
 8004c22:	f805 6b01 	strb.w	r6, [r5], #1
 8004c26:	9e00      	ldr	r6, [sp, #0]
 8004c28:	1bae      	subs	r6, r5, r6
 8004c2a:	42b7      	cmp	r7, r6
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	d137      	bne.n	8004ca2 <_dtoa_r+0x722>
 8004c32:	f7fb fb3b 	bl	80002ac <__adddf3>
 8004c36:	4642      	mov	r2, r8
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	f7fb ff7b 	bl	8000b38 <__aeabi_dcmpgt>
 8004c42:	b9c8      	cbnz	r0, 8004c78 <_dtoa_r+0x6f8>
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	4630      	mov	r0, r6
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c50:	b110      	cbz	r0, 8004c58 <_dtoa_r+0x6d8>
 8004c52:	9b02      	ldr	r3, [sp, #8]
 8004c54:	07d9      	lsls	r1, r3, #31
 8004c56:	d40f      	bmi.n	8004c78 <_dtoa_r+0x6f8>
 8004c58:	4620      	mov	r0, r4
 8004c5a:	4659      	mov	r1, fp
 8004c5c:	f000 fad6 	bl	800520c <_Bfree>
 8004c60:	2300      	movs	r3, #0
 8004c62:	702b      	strb	r3, [r5, #0]
 8004c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c66:	f10a 0001 	add.w	r0, sl, #1
 8004c6a:	6018      	str	r0, [r3, #0]
 8004c6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f43f acd8 	beq.w	8004624 <_dtoa_r+0xa4>
 8004c74:	601d      	str	r5, [r3, #0]
 8004c76:	e4d5      	b.n	8004624 <_dtoa_r+0xa4>
 8004c78:	f8cd a01c 	str.w	sl, [sp, #28]
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	461d      	mov	r5, r3
 8004c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c84:	2a39      	cmp	r2, #57	; 0x39
 8004c86:	d108      	bne.n	8004c9a <_dtoa_r+0x71a>
 8004c88:	9a00      	ldr	r2, [sp, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d1f7      	bne.n	8004c7e <_dtoa_r+0x6fe>
 8004c8e:	9a07      	ldr	r2, [sp, #28]
 8004c90:	9900      	ldr	r1, [sp, #0]
 8004c92:	3201      	adds	r2, #1
 8004c94:	9207      	str	r2, [sp, #28]
 8004c96:	2230      	movs	r2, #48	; 0x30
 8004c98:	700a      	strb	r2, [r1, #0]
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	3201      	adds	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e78c      	b.n	8004bbc <_dtoa_r+0x63c>
 8004ca2:	4b7f      	ldr	r3, [pc, #508]	; (8004ea0 <_dtoa_r+0x920>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f7fb fcb7 	bl	8000618 <__aeabi_dmul>
 8004caa:	2200      	movs	r2, #0
 8004cac:	2300      	movs	r3, #0
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460f      	mov	r7, r1
 8004cb2:	f7fb ff19 	bl	8000ae8 <__aeabi_dcmpeq>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d09b      	beq.n	8004bf2 <_dtoa_r+0x672>
 8004cba:	e7cd      	b.n	8004c58 <_dtoa_r+0x6d8>
 8004cbc:	9a08      	ldr	r2, [sp, #32]
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	f000 80c4 	beq.w	8004e4c <_dtoa_r+0x8cc>
 8004cc4:	9a05      	ldr	r2, [sp, #20]
 8004cc6:	2a01      	cmp	r2, #1
 8004cc8:	f300 80a8 	bgt.w	8004e1c <_dtoa_r+0x89c>
 8004ccc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	f000 80a0 	beq.w	8004e14 <_dtoa_r+0x894>
 8004cd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004cd8:	9e06      	ldr	r6, [sp, #24]
 8004cda:	4645      	mov	r5, r8
 8004cdc:	9a04      	ldr	r2, [sp, #16]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	441a      	add	r2, r3
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4498      	add	r8, r3
 8004ce6:	9204      	str	r2, [sp, #16]
 8004ce8:	f000 fb4c 	bl	8005384 <__i2b>
 8004cec:	4607      	mov	r7, r0
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	dd0b      	ble.n	8004d0a <_dtoa_r+0x78a>
 8004cf2:	9b04      	ldr	r3, [sp, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	dd08      	ble.n	8004d0a <_dtoa_r+0x78a>
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	9a04      	ldr	r2, [sp, #16]
 8004cfc:	bfa8      	it	ge
 8004cfe:	462b      	movge	r3, r5
 8004d00:	eba8 0803 	sub.w	r8, r8, r3
 8004d04:	1aed      	subs	r5, r5, r3
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	9304      	str	r3, [sp, #16]
 8004d0a:	9b06      	ldr	r3, [sp, #24]
 8004d0c:	b1fb      	cbz	r3, 8004d4e <_dtoa_r+0x7ce>
 8004d0e:	9b08      	ldr	r3, [sp, #32]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 809f 	beq.w	8004e54 <_dtoa_r+0x8d4>
 8004d16:	2e00      	cmp	r6, #0
 8004d18:	dd11      	ble.n	8004d3e <_dtoa_r+0x7be>
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	4632      	mov	r2, r6
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f000 fbec 	bl	80054fc <__pow5mult>
 8004d24:	465a      	mov	r2, fp
 8004d26:	4601      	mov	r1, r0
 8004d28:	4607      	mov	r7, r0
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f000 fb40 	bl	80053b0 <__multiply>
 8004d30:	4659      	mov	r1, fp
 8004d32:	9007      	str	r0, [sp, #28]
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 fa69 	bl	800520c <_Bfree>
 8004d3a:	9b07      	ldr	r3, [sp, #28]
 8004d3c:	469b      	mov	fp, r3
 8004d3e:	9b06      	ldr	r3, [sp, #24]
 8004d40:	1b9a      	subs	r2, r3, r6
 8004d42:	d004      	beq.n	8004d4e <_dtoa_r+0x7ce>
 8004d44:	4659      	mov	r1, fp
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 fbd8 	bl	80054fc <__pow5mult>
 8004d4c:	4683      	mov	fp, r0
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fb17 	bl	8005384 <__i2b>
 8004d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	dd7c      	ble.n	8004e58 <_dtoa_r+0x8d8>
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4601      	mov	r1, r0
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 fbca 	bl	80054fc <__pow5mult>
 8004d68:	9b05      	ldr	r3, [sp, #20]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	dd76      	ble.n	8004e5e <_dtoa_r+0x8de>
 8004d70:	2300      	movs	r3, #0
 8004d72:	9306      	str	r3, [sp, #24]
 8004d74:	6933      	ldr	r3, [r6, #16]
 8004d76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004d7a:	6918      	ldr	r0, [r3, #16]
 8004d7c:	f000 fab2 	bl	80052e4 <__hi0bits>
 8004d80:	f1c0 0020 	rsb	r0, r0, #32
 8004d84:	9b04      	ldr	r3, [sp, #16]
 8004d86:	4418      	add	r0, r3
 8004d88:	f010 001f 	ands.w	r0, r0, #31
 8004d8c:	f000 8086 	beq.w	8004e9c <_dtoa_r+0x91c>
 8004d90:	f1c0 0320 	rsb	r3, r0, #32
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	dd7f      	ble.n	8004e98 <_dtoa_r+0x918>
 8004d98:	f1c0 001c 	rsb	r0, r0, #28
 8004d9c:	9b04      	ldr	r3, [sp, #16]
 8004d9e:	4403      	add	r3, r0
 8004da0:	4480      	add	r8, r0
 8004da2:	4405      	add	r5, r0
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	f1b8 0f00 	cmp.w	r8, #0
 8004daa:	dd05      	ble.n	8004db8 <_dtoa_r+0x838>
 8004dac:	4659      	mov	r1, fp
 8004dae:	4642      	mov	r2, r8
 8004db0:	4620      	mov	r0, r4
 8004db2:	f000 fbfd 	bl	80055b0 <__lshift>
 8004db6:	4683      	mov	fp, r0
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dd05      	ble.n	8004dca <_dtoa_r+0x84a>
 8004dbe:	4631      	mov	r1, r6
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f000 fbf4 	bl	80055b0 <__lshift>
 8004dc8:	4606      	mov	r6, r0
 8004dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d069      	beq.n	8004ea4 <_dtoa_r+0x924>
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4658      	mov	r0, fp
 8004dd4:	f000 fc58 	bl	8005688 <__mcmp>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	da63      	bge.n	8004ea4 <_dtoa_r+0x924>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4659      	mov	r1, fp
 8004de0:	220a      	movs	r2, #10
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 fa34 	bl	8005250 <__multadd>
 8004de8:	9b08      	ldr	r3, [sp, #32]
 8004dea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004dee:	4683      	mov	fp, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 818f 	beq.w	8005114 <_dtoa_r+0xb94>
 8004df6:	4639      	mov	r1, r7
 8004df8:	2300      	movs	r3, #0
 8004dfa:	220a      	movs	r2, #10
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 fa27 	bl	8005250 <__multadd>
 8004e02:	f1b9 0f00 	cmp.w	r9, #0
 8004e06:	4607      	mov	r7, r0
 8004e08:	f300 808e 	bgt.w	8004f28 <_dtoa_r+0x9a8>
 8004e0c:	9b05      	ldr	r3, [sp, #20]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	dc50      	bgt.n	8004eb4 <_dtoa_r+0x934>
 8004e12:	e089      	b.n	8004f28 <_dtoa_r+0x9a8>
 8004e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e1a:	e75d      	b.n	8004cd8 <_dtoa_r+0x758>
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	1e5e      	subs	r6, r3, #1
 8004e20:	9b06      	ldr	r3, [sp, #24]
 8004e22:	42b3      	cmp	r3, r6
 8004e24:	bfbf      	itttt	lt
 8004e26:	9b06      	ldrlt	r3, [sp, #24]
 8004e28:	9606      	strlt	r6, [sp, #24]
 8004e2a:	1af2      	sublt	r2, r6, r3
 8004e2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004e2e:	bfb6      	itet	lt
 8004e30:	189b      	addlt	r3, r3, r2
 8004e32:	1b9e      	subge	r6, r3, r6
 8004e34:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004e36:	9b01      	ldr	r3, [sp, #4]
 8004e38:	bfb8      	it	lt
 8004e3a:	2600      	movlt	r6, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	bfb5      	itete	lt
 8004e40:	eba8 0503 	sublt.w	r5, r8, r3
 8004e44:	9b01      	ldrge	r3, [sp, #4]
 8004e46:	2300      	movlt	r3, #0
 8004e48:	4645      	movge	r5, r8
 8004e4a:	e747      	b.n	8004cdc <_dtoa_r+0x75c>
 8004e4c:	9e06      	ldr	r6, [sp, #24]
 8004e4e:	9f08      	ldr	r7, [sp, #32]
 8004e50:	4645      	mov	r5, r8
 8004e52:	e74c      	b.n	8004cee <_dtoa_r+0x76e>
 8004e54:	9a06      	ldr	r2, [sp, #24]
 8004e56:	e775      	b.n	8004d44 <_dtoa_r+0x7c4>
 8004e58:	9b05      	ldr	r3, [sp, #20]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	dc18      	bgt.n	8004e90 <_dtoa_r+0x910>
 8004e5e:	9b02      	ldr	r3, [sp, #8]
 8004e60:	b9b3      	cbnz	r3, 8004e90 <_dtoa_r+0x910>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e68:	b9a3      	cbnz	r3, 8004e94 <_dtoa_r+0x914>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	0d1b      	lsrs	r3, r3, #20
 8004e72:	051b      	lsls	r3, r3, #20
 8004e74:	b12b      	cbz	r3, 8004e82 <_dtoa_r+0x902>
 8004e76:	9b04      	ldr	r3, [sp, #16]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	f108 0801 	add.w	r8, r8, #1
 8004e80:	2301      	movs	r3, #1
 8004e82:	9306      	str	r3, [sp, #24]
 8004e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f47f af74 	bne.w	8004d74 <_dtoa_r+0x7f4>
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	e779      	b.n	8004d84 <_dtoa_r+0x804>
 8004e90:	2300      	movs	r3, #0
 8004e92:	e7f6      	b.n	8004e82 <_dtoa_r+0x902>
 8004e94:	9b02      	ldr	r3, [sp, #8]
 8004e96:	e7f4      	b.n	8004e82 <_dtoa_r+0x902>
 8004e98:	d085      	beq.n	8004da6 <_dtoa_r+0x826>
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	301c      	adds	r0, #28
 8004e9e:	e77d      	b.n	8004d9c <_dtoa_r+0x81c>
 8004ea0:	40240000 	.word	0x40240000
 8004ea4:	9b01      	ldr	r3, [sp, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dc38      	bgt.n	8004f1c <_dtoa_r+0x99c>
 8004eaa:	9b05      	ldr	r3, [sp, #20]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	dd35      	ble.n	8004f1c <_dtoa_r+0x99c>
 8004eb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004eb4:	f1b9 0f00 	cmp.w	r9, #0
 8004eb8:	d10d      	bne.n	8004ed6 <_dtoa_r+0x956>
 8004eba:	4631      	mov	r1, r6
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	2205      	movs	r2, #5
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f9c5 	bl	8005250 <__multadd>
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	4606      	mov	r6, r0
 8004eca:	4658      	mov	r0, fp
 8004ecc:	f000 fbdc 	bl	8005688 <__mcmp>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	f73f adbd 	bgt.w	8004a50 <_dtoa_r+0x4d0>
 8004ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed8:	9d00      	ldr	r5, [sp, #0]
 8004eda:	ea6f 0a03 	mvn.w	sl, r3
 8004ede:	f04f 0800 	mov.w	r8, #0
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 f991 	bl	800520c <_Bfree>
 8004eea:	2f00      	cmp	r7, #0
 8004eec:	f43f aeb4 	beq.w	8004c58 <_dtoa_r+0x6d8>
 8004ef0:	f1b8 0f00 	cmp.w	r8, #0
 8004ef4:	d005      	beq.n	8004f02 <_dtoa_r+0x982>
 8004ef6:	45b8      	cmp	r8, r7
 8004ef8:	d003      	beq.n	8004f02 <_dtoa_r+0x982>
 8004efa:	4641      	mov	r1, r8
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f985 	bl	800520c <_Bfree>
 8004f02:	4639      	mov	r1, r7
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f981 	bl	800520c <_Bfree>
 8004f0a:	e6a5      	b.n	8004c58 <_dtoa_r+0x6d8>
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	4637      	mov	r7, r6
 8004f10:	e7e1      	b.n	8004ed6 <_dtoa_r+0x956>
 8004f12:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004f18:	4637      	mov	r7, r6
 8004f1a:	e599      	b.n	8004a50 <_dtoa_r+0x4d0>
 8004f1c:	9b08      	ldr	r3, [sp, #32]
 8004f1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80fd 	beq.w	8005122 <_dtoa_r+0xba2>
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	dd05      	ble.n	8004f38 <_dtoa_r+0x9b8>
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fb3d 	bl	80055b0 <__lshift>
 8004f36:	4607      	mov	r7, r0
 8004f38:	9b06      	ldr	r3, [sp, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d05c      	beq.n	8004ff8 <_dtoa_r+0xa78>
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 f923 	bl	800518c <_Balloc>
 8004f46:	4605      	mov	r5, r0
 8004f48:	b928      	cbnz	r0, 8004f56 <_dtoa_r+0x9d6>
 8004f4a:	4b80      	ldr	r3, [pc, #512]	; (800514c <_dtoa_r+0xbcc>)
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004f52:	f7ff bb2e 	b.w	80045b2 <_dtoa_r+0x32>
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	3202      	adds	r2, #2
 8004f5a:	0092      	lsls	r2, r2, #2
 8004f5c:	f107 010c 	add.w	r1, r7, #12
 8004f60:	300c      	adds	r0, #12
 8004f62:	f000 f905 	bl	8005170 <memcpy>
 8004f66:	2201      	movs	r2, #1
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 fb20 	bl	80055b0 <__lshift>
 8004f70:	9b00      	ldr	r3, [sp, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	9301      	str	r3, [sp, #4]
 8004f76:	9b00      	ldr	r3, [sp, #0]
 8004f78:	444b      	add	r3, r9
 8004f7a:	9307      	str	r3, [sp, #28]
 8004f7c:	9b02      	ldr	r3, [sp, #8]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	46b8      	mov	r8, r7
 8004f84:	9306      	str	r3, [sp, #24]
 8004f86:	4607      	mov	r7, r0
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	4658      	mov	r0, fp
 8004f90:	9302      	str	r3, [sp, #8]
 8004f92:	f7ff fa67 	bl	8004464 <quorem>
 8004f96:	4603      	mov	r3, r0
 8004f98:	3330      	adds	r3, #48	; 0x30
 8004f9a:	9004      	str	r0, [sp, #16]
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	4658      	mov	r0, fp
 8004fa0:	9308      	str	r3, [sp, #32]
 8004fa2:	f000 fb71 	bl	8005688 <__mcmp>
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	4681      	mov	r9, r0
 8004faa:	4631      	mov	r1, r6
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 fb87 	bl	80056c0 <__mdiff>
 8004fb2:	68c2      	ldr	r2, [r0, #12]
 8004fb4:	9b08      	ldr	r3, [sp, #32]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	bb02      	cbnz	r2, 8004ffc <_dtoa_r+0xa7c>
 8004fba:	4601      	mov	r1, r0
 8004fbc:	4658      	mov	r0, fp
 8004fbe:	f000 fb63 	bl	8005688 <__mcmp>
 8004fc2:	9b08      	ldr	r3, [sp, #32]
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4620      	mov	r0, r4
 8004fca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004fce:	f000 f91d 	bl	800520c <_Bfree>
 8004fd2:	9b05      	ldr	r3, [sp, #20]
 8004fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd6:	9d01      	ldr	r5, [sp, #4]
 8004fd8:	ea43 0102 	orr.w	r1, r3, r2
 8004fdc:	9b06      	ldr	r3, [sp, #24]
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	d10d      	bne.n	8005000 <_dtoa_r+0xa80>
 8004fe4:	2b39      	cmp	r3, #57	; 0x39
 8004fe6:	d029      	beq.n	800503c <_dtoa_r+0xabc>
 8004fe8:	f1b9 0f00 	cmp.w	r9, #0
 8004fec:	dd01      	ble.n	8004ff2 <_dtoa_r+0xa72>
 8004fee:	9b04      	ldr	r3, [sp, #16]
 8004ff0:	3331      	adds	r3, #49	; 0x31
 8004ff2:	9a02      	ldr	r2, [sp, #8]
 8004ff4:	7013      	strb	r3, [r2, #0]
 8004ff6:	e774      	b.n	8004ee2 <_dtoa_r+0x962>
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	e7b9      	b.n	8004f70 <_dtoa_r+0x9f0>
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	e7e2      	b.n	8004fc6 <_dtoa_r+0xa46>
 8005000:	f1b9 0f00 	cmp.w	r9, #0
 8005004:	db06      	blt.n	8005014 <_dtoa_r+0xa94>
 8005006:	9905      	ldr	r1, [sp, #20]
 8005008:	ea41 0909 	orr.w	r9, r1, r9
 800500c:	9906      	ldr	r1, [sp, #24]
 800500e:	ea59 0101 	orrs.w	r1, r9, r1
 8005012:	d120      	bne.n	8005056 <_dtoa_r+0xad6>
 8005014:	2a00      	cmp	r2, #0
 8005016:	ddec      	ble.n	8004ff2 <_dtoa_r+0xa72>
 8005018:	4659      	mov	r1, fp
 800501a:	2201      	movs	r2, #1
 800501c:	4620      	mov	r0, r4
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	f000 fac6 	bl	80055b0 <__lshift>
 8005024:	4631      	mov	r1, r6
 8005026:	4683      	mov	fp, r0
 8005028:	f000 fb2e 	bl	8005688 <__mcmp>
 800502c:	2800      	cmp	r0, #0
 800502e:	9b01      	ldr	r3, [sp, #4]
 8005030:	dc02      	bgt.n	8005038 <_dtoa_r+0xab8>
 8005032:	d1de      	bne.n	8004ff2 <_dtoa_r+0xa72>
 8005034:	07da      	lsls	r2, r3, #31
 8005036:	d5dc      	bpl.n	8004ff2 <_dtoa_r+0xa72>
 8005038:	2b39      	cmp	r3, #57	; 0x39
 800503a:	d1d8      	bne.n	8004fee <_dtoa_r+0xa6e>
 800503c:	9a02      	ldr	r2, [sp, #8]
 800503e:	2339      	movs	r3, #57	; 0x39
 8005040:	7013      	strb	r3, [r2, #0]
 8005042:	462b      	mov	r3, r5
 8005044:	461d      	mov	r5, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800504c:	2a39      	cmp	r2, #57	; 0x39
 800504e:	d050      	beq.n	80050f2 <_dtoa_r+0xb72>
 8005050:	3201      	adds	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e745      	b.n	8004ee2 <_dtoa_r+0x962>
 8005056:	2a00      	cmp	r2, #0
 8005058:	dd03      	ble.n	8005062 <_dtoa_r+0xae2>
 800505a:	2b39      	cmp	r3, #57	; 0x39
 800505c:	d0ee      	beq.n	800503c <_dtoa_r+0xabc>
 800505e:	3301      	adds	r3, #1
 8005060:	e7c7      	b.n	8004ff2 <_dtoa_r+0xa72>
 8005062:	9a01      	ldr	r2, [sp, #4]
 8005064:	9907      	ldr	r1, [sp, #28]
 8005066:	f802 3c01 	strb.w	r3, [r2, #-1]
 800506a:	428a      	cmp	r2, r1
 800506c:	d02a      	beq.n	80050c4 <_dtoa_r+0xb44>
 800506e:	4659      	mov	r1, fp
 8005070:	2300      	movs	r3, #0
 8005072:	220a      	movs	r2, #10
 8005074:	4620      	mov	r0, r4
 8005076:	f000 f8eb 	bl	8005250 <__multadd>
 800507a:	45b8      	cmp	r8, r7
 800507c:	4683      	mov	fp, r0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	f04f 020a 	mov.w	r2, #10
 8005086:	4641      	mov	r1, r8
 8005088:	4620      	mov	r0, r4
 800508a:	d107      	bne.n	800509c <_dtoa_r+0xb1c>
 800508c:	f000 f8e0 	bl	8005250 <__multadd>
 8005090:	4680      	mov	r8, r0
 8005092:	4607      	mov	r7, r0
 8005094:	9b01      	ldr	r3, [sp, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	e775      	b.n	8004f88 <_dtoa_r+0xa08>
 800509c:	f000 f8d8 	bl	8005250 <__multadd>
 80050a0:	4639      	mov	r1, r7
 80050a2:	4680      	mov	r8, r0
 80050a4:	2300      	movs	r3, #0
 80050a6:	220a      	movs	r2, #10
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f8d1 	bl	8005250 <__multadd>
 80050ae:	4607      	mov	r7, r0
 80050b0:	e7f0      	b.n	8005094 <_dtoa_r+0xb14>
 80050b2:	f1b9 0f00 	cmp.w	r9, #0
 80050b6:	9a00      	ldr	r2, [sp, #0]
 80050b8:	bfcc      	ite	gt
 80050ba:	464d      	movgt	r5, r9
 80050bc:	2501      	movle	r5, #1
 80050be:	4415      	add	r5, r2
 80050c0:	f04f 0800 	mov.w	r8, #0
 80050c4:	4659      	mov	r1, fp
 80050c6:	2201      	movs	r2, #1
 80050c8:	4620      	mov	r0, r4
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f000 fa70 	bl	80055b0 <__lshift>
 80050d0:	4631      	mov	r1, r6
 80050d2:	4683      	mov	fp, r0
 80050d4:	f000 fad8 	bl	8005688 <__mcmp>
 80050d8:	2800      	cmp	r0, #0
 80050da:	dcb2      	bgt.n	8005042 <_dtoa_r+0xac2>
 80050dc:	d102      	bne.n	80050e4 <_dtoa_r+0xb64>
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	07db      	lsls	r3, r3, #31
 80050e2:	d4ae      	bmi.n	8005042 <_dtoa_r+0xac2>
 80050e4:	462b      	mov	r3, r5
 80050e6:	461d      	mov	r5, r3
 80050e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050ec:	2a30      	cmp	r2, #48	; 0x30
 80050ee:	d0fa      	beq.n	80050e6 <_dtoa_r+0xb66>
 80050f0:	e6f7      	b.n	8004ee2 <_dtoa_r+0x962>
 80050f2:	9a00      	ldr	r2, [sp, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1a5      	bne.n	8005044 <_dtoa_r+0xac4>
 80050f8:	f10a 0a01 	add.w	sl, sl, #1
 80050fc:	2331      	movs	r3, #49	; 0x31
 80050fe:	e779      	b.n	8004ff4 <_dtoa_r+0xa74>
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <_dtoa_r+0xbd0>)
 8005102:	f7ff baaf 	b.w	8004664 <_dtoa_r+0xe4>
 8005106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005108:	2b00      	cmp	r3, #0
 800510a:	f47f aa86 	bne.w	800461a <_dtoa_r+0x9a>
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <_dtoa_r+0xbd4>)
 8005110:	f7ff baa8 	b.w	8004664 <_dtoa_r+0xe4>
 8005114:	f1b9 0f00 	cmp.w	r9, #0
 8005118:	dc03      	bgt.n	8005122 <_dtoa_r+0xba2>
 800511a:	9b05      	ldr	r3, [sp, #20]
 800511c:	2b02      	cmp	r3, #2
 800511e:	f73f aec9 	bgt.w	8004eb4 <_dtoa_r+0x934>
 8005122:	9d00      	ldr	r5, [sp, #0]
 8005124:	4631      	mov	r1, r6
 8005126:	4658      	mov	r0, fp
 8005128:	f7ff f99c 	bl	8004464 <quorem>
 800512c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005130:	f805 3b01 	strb.w	r3, [r5], #1
 8005134:	9a00      	ldr	r2, [sp, #0]
 8005136:	1aaa      	subs	r2, r5, r2
 8005138:	4591      	cmp	r9, r2
 800513a:	ddba      	ble.n	80050b2 <_dtoa_r+0xb32>
 800513c:	4659      	mov	r1, fp
 800513e:	2300      	movs	r3, #0
 8005140:	220a      	movs	r2, #10
 8005142:	4620      	mov	r0, r4
 8005144:	f000 f884 	bl	8005250 <__multadd>
 8005148:	4683      	mov	fp, r0
 800514a:	e7eb      	b.n	8005124 <_dtoa_r+0xba4>
 800514c:	08006983 	.word	0x08006983
 8005150:	080068dc 	.word	0x080068dc
 8005154:	08006900 	.word	0x08006900

08005158 <_localeconv_r>:
 8005158:	4800      	ldr	r0, [pc, #0]	; (800515c <_localeconv_r+0x4>)
 800515a:	4770      	bx	lr
 800515c:	20000160 	.word	0x20000160

08005160 <malloc>:
 8005160:	4b02      	ldr	r3, [pc, #8]	; (800516c <malloc+0xc>)
 8005162:	4601      	mov	r1, r0
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	f000 bbef 	b.w	8005948 <_malloc_r>
 800516a:	bf00      	nop
 800516c:	2000000c 	.word	0x2000000c

08005170 <memcpy>:
 8005170:	440a      	add	r2, r1
 8005172:	4291      	cmp	r1, r2
 8005174:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005178:	d100      	bne.n	800517c <memcpy+0xc>
 800517a:	4770      	bx	lr
 800517c:	b510      	push	{r4, lr}
 800517e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005186:	4291      	cmp	r1, r2
 8005188:	d1f9      	bne.n	800517e <memcpy+0xe>
 800518a:	bd10      	pop	{r4, pc}

0800518c <_Balloc>:
 800518c:	b570      	push	{r4, r5, r6, lr}
 800518e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005190:	4604      	mov	r4, r0
 8005192:	460d      	mov	r5, r1
 8005194:	b976      	cbnz	r6, 80051b4 <_Balloc+0x28>
 8005196:	2010      	movs	r0, #16
 8005198:	f7ff ffe2 	bl	8005160 <malloc>
 800519c:	4602      	mov	r2, r0
 800519e:	6260      	str	r0, [r4, #36]	; 0x24
 80051a0:	b920      	cbnz	r0, 80051ac <_Balloc+0x20>
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <_Balloc+0x78>)
 80051a4:	4818      	ldr	r0, [pc, #96]	; (8005208 <_Balloc+0x7c>)
 80051a6:	2166      	movs	r1, #102	; 0x66
 80051a8:	f000 fd94 	bl	8005cd4 <__assert_func>
 80051ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051b0:	6006      	str	r6, [r0, #0]
 80051b2:	60c6      	str	r6, [r0, #12]
 80051b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051b6:	68f3      	ldr	r3, [r6, #12]
 80051b8:	b183      	cbz	r3, 80051dc <_Balloc+0x50>
 80051ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051c2:	b9b8      	cbnz	r0, 80051f4 <_Balloc+0x68>
 80051c4:	2101      	movs	r1, #1
 80051c6:	fa01 f605 	lsl.w	r6, r1, r5
 80051ca:	1d72      	adds	r2, r6, #5
 80051cc:	0092      	lsls	r2, r2, #2
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fb5a 	bl	8005888 <_calloc_r>
 80051d4:	b160      	cbz	r0, 80051f0 <_Balloc+0x64>
 80051d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051da:	e00e      	b.n	80051fa <_Balloc+0x6e>
 80051dc:	2221      	movs	r2, #33	; 0x21
 80051de:	2104      	movs	r1, #4
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 fb51 	bl	8005888 <_calloc_r>
 80051e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e8:	60f0      	str	r0, [r6, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e4      	bne.n	80051ba <_Balloc+0x2e>
 80051f0:	2000      	movs	r0, #0
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	6802      	ldr	r2, [r0, #0]
 80051f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051fa:	2300      	movs	r3, #0
 80051fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005200:	e7f7      	b.n	80051f2 <_Balloc+0x66>
 8005202:	bf00      	nop
 8005204:	0800690d 	.word	0x0800690d
 8005208:	08006994 	.word	0x08006994

0800520c <_Bfree>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005210:	4605      	mov	r5, r0
 8005212:	460c      	mov	r4, r1
 8005214:	b976      	cbnz	r6, 8005234 <_Bfree+0x28>
 8005216:	2010      	movs	r0, #16
 8005218:	f7ff ffa2 	bl	8005160 <malloc>
 800521c:	4602      	mov	r2, r0
 800521e:	6268      	str	r0, [r5, #36]	; 0x24
 8005220:	b920      	cbnz	r0, 800522c <_Bfree+0x20>
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <_Bfree+0x3c>)
 8005224:	4809      	ldr	r0, [pc, #36]	; (800524c <_Bfree+0x40>)
 8005226:	218a      	movs	r1, #138	; 0x8a
 8005228:	f000 fd54 	bl	8005cd4 <__assert_func>
 800522c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005230:	6006      	str	r6, [r0, #0]
 8005232:	60c6      	str	r6, [r0, #12]
 8005234:	b13c      	cbz	r4, 8005246 <_Bfree+0x3a>
 8005236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005238:	6862      	ldr	r2, [r4, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005240:	6021      	str	r1, [r4, #0]
 8005242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	0800690d 	.word	0x0800690d
 800524c:	08006994 	.word	0x08006994

08005250 <__multadd>:
 8005250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005254:	690e      	ldr	r6, [r1, #16]
 8005256:	4607      	mov	r7, r0
 8005258:	4698      	mov	r8, r3
 800525a:	460c      	mov	r4, r1
 800525c:	f101 0014 	add.w	r0, r1, #20
 8005260:	2300      	movs	r3, #0
 8005262:	6805      	ldr	r5, [r0, #0]
 8005264:	b2a9      	uxth	r1, r5
 8005266:	fb02 8101 	mla	r1, r2, r1, r8
 800526a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800526e:	0c2d      	lsrs	r5, r5, #16
 8005270:	fb02 c505 	mla	r5, r2, r5, ip
 8005274:	b289      	uxth	r1, r1
 8005276:	3301      	adds	r3, #1
 8005278:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800527c:	429e      	cmp	r6, r3
 800527e:	f840 1b04 	str.w	r1, [r0], #4
 8005282:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005286:	dcec      	bgt.n	8005262 <__multadd+0x12>
 8005288:	f1b8 0f00 	cmp.w	r8, #0
 800528c:	d022      	beq.n	80052d4 <__multadd+0x84>
 800528e:	68a3      	ldr	r3, [r4, #8]
 8005290:	42b3      	cmp	r3, r6
 8005292:	dc19      	bgt.n	80052c8 <__multadd+0x78>
 8005294:	6861      	ldr	r1, [r4, #4]
 8005296:	4638      	mov	r0, r7
 8005298:	3101      	adds	r1, #1
 800529a:	f7ff ff77 	bl	800518c <_Balloc>
 800529e:	4605      	mov	r5, r0
 80052a0:	b928      	cbnz	r0, 80052ae <__multadd+0x5e>
 80052a2:	4602      	mov	r2, r0
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <__multadd+0x8c>)
 80052a6:	480e      	ldr	r0, [pc, #56]	; (80052e0 <__multadd+0x90>)
 80052a8:	21b5      	movs	r1, #181	; 0xb5
 80052aa:	f000 fd13 	bl	8005cd4 <__assert_func>
 80052ae:	6922      	ldr	r2, [r4, #16]
 80052b0:	3202      	adds	r2, #2
 80052b2:	f104 010c 	add.w	r1, r4, #12
 80052b6:	0092      	lsls	r2, r2, #2
 80052b8:	300c      	adds	r0, #12
 80052ba:	f7ff ff59 	bl	8005170 <memcpy>
 80052be:	4621      	mov	r1, r4
 80052c0:	4638      	mov	r0, r7
 80052c2:	f7ff ffa3 	bl	800520c <_Bfree>
 80052c6:	462c      	mov	r4, r5
 80052c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80052cc:	3601      	adds	r6, #1
 80052ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80052d2:	6126      	str	r6, [r4, #16]
 80052d4:	4620      	mov	r0, r4
 80052d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052da:	bf00      	nop
 80052dc:	08006983 	.word	0x08006983
 80052e0:	08006994 	.word	0x08006994

080052e4 <__hi0bits>:
 80052e4:	0c03      	lsrs	r3, r0, #16
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	b9d3      	cbnz	r3, 8005320 <__hi0bits+0x3c>
 80052ea:	0400      	lsls	r0, r0, #16
 80052ec:	2310      	movs	r3, #16
 80052ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80052f2:	bf04      	itt	eq
 80052f4:	0200      	lsleq	r0, r0, #8
 80052f6:	3308      	addeq	r3, #8
 80052f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80052fc:	bf04      	itt	eq
 80052fe:	0100      	lsleq	r0, r0, #4
 8005300:	3304      	addeq	r3, #4
 8005302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005306:	bf04      	itt	eq
 8005308:	0080      	lsleq	r0, r0, #2
 800530a:	3302      	addeq	r3, #2
 800530c:	2800      	cmp	r0, #0
 800530e:	db05      	blt.n	800531c <__hi0bits+0x38>
 8005310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005314:	f103 0301 	add.w	r3, r3, #1
 8005318:	bf08      	it	eq
 800531a:	2320      	moveq	r3, #32
 800531c:	4618      	mov	r0, r3
 800531e:	4770      	bx	lr
 8005320:	2300      	movs	r3, #0
 8005322:	e7e4      	b.n	80052ee <__hi0bits+0xa>

08005324 <__lo0bits>:
 8005324:	6803      	ldr	r3, [r0, #0]
 8005326:	f013 0207 	ands.w	r2, r3, #7
 800532a:	4601      	mov	r1, r0
 800532c:	d00b      	beq.n	8005346 <__lo0bits+0x22>
 800532e:	07da      	lsls	r2, r3, #31
 8005330:	d424      	bmi.n	800537c <__lo0bits+0x58>
 8005332:	0798      	lsls	r0, r3, #30
 8005334:	bf49      	itett	mi
 8005336:	085b      	lsrmi	r3, r3, #1
 8005338:	089b      	lsrpl	r3, r3, #2
 800533a:	2001      	movmi	r0, #1
 800533c:	600b      	strmi	r3, [r1, #0]
 800533e:	bf5c      	itt	pl
 8005340:	600b      	strpl	r3, [r1, #0]
 8005342:	2002      	movpl	r0, #2
 8005344:	4770      	bx	lr
 8005346:	b298      	uxth	r0, r3
 8005348:	b9b0      	cbnz	r0, 8005378 <__lo0bits+0x54>
 800534a:	0c1b      	lsrs	r3, r3, #16
 800534c:	2010      	movs	r0, #16
 800534e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005352:	bf04      	itt	eq
 8005354:	0a1b      	lsreq	r3, r3, #8
 8005356:	3008      	addeq	r0, #8
 8005358:	071a      	lsls	r2, r3, #28
 800535a:	bf04      	itt	eq
 800535c:	091b      	lsreq	r3, r3, #4
 800535e:	3004      	addeq	r0, #4
 8005360:	079a      	lsls	r2, r3, #30
 8005362:	bf04      	itt	eq
 8005364:	089b      	lsreq	r3, r3, #2
 8005366:	3002      	addeq	r0, #2
 8005368:	07da      	lsls	r2, r3, #31
 800536a:	d403      	bmi.n	8005374 <__lo0bits+0x50>
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	f100 0001 	add.w	r0, r0, #1
 8005372:	d005      	beq.n	8005380 <__lo0bits+0x5c>
 8005374:	600b      	str	r3, [r1, #0]
 8005376:	4770      	bx	lr
 8005378:	4610      	mov	r0, r2
 800537a:	e7e8      	b.n	800534e <__lo0bits+0x2a>
 800537c:	2000      	movs	r0, #0
 800537e:	4770      	bx	lr
 8005380:	2020      	movs	r0, #32
 8005382:	4770      	bx	lr

08005384 <__i2b>:
 8005384:	b510      	push	{r4, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	2101      	movs	r1, #1
 800538a:	f7ff feff 	bl	800518c <_Balloc>
 800538e:	4602      	mov	r2, r0
 8005390:	b928      	cbnz	r0, 800539e <__i2b+0x1a>
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <__i2b+0x24>)
 8005394:	4805      	ldr	r0, [pc, #20]	; (80053ac <__i2b+0x28>)
 8005396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800539a:	f000 fc9b 	bl	8005cd4 <__assert_func>
 800539e:	2301      	movs	r3, #1
 80053a0:	6144      	str	r4, [r0, #20]
 80053a2:	6103      	str	r3, [r0, #16]
 80053a4:	bd10      	pop	{r4, pc}
 80053a6:	bf00      	nop
 80053a8:	08006983 	.word	0x08006983
 80053ac:	08006994 	.word	0x08006994

080053b0 <__multiply>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	4614      	mov	r4, r2
 80053b6:	690a      	ldr	r2, [r1, #16]
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bfb8      	it	lt
 80053be:	460b      	movlt	r3, r1
 80053c0:	460d      	mov	r5, r1
 80053c2:	bfbc      	itt	lt
 80053c4:	4625      	movlt	r5, r4
 80053c6:	461c      	movlt	r4, r3
 80053c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80053cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80053d0:	68ab      	ldr	r3, [r5, #8]
 80053d2:	6869      	ldr	r1, [r5, #4]
 80053d4:	eb0a 0709 	add.w	r7, sl, r9
 80053d8:	42bb      	cmp	r3, r7
 80053da:	b085      	sub	sp, #20
 80053dc:	bfb8      	it	lt
 80053de:	3101      	addlt	r1, #1
 80053e0:	f7ff fed4 	bl	800518c <_Balloc>
 80053e4:	b930      	cbnz	r0, 80053f4 <__multiply+0x44>
 80053e6:	4602      	mov	r2, r0
 80053e8:	4b42      	ldr	r3, [pc, #264]	; (80054f4 <__multiply+0x144>)
 80053ea:	4843      	ldr	r0, [pc, #268]	; (80054f8 <__multiply+0x148>)
 80053ec:	f240 115d 	movw	r1, #349	; 0x15d
 80053f0:	f000 fc70 	bl	8005cd4 <__assert_func>
 80053f4:	f100 0614 	add.w	r6, r0, #20
 80053f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80053fc:	4633      	mov	r3, r6
 80053fe:	2200      	movs	r2, #0
 8005400:	4543      	cmp	r3, r8
 8005402:	d31e      	bcc.n	8005442 <__multiply+0x92>
 8005404:	f105 0c14 	add.w	ip, r5, #20
 8005408:	f104 0314 	add.w	r3, r4, #20
 800540c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005410:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	ebac 0205 	sub.w	r2, ip, r5
 800541a:	3a15      	subs	r2, #21
 800541c:	f022 0203 	bic.w	r2, r2, #3
 8005420:	3204      	adds	r2, #4
 8005422:	f105 0115 	add.w	r1, r5, #21
 8005426:	458c      	cmp	ip, r1
 8005428:	bf38      	it	cc
 800542a:	2204      	movcc	r2, #4
 800542c:	9201      	str	r2, [sp, #4]
 800542e:	9a02      	ldr	r2, [sp, #8]
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	429a      	cmp	r2, r3
 8005434:	d808      	bhi.n	8005448 <__multiply+0x98>
 8005436:	2f00      	cmp	r7, #0
 8005438:	dc55      	bgt.n	80054e6 <__multiply+0x136>
 800543a:	6107      	str	r7, [r0, #16]
 800543c:	b005      	add	sp, #20
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005442:	f843 2b04 	str.w	r2, [r3], #4
 8005446:	e7db      	b.n	8005400 <__multiply+0x50>
 8005448:	f8b3 a000 	ldrh.w	sl, [r3]
 800544c:	f1ba 0f00 	cmp.w	sl, #0
 8005450:	d020      	beq.n	8005494 <__multiply+0xe4>
 8005452:	f105 0e14 	add.w	lr, r5, #20
 8005456:	46b1      	mov	r9, r6
 8005458:	2200      	movs	r2, #0
 800545a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800545e:	f8d9 b000 	ldr.w	fp, [r9]
 8005462:	b2a1      	uxth	r1, r4
 8005464:	fa1f fb8b 	uxth.w	fp, fp
 8005468:	fb0a b101 	mla	r1, sl, r1, fp
 800546c:	4411      	add	r1, r2
 800546e:	f8d9 2000 	ldr.w	r2, [r9]
 8005472:	0c24      	lsrs	r4, r4, #16
 8005474:	0c12      	lsrs	r2, r2, #16
 8005476:	fb0a 2404 	mla	r4, sl, r4, r2
 800547a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800547e:	b289      	uxth	r1, r1
 8005480:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005484:	45f4      	cmp	ip, lr
 8005486:	f849 1b04 	str.w	r1, [r9], #4
 800548a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800548e:	d8e4      	bhi.n	800545a <__multiply+0xaa>
 8005490:	9901      	ldr	r1, [sp, #4]
 8005492:	5072      	str	r2, [r6, r1]
 8005494:	9a03      	ldr	r2, [sp, #12]
 8005496:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800549a:	3304      	adds	r3, #4
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	d01f      	beq.n	80054e2 <__multiply+0x132>
 80054a2:	6834      	ldr	r4, [r6, #0]
 80054a4:	f105 0114 	add.w	r1, r5, #20
 80054a8:	46b6      	mov	lr, r6
 80054aa:	f04f 0a00 	mov.w	sl, #0
 80054ae:	880a      	ldrh	r2, [r1, #0]
 80054b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80054b4:	fb09 b202 	mla	r2, r9, r2, fp
 80054b8:	4492      	add	sl, r2
 80054ba:	b2a4      	uxth	r4, r4
 80054bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80054c0:	f84e 4b04 	str.w	r4, [lr], #4
 80054c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80054c8:	f8be 2000 	ldrh.w	r2, [lr]
 80054cc:	0c24      	lsrs	r4, r4, #16
 80054ce:	fb09 2404 	mla	r4, r9, r4, r2
 80054d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80054d6:	458c      	cmp	ip, r1
 80054d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80054dc:	d8e7      	bhi.n	80054ae <__multiply+0xfe>
 80054de:	9a01      	ldr	r2, [sp, #4]
 80054e0:	50b4      	str	r4, [r6, r2]
 80054e2:	3604      	adds	r6, #4
 80054e4:	e7a3      	b.n	800542e <__multiply+0x7e>
 80054e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1a5      	bne.n	800543a <__multiply+0x8a>
 80054ee:	3f01      	subs	r7, #1
 80054f0:	e7a1      	b.n	8005436 <__multiply+0x86>
 80054f2:	bf00      	nop
 80054f4:	08006983 	.word	0x08006983
 80054f8:	08006994 	.word	0x08006994

080054fc <__pow5mult>:
 80054fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	4615      	mov	r5, r2
 8005502:	f012 0203 	ands.w	r2, r2, #3
 8005506:	4606      	mov	r6, r0
 8005508:	460f      	mov	r7, r1
 800550a:	d007      	beq.n	800551c <__pow5mult+0x20>
 800550c:	4c25      	ldr	r4, [pc, #148]	; (80055a4 <__pow5mult+0xa8>)
 800550e:	3a01      	subs	r2, #1
 8005510:	2300      	movs	r3, #0
 8005512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005516:	f7ff fe9b 	bl	8005250 <__multadd>
 800551a:	4607      	mov	r7, r0
 800551c:	10ad      	asrs	r5, r5, #2
 800551e:	d03d      	beq.n	800559c <__pow5mult+0xa0>
 8005520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005522:	b97c      	cbnz	r4, 8005544 <__pow5mult+0x48>
 8005524:	2010      	movs	r0, #16
 8005526:	f7ff fe1b 	bl	8005160 <malloc>
 800552a:	4602      	mov	r2, r0
 800552c:	6270      	str	r0, [r6, #36]	; 0x24
 800552e:	b928      	cbnz	r0, 800553c <__pow5mult+0x40>
 8005530:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <__pow5mult+0xac>)
 8005532:	481e      	ldr	r0, [pc, #120]	; (80055ac <__pow5mult+0xb0>)
 8005534:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005538:	f000 fbcc 	bl	8005cd4 <__assert_func>
 800553c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005540:	6004      	str	r4, [r0, #0]
 8005542:	60c4      	str	r4, [r0, #12]
 8005544:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800554c:	b94c      	cbnz	r4, 8005562 <__pow5mult+0x66>
 800554e:	f240 2171 	movw	r1, #625	; 0x271
 8005552:	4630      	mov	r0, r6
 8005554:	f7ff ff16 	bl	8005384 <__i2b>
 8005558:	2300      	movs	r3, #0
 800555a:	f8c8 0008 	str.w	r0, [r8, #8]
 800555e:	4604      	mov	r4, r0
 8005560:	6003      	str	r3, [r0, #0]
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	07eb      	lsls	r3, r5, #31
 8005568:	d50a      	bpl.n	8005580 <__pow5mult+0x84>
 800556a:	4639      	mov	r1, r7
 800556c:	4622      	mov	r2, r4
 800556e:	4630      	mov	r0, r6
 8005570:	f7ff ff1e 	bl	80053b0 <__multiply>
 8005574:	4639      	mov	r1, r7
 8005576:	4680      	mov	r8, r0
 8005578:	4630      	mov	r0, r6
 800557a:	f7ff fe47 	bl	800520c <_Bfree>
 800557e:	4647      	mov	r7, r8
 8005580:	106d      	asrs	r5, r5, #1
 8005582:	d00b      	beq.n	800559c <__pow5mult+0xa0>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	b938      	cbnz	r0, 8005598 <__pow5mult+0x9c>
 8005588:	4622      	mov	r2, r4
 800558a:	4621      	mov	r1, r4
 800558c:	4630      	mov	r0, r6
 800558e:	f7ff ff0f 	bl	80053b0 <__multiply>
 8005592:	6020      	str	r0, [r4, #0]
 8005594:	f8c0 9000 	str.w	r9, [r0]
 8005598:	4604      	mov	r4, r0
 800559a:	e7e4      	b.n	8005566 <__pow5mult+0x6a>
 800559c:	4638      	mov	r0, r7
 800559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a2:	bf00      	nop
 80055a4:	08006ae8 	.word	0x08006ae8
 80055a8:	0800690d 	.word	0x0800690d
 80055ac:	08006994 	.word	0x08006994

080055b0 <__lshift>:
 80055b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055b4:	460c      	mov	r4, r1
 80055b6:	6849      	ldr	r1, [r1, #4]
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	4607      	mov	r7, r0
 80055c2:	4691      	mov	r9, r2
 80055c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055c8:	f108 0601 	add.w	r6, r8, #1
 80055cc:	42b3      	cmp	r3, r6
 80055ce:	db0b      	blt.n	80055e8 <__lshift+0x38>
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff fddb 	bl	800518c <_Balloc>
 80055d6:	4605      	mov	r5, r0
 80055d8:	b948      	cbnz	r0, 80055ee <__lshift+0x3e>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <__lshift+0xd0>)
 80055de:	4829      	ldr	r0, [pc, #164]	; (8005684 <__lshift+0xd4>)
 80055e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80055e4:	f000 fb76 	bl	8005cd4 <__assert_func>
 80055e8:	3101      	adds	r1, #1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	e7ee      	b.n	80055cc <__lshift+0x1c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f100 0114 	add.w	r1, r0, #20
 80055f4:	f100 0210 	add.w	r2, r0, #16
 80055f8:	4618      	mov	r0, r3
 80055fa:	4553      	cmp	r3, sl
 80055fc:	db33      	blt.n	8005666 <__lshift+0xb6>
 80055fe:	6920      	ldr	r0, [r4, #16]
 8005600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005604:	f104 0314 	add.w	r3, r4, #20
 8005608:	f019 091f 	ands.w	r9, r9, #31
 800560c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005614:	d02b      	beq.n	800566e <__lshift+0xbe>
 8005616:	f1c9 0e20 	rsb	lr, r9, #32
 800561a:	468a      	mov	sl, r1
 800561c:	2200      	movs	r2, #0
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	fa00 f009 	lsl.w	r0, r0, r9
 8005624:	4302      	orrs	r2, r0
 8005626:	f84a 2b04 	str.w	r2, [sl], #4
 800562a:	f853 2b04 	ldr.w	r2, [r3], #4
 800562e:	459c      	cmp	ip, r3
 8005630:	fa22 f20e 	lsr.w	r2, r2, lr
 8005634:	d8f3      	bhi.n	800561e <__lshift+0x6e>
 8005636:	ebac 0304 	sub.w	r3, ip, r4
 800563a:	3b15      	subs	r3, #21
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	3304      	adds	r3, #4
 8005642:	f104 0015 	add.w	r0, r4, #21
 8005646:	4584      	cmp	ip, r0
 8005648:	bf38      	it	cc
 800564a:	2304      	movcc	r3, #4
 800564c:	50ca      	str	r2, [r1, r3]
 800564e:	b10a      	cbz	r2, 8005654 <__lshift+0xa4>
 8005650:	f108 0602 	add.w	r6, r8, #2
 8005654:	3e01      	subs	r6, #1
 8005656:	4638      	mov	r0, r7
 8005658:	612e      	str	r6, [r5, #16]
 800565a:	4621      	mov	r1, r4
 800565c:	f7ff fdd6 	bl	800520c <_Bfree>
 8005660:	4628      	mov	r0, r5
 8005662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005666:	f842 0f04 	str.w	r0, [r2, #4]!
 800566a:	3301      	adds	r3, #1
 800566c:	e7c5      	b.n	80055fa <__lshift+0x4a>
 800566e:	3904      	subs	r1, #4
 8005670:	f853 2b04 	ldr.w	r2, [r3], #4
 8005674:	f841 2f04 	str.w	r2, [r1, #4]!
 8005678:	459c      	cmp	ip, r3
 800567a:	d8f9      	bhi.n	8005670 <__lshift+0xc0>
 800567c:	e7ea      	b.n	8005654 <__lshift+0xa4>
 800567e:	bf00      	nop
 8005680:	08006983 	.word	0x08006983
 8005684:	08006994 	.word	0x08006994

08005688 <__mcmp>:
 8005688:	b530      	push	{r4, r5, lr}
 800568a:	6902      	ldr	r2, [r0, #16]
 800568c:	690c      	ldr	r4, [r1, #16]
 800568e:	1b12      	subs	r2, r2, r4
 8005690:	d10e      	bne.n	80056b0 <__mcmp+0x28>
 8005692:	f100 0314 	add.w	r3, r0, #20
 8005696:	3114      	adds	r1, #20
 8005698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800569c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80056a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80056a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80056a8:	42a5      	cmp	r5, r4
 80056aa:	d003      	beq.n	80056b4 <__mcmp+0x2c>
 80056ac:	d305      	bcc.n	80056ba <__mcmp+0x32>
 80056ae:	2201      	movs	r2, #1
 80056b0:	4610      	mov	r0, r2
 80056b2:	bd30      	pop	{r4, r5, pc}
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d3f3      	bcc.n	80056a0 <__mcmp+0x18>
 80056b8:	e7fa      	b.n	80056b0 <__mcmp+0x28>
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056be:	e7f7      	b.n	80056b0 <__mcmp+0x28>

080056c0 <__mdiff>:
 80056c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	460c      	mov	r4, r1
 80056c6:	4606      	mov	r6, r0
 80056c8:	4611      	mov	r1, r2
 80056ca:	4620      	mov	r0, r4
 80056cc:	4617      	mov	r7, r2
 80056ce:	f7ff ffdb 	bl	8005688 <__mcmp>
 80056d2:	1e05      	subs	r5, r0, #0
 80056d4:	d110      	bne.n	80056f8 <__mdiff+0x38>
 80056d6:	4629      	mov	r1, r5
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff fd57 	bl	800518c <_Balloc>
 80056de:	b930      	cbnz	r0, 80056ee <__mdiff+0x2e>
 80056e0:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <__mdiff+0x108>)
 80056e2:	4602      	mov	r2, r0
 80056e4:	f240 2132 	movw	r1, #562	; 0x232
 80056e8:	4838      	ldr	r0, [pc, #224]	; (80057cc <__mdiff+0x10c>)
 80056ea:	f000 faf3 	bl	8005cd4 <__assert_func>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80056f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	bfa4      	itt	ge
 80056fa:	463b      	movge	r3, r7
 80056fc:	4627      	movge	r7, r4
 80056fe:	4630      	mov	r0, r6
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	bfa6      	itte	ge
 8005704:	461c      	movge	r4, r3
 8005706:	2500      	movge	r5, #0
 8005708:	2501      	movlt	r5, #1
 800570a:	f7ff fd3f 	bl	800518c <_Balloc>
 800570e:	b920      	cbnz	r0, 800571a <__mdiff+0x5a>
 8005710:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <__mdiff+0x108>)
 8005712:	4602      	mov	r2, r0
 8005714:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005718:	e7e6      	b.n	80056e8 <__mdiff+0x28>
 800571a:	693e      	ldr	r6, [r7, #16]
 800571c:	60c5      	str	r5, [r0, #12]
 800571e:	6925      	ldr	r5, [r4, #16]
 8005720:	f107 0114 	add.w	r1, r7, #20
 8005724:	f104 0914 	add.w	r9, r4, #20
 8005728:	f100 0e14 	add.w	lr, r0, #20
 800572c:	f107 0210 	add.w	r2, r7, #16
 8005730:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005734:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005738:	46f2      	mov	sl, lr
 800573a:	2700      	movs	r7, #0
 800573c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005744:	fa1f f883 	uxth.w	r8, r3
 8005748:	fa17 f78b 	uxtah	r7, r7, fp
 800574c:	0c1b      	lsrs	r3, r3, #16
 800574e:	eba7 0808 	sub.w	r8, r7, r8
 8005752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800575a:	fa1f f888 	uxth.w	r8, r8
 800575e:	141f      	asrs	r7, r3, #16
 8005760:	454d      	cmp	r5, r9
 8005762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005766:	f84a 3b04 	str.w	r3, [sl], #4
 800576a:	d8e7      	bhi.n	800573c <__mdiff+0x7c>
 800576c:	1b2b      	subs	r3, r5, r4
 800576e:	3b15      	subs	r3, #21
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	3304      	adds	r3, #4
 8005776:	3415      	adds	r4, #21
 8005778:	42a5      	cmp	r5, r4
 800577a:	bf38      	it	cc
 800577c:	2304      	movcc	r3, #4
 800577e:	4419      	add	r1, r3
 8005780:	4473      	add	r3, lr
 8005782:	469e      	mov	lr, r3
 8005784:	460d      	mov	r5, r1
 8005786:	4565      	cmp	r5, ip
 8005788:	d30e      	bcc.n	80057a8 <__mdiff+0xe8>
 800578a:	f10c 0203 	add.w	r2, ip, #3
 800578e:	1a52      	subs	r2, r2, r1
 8005790:	f022 0203 	bic.w	r2, r2, #3
 8005794:	3903      	subs	r1, #3
 8005796:	458c      	cmp	ip, r1
 8005798:	bf38      	it	cc
 800579a:	2200      	movcc	r2, #0
 800579c:	441a      	add	r2, r3
 800579e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80057a2:	b17b      	cbz	r3, 80057c4 <__mdiff+0x104>
 80057a4:	6106      	str	r6, [r0, #16]
 80057a6:	e7a5      	b.n	80056f4 <__mdiff+0x34>
 80057a8:	f855 8b04 	ldr.w	r8, [r5], #4
 80057ac:	fa17 f488 	uxtah	r4, r7, r8
 80057b0:	1422      	asrs	r2, r4, #16
 80057b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80057b6:	b2a4      	uxth	r4, r4
 80057b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80057bc:	f84e 4b04 	str.w	r4, [lr], #4
 80057c0:	1417      	asrs	r7, r2, #16
 80057c2:	e7e0      	b.n	8005786 <__mdiff+0xc6>
 80057c4:	3e01      	subs	r6, #1
 80057c6:	e7ea      	b.n	800579e <__mdiff+0xde>
 80057c8:	08006983 	.word	0x08006983
 80057cc:	08006994 	.word	0x08006994

080057d0 <__d2b>:
 80057d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057d4:	4689      	mov	r9, r1
 80057d6:	2101      	movs	r1, #1
 80057d8:	ec57 6b10 	vmov	r6, r7, d0
 80057dc:	4690      	mov	r8, r2
 80057de:	f7ff fcd5 	bl	800518c <_Balloc>
 80057e2:	4604      	mov	r4, r0
 80057e4:	b930      	cbnz	r0, 80057f4 <__d2b+0x24>
 80057e6:	4602      	mov	r2, r0
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <__d2b+0xb0>)
 80057ea:	4826      	ldr	r0, [pc, #152]	; (8005884 <__d2b+0xb4>)
 80057ec:	f240 310a 	movw	r1, #778	; 0x30a
 80057f0:	f000 fa70 	bl	8005cd4 <__assert_func>
 80057f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80057f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057fc:	bb35      	cbnz	r5, 800584c <__d2b+0x7c>
 80057fe:	2e00      	cmp	r6, #0
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	d028      	beq.n	8005856 <__d2b+0x86>
 8005804:	4668      	mov	r0, sp
 8005806:	9600      	str	r6, [sp, #0]
 8005808:	f7ff fd8c 	bl	8005324 <__lo0bits>
 800580c:	9900      	ldr	r1, [sp, #0]
 800580e:	b300      	cbz	r0, 8005852 <__d2b+0x82>
 8005810:	9a01      	ldr	r2, [sp, #4]
 8005812:	f1c0 0320 	rsb	r3, r0, #32
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	430b      	orrs	r3, r1
 800581c:	40c2      	lsrs	r2, r0
 800581e:	6163      	str	r3, [r4, #20]
 8005820:	9201      	str	r2, [sp, #4]
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	61a3      	str	r3, [r4, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2202      	movne	r2, #2
 800582c:	2201      	moveq	r2, #1
 800582e:	6122      	str	r2, [r4, #16]
 8005830:	b1d5      	cbz	r5, 8005868 <__d2b+0x98>
 8005832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005836:	4405      	add	r5, r0
 8005838:	f8c9 5000 	str.w	r5, [r9]
 800583c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005840:	f8c8 0000 	str.w	r0, [r8]
 8005844:	4620      	mov	r0, r4
 8005846:	b003      	add	sp, #12
 8005848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800584c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005850:	e7d5      	b.n	80057fe <__d2b+0x2e>
 8005852:	6161      	str	r1, [r4, #20]
 8005854:	e7e5      	b.n	8005822 <__d2b+0x52>
 8005856:	a801      	add	r0, sp, #4
 8005858:	f7ff fd64 	bl	8005324 <__lo0bits>
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	6163      	str	r3, [r4, #20]
 8005860:	2201      	movs	r2, #1
 8005862:	6122      	str	r2, [r4, #16]
 8005864:	3020      	adds	r0, #32
 8005866:	e7e3      	b.n	8005830 <__d2b+0x60>
 8005868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800586c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005870:	f8c9 0000 	str.w	r0, [r9]
 8005874:	6918      	ldr	r0, [r3, #16]
 8005876:	f7ff fd35 	bl	80052e4 <__hi0bits>
 800587a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800587e:	e7df      	b.n	8005840 <__d2b+0x70>
 8005880:	08006983 	.word	0x08006983
 8005884:	08006994 	.word	0x08006994

08005888 <_calloc_r>:
 8005888:	b513      	push	{r0, r1, r4, lr}
 800588a:	434a      	muls	r2, r1
 800588c:	4611      	mov	r1, r2
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	f000 f85a 	bl	8005948 <_malloc_r>
 8005894:	4604      	mov	r4, r0
 8005896:	b118      	cbz	r0, 80058a0 <_calloc_r+0x18>
 8005898:	9a01      	ldr	r2, [sp, #4]
 800589a:	2100      	movs	r1, #0
 800589c:	f7fe f950 	bl	8003b40 <memset>
 80058a0:	4620      	mov	r0, r4
 80058a2:	b002      	add	sp, #8
 80058a4:	bd10      	pop	{r4, pc}
	...

080058a8 <_free_r>:
 80058a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058aa:	2900      	cmp	r1, #0
 80058ac:	d048      	beq.n	8005940 <_free_r+0x98>
 80058ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b2:	9001      	str	r0, [sp, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ba:	bfb8      	it	lt
 80058bc:	18e4      	addlt	r4, r4, r3
 80058be:	f000 fa65 	bl	8005d8c <__malloc_lock>
 80058c2:	4a20      	ldr	r2, [pc, #128]	; (8005944 <_free_r+0x9c>)
 80058c4:	9801      	ldr	r0, [sp, #4]
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	4615      	mov	r5, r2
 80058ca:	b933      	cbnz	r3, 80058da <_free_r+0x32>
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6014      	str	r4, [r2, #0]
 80058d0:	b003      	add	sp, #12
 80058d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058d6:	f000 ba5f 	b.w	8005d98 <__malloc_unlock>
 80058da:	42a3      	cmp	r3, r4
 80058dc:	d90b      	bls.n	80058f6 <_free_r+0x4e>
 80058de:	6821      	ldr	r1, [r4, #0]
 80058e0:	1862      	adds	r2, r4, r1
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bf04      	itt	eq
 80058e6:	681a      	ldreq	r2, [r3, #0]
 80058e8:	685b      	ldreq	r3, [r3, #4]
 80058ea:	6063      	str	r3, [r4, #4]
 80058ec:	bf04      	itt	eq
 80058ee:	1852      	addeq	r2, r2, r1
 80058f0:	6022      	streq	r2, [r4, #0]
 80058f2:	602c      	str	r4, [r5, #0]
 80058f4:	e7ec      	b.n	80058d0 <_free_r+0x28>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x58>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x4e>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1855      	adds	r5, r2, r1
 8005904:	42a5      	cmp	r5, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x78>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	4421      	add	r1, r4
 800590c:	1854      	adds	r4, r2, r1
 800590e:	42a3      	cmp	r3, r4
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1dd      	bne.n	80058d0 <_free_r+0x28>
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4421      	add	r1, r4
 800591c:	6011      	str	r1, [r2, #0]
 800591e:	e7d7      	b.n	80058d0 <_free_r+0x28>
 8005920:	d902      	bls.n	8005928 <_free_r+0x80>
 8005922:	230c      	movs	r3, #12
 8005924:	6003      	str	r3, [r0, #0]
 8005926:	e7d3      	b.n	80058d0 <_free_r+0x28>
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1961      	adds	r1, r4, r5
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1949      	addeq	r1, r1, r5
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7c7      	b.n	80058d0 <_free_r+0x28>
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	20000208 	.word	0x20000208

08005948 <_malloc_r>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	1ccd      	adds	r5, r1, #3
 800594c:	f025 0503 	bic.w	r5, r5, #3
 8005950:	3508      	adds	r5, #8
 8005952:	2d0c      	cmp	r5, #12
 8005954:	bf38      	it	cc
 8005956:	250c      	movcc	r5, #12
 8005958:	2d00      	cmp	r5, #0
 800595a:	4606      	mov	r6, r0
 800595c:	db01      	blt.n	8005962 <_malloc_r+0x1a>
 800595e:	42a9      	cmp	r1, r5
 8005960:	d903      	bls.n	800596a <_malloc_r+0x22>
 8005962:	230c      	movs	r3, #12
 8005964:	6033      	str	r3, [r6, #0]
 8005966:	2000      	movs	r0, #0
 8005968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800596a:	f000 fa0f 	bl	8005d8c <__malloc_lock>
 800596e:	4921      	ldr	r1, [pc, #132]	; (80059f4 <_malloc_r+0xac>)
 8005970:	680a      	ldr	r2, [r1, #0]
 8005972:	4614      	mov	r4, r2
 8005974:	b99c      	cbnz	r4, 800599e <_malloc_r+0x56>
 8005976:	4f20      	ldr	r7, [pc, #128]	; (80059f8 <_malloc_r+0xb0>)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	b923      	cbnz	r3, 8005986 <_malloc_r+0x3e>
 800597c:	4621      	mov	r1, r4
 800597e:	4630      	mov	r0, r6
 8005980:	f000 f998 	bl	8005cb4 <_sbrk_r>
 8005984:	6038      	str	r0, [r7, #0]
 8005986:	4629      	mov	r1, r5
 8005988:	4630      	mov	r0, r6
 800598a:	f000 f993 	bl	8005cb4 <_sbrk_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d123      	bne.n	80059da <_malloc_r+0x92>
 8005992:	230c      	movs	r3, #12
 8005994:	6033      	str	r3, [r6, #0]
 8005996:	4630      	mov	r0, r6
 8005998:	f000 f9fe 	bl	8005d98 <__malloc_unlock>
 800599c:	e7e3      	b.n	8005966 <_malloc_r+0x1e>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	1b5b      	subs	r3, r3, r5
 80059a2:	d417      	bmi.n	80059d4 <_malloc_r+0x8c>
 80059a4:	2b0b      	cmp	r3, #11
 80059a6:	d903      	bls.n	80059b0 <_malloc_r+0x68>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	441c      	add	r4, r3
 80059ac:	6025      	str	r5, [r4, #0]
 80059ae:	e004      	b.n	80059ba <_malloc_r+0x72>
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	42a2      	cmp	r2, r4
 80059b4:	bf0c      	ite	eq
 80059b6:	600b      	streq	r3, [r1, #0]
 80059b8:	6053      	strne	r3, [r2, #4]
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 f9ec 	bl	8005d98 <__malloc_unlock>
 80059c0:	f104 000b 	add.w	r0, r4, #11
 80059c4:	1d23      	adds	r3, r4, #4
 80059c6:	f020 0007 	bic.w	r0, r0, #7
 80059ca:	1ac2      	subs	r2, r0, r3
 80059cc:	d0cc      	beq.n	8005968 <_malloc_r+0x20>
 80059ce:	1a1b      	subs	r3, r3, r0
 80059d0:	50a3      	str	r3, [r4, r2]
 80059d2:	e7c9      	b.n	8005968 <_malloc_r+0x20>
 80059d4:	4622      	mov	r2, r4
 80059d6:	6864      	ldr	r4, [r4, #4]
 80059d8:	e7cc      	b.n	8005974 <_malloc_r+0x2c>
 80059da:	1cc4      	adds	r4, r0, #3
 80059dc:	f024 0403 	bic.w	r4, r4, #3
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d0e3      	beq.n	80059ac <_malloc_r+0x64>
 80059e4:	1a21      	subs	r1, r4, r0
 80059e6:	4630      	mov	r0, r6
 80059e8:	f000 f964 	bl	8005cb4 <_sbrk_r>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d1dd      	bne.n	80059ac <_malloc_r+0x64>
 80059f0:	e7cf      	b.n	8005992 <_malloc_r+0x4a>
 80059f2:	bf00      	nop
 80059f4:	20000208 	.word	0x20000208
 80059f8:	2000020c 	.word	0x2000020c

080059fc <__ssputs_r>:
 80059fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	688e      	ldr	r6, [r1, #8]
 8005a02:	429e      	cmp	r6, r3
 8005a04:	4682      	mov	sl, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	4690      	mov	r8, r2
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	d838      	bhi.n	8005a80 <__ssputs_r+0x84>
 8005a0e:	898a      	ldrh	r2, [r1, #12]
 8005a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a14:	d032      	beq.n	8005a7c <__ssputs_r+0x80>
 8005a16:	6825      	ldr	r5, [r4, #0]
 8005a18:	6909      	ldr	r1, [r1, #16]
 8005a1a:	eba5 0901 	sub.w	r9, r5, r1
 8005a1e:	6965      	ldr	r5, [r4, #20]
 8005a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a28:	3301      	adds	r3, #1
 8005a2a:	444b      	add	r3, r9
 8005a2c:	106d      	asrs	r5, r5, #1
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	bf38      	it	cc
 8005a32:	461d      	movcc	r5, r3
 8005a34:	0553      	lsls	r3, r2, #21
 8005a36:	d531      	bpl.n	8005a9c <__ssputs_r+0xa0>
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7ff ff85 	bl	8005948 <_malloc_r>
 8005a3e:	4606      	mov	r6, r0
 8005a40:	b950      	cbnz	r0, 8005a58 <__ssputs_r+0x5c>
 8005a42:	230c      	movs	r3, #12
 8005a44:	f8ca 3000 	str.w	r3, [sl]
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4e:	81a3      	strh	r3, [r4, #12]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	6921      	ldr	r1, [r4, #16]
 8005a5a:	464a      	mov	r2, r9
 8005a5c:	f7ff fb88 	bl	8005170 <memcpy>
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6a:	81a3      	strh	r3, [r4, #12]
 8005a6c:	6126      	str	r6, [r4, #16]
 8005a6e:	6165      	str	r5, [r4, #20]
 8005a70:	444e      	add	r6, r9
 8005a72:	eba5 0509 	sub.w	r5, r5, r9
 8005a76:	6026      	str	r6, [r4, #0]
 8005a78:	60a5      	str	r5, [r4, #8]
 8005a7a:	463e      	mov	r6, r7
 8005a7c:	42be      	cmp	r6, r7
 8005a7e:	d900      	bls.n	8005a82 <__ssputs_r+0x86>
 8005a80:	463e      	mov	r6, r7
 8005a82:	4632      	mov	r2, r6
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	4641      	mov	r1, r8
 8005a88:	f000 f966 	bl	8005d58 <memmove>
 8005a8c:	68a3      	ldr	r3, [r4, #8]
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	1b9b      	subs	r3, r3, r6
 8005a92:	4432      	add	r2, r6
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	6022      	str	r2, [r4, #0]
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e7db      	b.n	8005a54 <__ssputs_r+0x58>
 8005a9c:	462a      	mov	r2, r5
 8005a9e:	f000 f981 	bl	8005da4 <_realloc_r>
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d1e1      	bne.n	8005a6c <__ssputs_r+0x70>
 8005aa8:	6921      	ldr	r1, [r4, #16]
 8005aaa:	4650      	mov	r0, sl
 8005aac:	f7ff fefc 	bl	80058a8 <_free_r>
 8005ab0:	e7c7      	b.n	8005a42 <__ssputs_r+0x46>
	...

08005ab4 <_svfiprintf_r>:
 8005ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab8:	4698      	mov	r8, r3
 8005aba:	898b      	ldrh	r3, [r1, #12]
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	b09d      	sub	sp, #116	; 0x74
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	460d      	mov	r5, r1
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	d50e      	bpl.n	8005ae6 <_svfiprintf_r+0x32>
 8005ac8:	690b      	ldr	r3, [r1, #16]
 8005aca:	b963      	cbnz	r3, 8005ae6 <_svfiprintf_r+0x32>
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	f7ff ff3b 	bl	8005948 <_malloc_r>
 8005ad2:	6028      	str	r0, [r5, #0]
 8005ad4:	6128      	str	r0, [r5, #16]
 8005ad6:	b920      	cbnz	r0, 8005ae2 <_svfiprintf_r+0x2e>
 8005ad8:	230c      	movs	r3, #12
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ae0:	e0d1      	b.n	8005c86 <_svfiprintf_r+0x1d2>
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	616b      	str	r3, [r5, #20]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	2320      	movs	r3, #32
 8005aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af4:	2330      	movs	r3, #48	; 0x30
 8005af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ca0 <_svfiprintf_r+0x1ec>
 8005afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005afe:	f04f 0901 	mov.w	r9, #1
 8005b02:	4623      	mov	r3, r4
 8005b04:	469a      	mov	sl, r3
 8005b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b0a:	b10a      	cbz	r2, 8005b10 <_svfiprintf_r+0x5c>
 8005b0c:	2a25      	cmp	r2, #37	; 0x25
 8005b0e:	d1f9      	bne.n	8005b04 <_svfiprintf_r+0x50>
 8005b10:	ebba 0b04 	subs.w	fp, sl, r4
 8005b14:	d00b      	beq.n	8005b2e <_svfiprintf_r+0x7a>
 8005b16:	465b      	mov	r3, fp
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	f7ff ff6d 	bl	80059fc <__ssputs_r>
 8005b22:	3001      	adds	r0, #1
 8005b24:	f000 80aa 	beq.w	8005c7c <_svfiprintf_r+0x1c8>
 8005b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b2a:	445a      	add	r2, fp
 8005b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80a2 	beq.w	8005c7c <_svfiprintf_r+0x1c8>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b42:	f10a 0a01 	add.w	sl, sl, #1
 8005b46:	9304      	str	r3, [sp, #16]
 8005b48:	9307      	str	r3, [sp, #28]
 8005b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8005b50:	4654      	mov	r4, sl
 8005b52:	2205      	movs	r2, #5
 8005b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b58:	4851      	ldr	r0, [pc, #324]	; (8005ca0 <_svfiprintf_r+0x1ec>)
 8005b5a:	f7fa fb51 	bl	8000200 <memchr>
 8005b5e:	9a04      	ldr	r2, [sp, #16]
 8005b60:	b9d8      	cbnz	r0, 8005b9a <_svfiprintf_r+0xe6>
 8005b62:	06d0      	lsls	r0, r2, #27
 8005b64:	bf44      	itt	mi
 8005b66:	2320      	movmi	r3, #32
 8005b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b6c:	0711      	lsls	r1, r2, #28
 8005b6e:	bf44      	itt	mi
 8005b70:	232b      	movmi	r3, #43	; 0x2b
 8005b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b76:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b7c:	d015      	beq.n	8005baa <_svfiprintf_r+0xf6>
 8005b7e:	9a07      	ldr	r2, [sp, #28]
 8005b80:	4654      	mov	r4, sl
 8005b82:	2000      	movs	r0, #0
 8005b84:	f04f 0c0a 	mov.w	ip, #10
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b8e:	3b30      	subs	r3, #48	; 0x30
 8005b90:	2b09      	cmp	r3, #9
 8005b92:	d94e      	bls.n	8005c32 <_svfiprintf_r+0x17e>
 8005b94:	b1b0      	cbz	r0, 8005bc4 <_svfiprintf_r+0x110>
 8005b96:	9207      	str	r2, [sp, #28]
 8005b98:	e014      	b.n	8005bc4 <_svfiprintf_r+0x110>
 8005b9a:	eba0 0308 	sub.w	r3, r0, r8
 8005b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	46a2      	mov	sl, r4
 8005ba8:	e7d2      	b.n	8005b50 <_svfiprintf_r+0x9c>
 8005baa:	9b03      	ldr	r3, [sp, #12]
 8005bac:	1d19      	adds	r1, r3, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	9103      	str	r1, [sp, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	bfbb      	ittet	lt
 8005bb6:	425b      	neglt	r3, r3
 8005bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005bbc:	9307      	strge	r3, [sp, #28]
 8005bbe:	9307      	strlt	r3, [sp, #28]
 8005bc0:	bfb8      	it	lt
 8005bc2:	9204      	strlt	r2, [sp, #16]
 8005bc4:	7823      	ldrb	r3, [r4, #0]
 8005bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc8:	d10c      	bne.n	8005be4 <_svfiprintf_r+0x130>
 8005bca:	7863      	ldrb	r3, [r4, #1]
 8005bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005bce:	d135      	bne.n	8005c3c <_svfiprintf_r+0x188>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	1d1a      	adds	r2, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	9203      	str	r2, [sp, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bfb8      	it	lt
 8005bdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005be0:	3402      	adds	r4, #2
 8005be2:	9305      	str	r3, [sp, #20]
 8005be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cb0 <_svfiprintf_r+0x1fc>
 8005be8:	7821      	ldrb	r1, [r4, #0]
 8005bea:	2203      	movs	r2, #3
 8005bec:	4650      	mov	r0, sl
 8005bee:	f7fa fb07 	bl	8000200 <memchr>
 8005bf2:	b140      	cbz	r0, 8005c06 <_svfiprintf_r+0x152>
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	eba0 000a 	sub.w	r0, r0, sl
 8005bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	4303      	orrs	r3, r0
 8005c02:	3401      	adds	r4, #1
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0a:	4826      	ldr	r0, [pc, #152]	; (8005ca4 <_svfiprintf_r+0x1f0>)
 8005c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c10:	2206      	movs	r2, #6
 8005c12:	f7fa faf5 	bl	8000200 <memchr>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d038      	beq.n	8005c8c <_svfiprintf_r+0x1d8>
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <_svfiprintf_r+0x1f4>)
 8005c1c:	bb1b      	cbnz	r3, 8005c66 <_svfiprintf_r+0x1b2>
 8005c1e:	9b03      	ldr	r3, [sp, #12]
 8005c20:	3307      	adds	r3, #7
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	3308      	adds	r3, #8
 8005c28:	9303      	str	r3, [sp, #12]
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	4433      	add	r3, r6
 8005c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c30:	e767      	b.n	8005b02 <_svfiprintf_r+0x4e>
 8005c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c36:	460c      	mov	r4, r1
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e7a5      	b.n	8005b88 <_svfiprintf_r+0xd4>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	3401      	adds	r4, #1
 8005c40:	9305      	str	r3, [sp, #20]
 8005c42:	4619      	mov	r1, r3
 8005c44:	f04f 0c0a 	mov.w	ip, #10
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c4e:	3a30      	subs	r2, #48	; 0x30
 8005c50:	2a09      	cmp	r2, #9
 8005c52:	d903      	bls.n	8005c5c <_svfiprintf_r+0x1a8>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0c5      	beq.n	8005be4 <_svfiprintf_r+0x130>
 8005c58:	9105      	str	r1, [sp, #20]
 8005c5a:	e7c3      	b.n	8005be4 <_svfiprintf_r+0x130>
 8005c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c60:	4604      	mov	r4, r0
 8005c62:	2301      	movs	r3, #1
 8005c64:	e7f0      	b.n	8005c48 <_svfiprintf_r+0x194>
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <_svfiprintf_r+0x1f8>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4638      	mov	r0, r7
 8005c72:	f7fe f80d 	bl	8003c90 <_printf_float>
 8005c76:	1c42      	adds	r2, r0, #1
 8005c78:	4606      	mov	r6, r0
 8005c7a:	d1d6      	bne.n	8005c2a <_svfiprintf_r+0x176>
 8005c7c:	89ab      	ldrh	r3, [r5, #12]
 8005c7e:	065b      	lsls	r3, r3, #25
 8005c80:	f53f af2c 	bmi.w	8005adc <_svfiprintf_r+0x28>
 8005c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c86:	b01d      	add	sp, #116	; 0x74
 8005c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8c:	ab03      	add	r3, sp, #12
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	462a      	mov	r2, r5
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <_svfiprintf_r+0x1f8>)
 8005c94:	a904      	add	r1, sp, #16
 8005c96:	4638      	mov	r0, r7
 8005c98:	f7fe fa9e 	bl	80041d8 <_printf_i>
 8005c9c:	e7eb      	b.n	8005c76 <_svfiprintf_r+0x1c2>
 8005c9e:	bf00      	nop
 8005ca0:	08006af4 	.word	0x08006af4
 8005ca4:	08006afe 	.word	0x08006afe
 8005ca8:	08003c91 	.word	0x08003c91
 8005cac:	080059fd 	.word	0x080059fd
 8005cb0:	08006afa 	.word	0x08006afa

08005cb4 <_sbrk_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	; (8005cd0 <_sbrk_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb fff6 	bl	8001cb0 <_sbrk>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_sbrk_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_sbrk_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200002bc 	.word	0x200002bc

08005cd4 <__assert_func>:
 8005cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cd6:	4614      	mov	r4, r2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <__assert_func+0x2c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4605      	mov	r5, r0
 8005ce0:	68d8      	ldr	r0, [r3, #12]
 8005ce2:	b14c      	cbz	r4, 8005cf8 <__assert_func+0x24>
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <__assert_func+0x30>)
 8005ce6:	9100      	str	r1, [sp, #0]
 8005ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cec:	4906      	ldr	r1, [pc, #24]	; (8005d08 <__assert_func+0x34>)
 8005cee:	462b      	mov	r3, r5
 8005cf0:	f000 f80e 	bl	8005d10 <fiprintf>
 8005cf4:	f000 faa4 	bl	8006240 <abort>
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <__assert_func+0x38>)
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	e7f3      	b.n	8005ce6 <__assert_func+0x12>
 8005cfe:	bf00      	nop
 8005d00:	2000000c 	.word	0x2000000c
 8005d04:	08006b05 	.word	0x08006b05
 8005d08:	08006b12 	.word	0x08006b12
 8005d0c:	08006b40 	.word	0x08006b40

08005d10 <fiprintf>:
 8005d10:	b40e      	push	{r1, r2, r3}
 8005d12:	b503      	push	{r0, r1, lr}
 8005d14:	4601      	mov	r1, r0
 8005d16:	ab03      	add	r3, sp, #12
 8005d18:	4805      	ldr	r0, [pc, #20]	; (8005d30 <fiprintf+0x20>)
 8005d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d1e:	6800      	ldr	r0, [r0, #0]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	f000 f88f 	bl	8005e44 <_vfiprintf_r>
 8005d26:	b002      	add	sp, #8
 8005d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d2c:	b003      	add	sp, #12
 8005d2e:	4770      	bx	lr
 8005d30:	2000000c 	.word	0x2000000c

08005d34 <__ascii_mbtowc>:
 8005d34:	b082      	sub	sp, #8
 8005d36:	b901      	cbnz	r1, 8005d3a <__ascii_mbtowc+0x6>
 8005d38:	a901      	add	r1, sp, #4
 8005d3a:	b142      	cbz	r2, 8005d4e <__ascii_mbtowc+0x1a>
 8005d3c:	b14b      	cbz	r3, 8005d52 <__ascii_mbtowc+0x1e>
 8005d3e:	7813      	ldrb	r3, [r2, #0]
 8005d40:	600b      	str	r3, [r1, #0]
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	1e10      	subs	r0, r2, #0
 8005d46:	bf18      	it	ne
 8005d48:	2001      	movne	r0, #1
 8005d4a:	b002      	add	sp, #8
 8005d4c:	4770      	bx	lr
 8005d4e:	4610      	mov	r0, r2
 8005d50:	e7fb      	b.n	8005d4a <__ascii_mbtowc+0x16>
 8005d52:	f06f 0001 	mvn.w	r0, #1
 8005d56:	e7f8      	b.n	8005d4a <__ascii_mbtowc+0x16>

08005d58 <memmove>:
 8005d58:	4288      	cmp	r0, r1
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	eb01 0402 	add.w	r4, r1, r2
 8005d60:	d902      	bls.n	8005d68 <memmove+0x10>
 8005d62:	4284      	cmp	r4, r0
 8005d64:	4623      	mov	r3, r4
 8005d66:	d807      	bhi.n	8005d78 <memmove+0x20>
 8005d68:	1e43      	subs	r3, r0, #1
 8005d6a:	42a1      	cmp	r1, r4
 8005d6c:	d008      	beq.n	8005d80 <memmove+0x28>
 8005d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d76:	e7f8      	b.n	8005d6a <memmove+0x12>
 8005d78:	4402      	add	r2, r0
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	428a      	cmp	r2, r1
 8005d7e:	d100      	bne.n	8005d82 <memmove+0x2a>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d8a:	e7f7      	b.n	8005d7c <memmove+0x24>

08005d8c <__malloc_lock>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <__malloc_lock+0x8>)
 8005d8e:	f000 bc17 	b.w	80065c0 <__retarget_lock_acquire_recursive>
 8005d92:	bf00      	nop
 8005d94:	200002c4 	.word	0x200002c4

08005d98 <__malloc_unlock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_unlock+0x8>)
 8005d9a:	f000 bc12 	b.w	80065c2 <__retarget_lock_release_recursive>
 8005d9e:	bf00      	nop
 8005da0:	200002c4 	.word	0x200002c4

08005da4 <_realloc_r>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4607      	mov	r7, r0
 8005da8:	4614      	mov	r4, r2
 8005daa:	460e      	mov	r6, r1
 8005dac:	b921      	cbnz	r1, 8005db8 <_realloc_r+0x14>
 8005dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005db2:	4611      	mov	r1, r2
 8005db4:	f7ff bdc8 	b.w	8005948 <_malloc_r>
 8005db8:	b922      	cbnz	r2, 8005dc4 <_realloc_r+0x20>
 8005dba:	f7ff fd75 	bl	80058a8 <_free_r>
 8005dbe:	4625      	mov	r5, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc4:	f000 fc62 	bl	800668c <_malloc_usable_size_r>
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d20f      	bcs.n	8005dec <_realloc_r+0x48>
 8005dcc:	4621      	mov	r1, r4
 8005dce:	4638      	mov	r0, r7
 8005dd0:	f7ff fdba 	bl	8005948 <_malloc_r>
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d0f2      	beq.n	8005dc0 <_realloc_r+0x1c>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4622      	mov	r2, r4
 8005dde:	f7ff f9c7 	bl	8005170 <memcpy>
 8005de2:	4631      	mov	r1, r6
 8005de4:	4638      	mov	r0, r7
 8005de6:	f7ff fd5f 	bl	80058a8 <_free_r>
 8005dea:	e7e9      	b.n	8005dc0 <_realloc_r+0x1c>
 8005dec:	4635      	mov	r5, r6
 8005dee:	e7e7      	b.n	8005dc0 <_realloc_r+0x1c>

08005df0 <__sfputc_r>:
 8005df0:	6893      	ldr	r3, [r2, #8]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	b410      	push	{r4}
 8005df8:	6093      	str	r3, [r2, #8]
 8005dfa:	da08      	bge.n	8005e0e <__sfputc_r+0x1e>
 8005dfc:	6994      	ldr	r4, [r2, #24]
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	db01      	blt.n	8005e06 <__sfputc_r+0x16>
 8005e02:	290a      	cmp	r1, #10
 8005e04:	d103      	bne.n	8005e0e <__sfputc_r+0x1e>
 8005e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e0a:	f000 b94b 	b.w	80060a4 <__swbuf_r>
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	1c58      	adds	r0, r3, #1
 8005e12:	6010      	str	r0, [r2, #0]
 8005e14:	7019      	strb	r1, [r3, #0]
 8005e16:	4608      	mov	r0, r1
 8005e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <__sfputs_r>:
 8005e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	18d5      	adds	r5, r2, r3
 8005e28:	42ac      	cmp	r4, r5
 8005e2a:	d101      	bne.n	8005e30 <__sfputs_r+0x12>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e007      	b.n	8005e40 <__sfputs_r+0x22>
 8005e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e34:	463a      	mov	r2, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff ffda 	bl	8005df0 <__sfputc_r>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d1f3      	bne.n	8005e28 <__sfputs_r+0xa>
 8005e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e44 <_vfiprintf_r>:
 8005e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e48:	460d      	mov	r5, r1
 8005e4a:	b09d      	sub	sp, #116	; 0x74
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	4698      	mov	r8, r3
 8005e50:	4606      	mov	r6, r0
 8005e52:	b118      	cbz	r0, 8005e5c <_vfiprintf_r+0x18>
 8005e54:	6983      	ldr	r3, [r0, #24]
 8005e56:	b90b      	cbnz	r3, 8005e5c <_vfiprintf_r+0x18>
 8005e58:	f000 fb14 	bl	8006484 <__sinit>
 8005e5c:	4b89      	ldr	r3, [pc, #548]	; (8006084 <_vfiprintf_r+0x240>)
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	d11b      	bne.n	8005e9a <_vfiprintf_r+0x56>
 8005e62:	6875      	ldr	r5, [r6, #4]
 8005e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	d405      	bmi.n	8005e76 <_vfiprintf_r+0x32>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	059a      	lsls	r2, r3, #22
 8005e6e:	d402      	bmi.n	8005e76 <_vfiprintf_r+0x32>
 8005e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e72:	f000 fba5 	bl	80065c0 <__retarget_lock_acquire_recursive>
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	071b      	lsls	r3, r3, #28
 8005e7a:	d501      	bpl.n	8005e80 <_vfiprintf_r+0x3c>
 8005e7c:	692b      	ldr	r3, [r5, #16]
 8005e7e:	b9eb      	cbnz	r3, 8005ebc <_vfiprintf_r+0x78>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 f96e 	bl	8006164 <__swsetup_r>
 8005e88:	b1c0      	cbz	r0, 8005ebc <_vfiprintf_r+0x78>
 8005e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e8c:	07dc      	lsls	r4, r3, #31
 8005e8e:	d50e      	bpl.n	8005eae <_vfiprintf_r+0x6a>
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e94:	b01d      	add	sp, #116	; 0x74
 8005e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9a:	4b7b      	ldr	r3, [pc, #492]	; (8006088 <_vfiprintf_r+0x244>)
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	d101      	bne.n	8005ea4 <_vfiprintf_r+0x60>
 8005ea0:	68b5      	ldr	r5, [r6, #8]
 8005ea2:	e7df      	b.n	8005e64 <_vfiprintf_r+0x20>
 8005ea4:	4b79      	ldr	r3, [pc, #484]	; (800608c <_vfiprintf_r+0x248>)
 8005ea6:	429d      	cmp	r5, r3
 8005ea8:	bf08      	it	eq
 8005eaa:	68f5      	ldreq	r5, [r6, #12]
 8005eac:	e7da      	b.n	8005e64 <_vfiprintf_r+0x20>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	0598      	lsls	r0, r3, #22
 8005eb2:	d4ed      	bmi.n	8005e90 <_vfiprintf_r+0x4c>
 8005eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb6:	f000 fb84 	bl	80065c2 <__retarget_lock_release_recursive>
 8005eba:	e7e9      	b.n	8005e90 <_vfiprintf_r+0x4c>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eca:	2330      	movs	r3, #48	; 0x30
 8005ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006090 <_vfiprintf_r+0x24c>
 8005ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed4:	f04f 0901 	mov.w	r9, #1
 8005ed8:	4623      	mov	r3, r4
 8005eda:	469a      	mov	sl, r3
 8005edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee0:	b10a      	cbz	r2, 8005ee6 <_vfiprintf_r+0xa2>
 8005ee2:	2a25      	cmp	r2, #37	; 0x25
 8005ee4:	d1f9      	bne.n	8005eda <_vfiprintf_r+0x96>
 8005ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8005eea:	d00b      	beq.n	8005f04 <_vfiprintf_r+0xc0>
 8005eec:	465b      	mov	r3, fp
 8005eee:	4622      	mov	r2, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ff93 	bl	8005e1e <__sfputs_r>
 8005ef8:	3001      	adds	r0, #1
 8005efa:	f000 80aa 	beq.w	8006052 <_vfiprintf_r+0x20e>
 8005efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f00:	445a      	add	r2, fp
 8005f02:	9209      	str	r2, [sp, #36]	; 0x24
 8005f04:	f89a 3000 	ldrb.w	r3, [sl]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80a2 	beq.w	8006052 <_vfiprintf_r+0x20e>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f18:	f10a 0a01 	add.w	sl, sl, #1
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	9307      	str	r3, [sp, #28]
 8005f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f24:	931a      	str	r3, [sp, #104]	; 0x68
 8005f26:	4654      	mov	r4, sl
 8005f28:	2205      	movs	r2, #5
 8005f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2e:	4858      	ldr	r0, [pc, #352]	; (8006090 <_vfiprintf_r+0x24c>)
 8005f30:	f7fa f966 	bl	8000200 <memchr>
 8005f34:	9a04      	ldr	r2, [sp, #16]
 8005f36:	b9d8      	cbnz	r0, 8005f70 <_vfiprintf_r+0x12c>
 8005f38:	06d1      	lsls	r1, r2, #27
 8005f3a:	bf44      	itt	mi
 8005f3c:	2320      	movmi	r3, #32
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f42:	0713      	lsls	r3, r2, #28
 8005f44:	bf44      	itt	mi
 8005f46:	232b      	movmi	r3, #43	; 0x2b
 8005f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d015      	beq.n	8005f80 <_vfiprintf_r+0x13c>
 8005f54:	9a07      	ldr	r2, [sp, #28]
 8005f56:	4654      	mov	r4, sl
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f04f 0c0a 	mov.w	ip, #10
 8005f5e:	4621      	mov	r1, r4
 8005f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f64:	3b30      	subs	r3, #48	; 0x30
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d94e      	bls.n	8006008 <_vfiprintf_r+0x1c4>
 8005f6a:	b1b0      	cbz	r0, 8005f9a <_vfiprintf_r+0x156>
 8005f6c:	9207      	str	r2, [sp, #28]
 8005f6e:	e014      	b.n	8005f9a <_vfiprintf_r+0x156>
 8005f70:	eba0 0308 	sub.w	r3, r0, r8
 8005f74:	fa09 f303 	lsl.w	r3, r9, r3
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	46a2      	mov	sl, r4
 8005f7e:	e7d2      	b.n	8005f26 <_vfiprintf_r+0xe2>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	1d19      	adds	r1, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9103      	str	r1, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfbb      	ittet	lt
 8005f8c:	425b      	neglt	r3, r3
 8005f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005f92:	9307      	strge	r3, [sp, #28]
 8005f94:	9307      	strlt	r3, [sp, #28]
 8005f96:	bfb8      	it	lt
 8005f98:	9204      	strlt	r2, [sp, #16]
 8005f9a:	7823      	ldrb	r3, [r4, #0]
 8005f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9e:	d10c      	bne.n	8005fba <_vfiprintf_r+0x176>
 8005fa0:	7863      	ldrb	r3, [r4, #1]
 8005fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa4:	d135      	bne.n	8006012 <_vfiprintf_r+0x1ce>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	1d1a      	adds	r2, r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	9203      	str	r2, [sp, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfb8      	it	lt
 8005fb2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fb6:	3402      	adds	r4, #2
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060a0 <_vfiprintf_r+0x25c>
 8005fbe:	7821      	ldrb	r1, [r4, #0]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	f7fa f91c 	bl	8000200 <memchr>
 8005fc8:	b140      	cbz	r0, 8005fdc <_vfiprintf_r+0x198>
 8005fca:	2340      	movs	r3, #64	; 0x40
 8005fcc:	eba0 000a 	sub.w	r0, r0, sl
 8005fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8005fd4:	9b04      	ldr	r3, [sp, #16]
 8005fd6:	4303      	orrs	r3, r0
 8005fd8:	3401      	adds	r4, #1
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	482c      	ldr	r0, [pc, #176]	; (8006094 <_vfiprintf_r+0x250>)
 8005fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fe6:	2206      	movs	r2, #6
 8005fe8:	f7fa f90a 	bl	8000200 <memchr>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d03f      	beq.n	8006070 <_vfiprintf_r+0x22c>
 8005ff0:	4b29      	ldr	r3, [pc, #164]	; (8006098 <_vfiprintf_r+0x254>)
 8005ff2:	bb1b      	cbnz	r3, 800603c <_vfiprintf_r+0x1f8>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	3307      	adds	r3, #7
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006002:	443b      	add	r3, r7
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
 8006006:	e767      	b.n	8005ed8 <_vfiprintf_r+0x94>
 8006008:	fb0c 3202 	mla	r2, ip, r2, r3
 800600c:	460c      	mov	r4, r1
 800600e:	2001      	movs	r0, #1
 8006010:	e7a5      	b.n	8005f5e <_vfiprintf_r+0x11a>
 8006012:	2300      	movs	r3, #0
 8006014:	3401      	adds	r4, #1
 8006016:	9305      	str	r3, [sp, #20]
 8006018:	4619      	mov	r1, r3
 800601a:	f04f 0c0a 	mov.w	ip, #10
 800601e:	4620      	mov	r0, r4
 8006020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006024:	3a30      	subs	r2, #48	; 0x30
 8006026:	2a09      	cmp	r2, #9
 8006028:	d903      	bls.n	8006032 <_vfiprintf_r+0x1ee>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0c5      	beq.n	8005fba <_vfiprintf_r+0x176>
 800602e:	9105      	str	r1, [sp, #20]
 8006030:	e7c3      	b.n	8005fba <_vfiprintf_r+0x176>
 8006032:	fb0c 2101 	mla	r1, ip, r1, r2
 8006036:	4604      	mov	r4, r0
 8006038:	2301      	movs	r3, #1
 800603a:	e7f0      	b.n	800601e <_vfiprintf_r+0x1da>
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	462a      	mov	r2, r5
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <_vfiprintf_r+0x258>)
 8006044:	a904      	add	r1, sp, #16
 8006046:	4630      	mov	r0, r6
 8006048:	f7fd fe22 	bl	8003c90 <_printf_float>
 800604c:	4607      	mov	r7, r0
 800604e:	1c78      	adds	r0, r7, #1
 8006050:	d1d6      	bne.n	8006000 <_vfiprintf_r+0x1bc>
 8006052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006054:	07d9      	lsls	r1, r3, #31
 8006056:	d405      	bmi.n	8006064 <_vfiprintf_r+0x220>
 8006058:	89ab      	ldrh	r3, [r5, #12]
 800605a:	059a      	lsls	r2, r3, #22
 800605c:	d402      	bmi.n	8006064 <_vfiprintf_r+0x220>
 800605e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006060:	f000 faaf 	bl	80065c2 <__retarget_lock_release_recursive>
 8006064:	89ab      	ldrh	r3, [r5, #12]
 8006066:	065b      	lsls	r3, r3, #25
 8006068:	f53f af12 	bmi.w	8005e90 <_vfiprintf_r+0x4c>
 800606c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800606e:	e711      	b.n	8005e94 <_vfiprintf_r+0x50>
 8006070:	ab03      	add	r3, sp, #12
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	462a      	mov	r2, r5
 8006076:	4b09      	ldr	r3, [pc, #36]	; (800609c <_vfiprintf_r+0x258>)
 8006078:	a904      	add	r1, sp, #16
 800607a:	4630      	mov	r0, r6
 800607c:	f7fe f8ac 	bl	80041d8 <_printf_i>
 8006080:	e7e4      	b.n	800604c <_vfiprintf_r+0x208>
 8006082:	bf00      	nop
 8006084:	08006c6c 	.word	0x08006c6c
 8006088:	08006c8c 	.word	0x08006c8c
 800608c:	08006c4c 	.word	0x08006c4c
 8006090:	08006af4 	.word	0x08006af4
 8006094:	08006afe 	.word	0x08006afe
 8006098:	08003c91 	.word	0x08003c91
 800609c:	08005e1f 	.word	0x08005e1f
 80060a0:	08006afa 	.word	0x08006afa

080060a4 <__swbuf_r>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	460e      	mov	r6, r1
 80060a8:	4614      	mov	r4, r2
 80060aa:	4605      	mov	r5, r0
 80060ac:	b118      	cbz	r0, 80060b6 <__swbuf_r+0x12>
 80060ae:	6983      	ldr	r3, [r0, #24]
 80060b0:	b90b      	cbnz	r3, 80060b6 <__swbuf_r+0x12>
 80060b2:	f000 f9e7 	bl	8006484 <__sinit>
 80060b6:	4b21      	ldr	r3, [pc, #132]	; (800613c <__swbuf_r+0x98>)
 80060b8:	429c      	cmp	r4, r3
 80060ba:	d12b      	bne.n	8006114 <__swbuf_r+0x70>
 80060bc:	686c      	ldr	r4, [r5, #4]
 80060be:	69a3      	ldr	r3, [r4, #24]
 80060c0:	60a3      	str	r3, [r4, #8]
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	071a      	lsls	r2, r3, #28
 80060c6:	d52f      	bpl.n	8006128 <__swbuf_r+0x84>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	b36b      	cbz	r3, 8006128 <__swbuf_r+0x84>
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	6820      	ldr	r0, [r4, #0]
 80060d0:	1ac0      	subs	r0, r0, r3
 80060d2:	6963      	ldr	r3, [r4, #20]
 80060d4:	b2f6      	uxtb	r6, r6
 80060d6:	4283      	cmp	r3, r0
 80060d8:	4637      	mov	r7, r6
 80060da:	dc04      	bgt.n	80060e6 <__swbuf_r+0x42>
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f93c 	bl	800635c <_fflush_r>
 80060e4:	bb30      	cbnz	r0, 8006134 <__swbuf_r+0x90>
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	60a3      	str	r3, [r4, #8]
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	701e      	strb	r6, [r3, #0]
 80060f4:	6963      	ldr	r3, [r4, #20]
 80060f6:	3001      	adds	r0, #1
 80060f8:	4283      	cmp	r3, r0
 80060fa:	d004      	beq.n	8006106 <__swbuf_r+0x62>
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	07db      	lsls	r3, r3, #31
 8006100:	d506      	bpl.n	8006110 <__swbuf_r+0x6c>
 8006102:	2e0a      	cmp	r6, #10
 8006104:	d104      	bne.n	8006110 <__swbuf_r+0x6c>
 8006106:	4621      	mov	r1, r4
 8006108:	4628      	mov	r0, r5
 800610a:	f000 f927 	bl	800635c <_fflush_r>
 800610e:	b988      	cbnz	r0, 8006134 <__swbuf_r+0x90>
 8006110:	4638      	mov	r0, r7
 8006112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <__swbuf_r+0x9c>)
 8006116:	429c      	cmp	r4, r3
 8006118:	d101      	bne.n	800611e <__swbuf_r+0x7a>
 800611a:	68ac      	ldr	r4, [r5, #8]
 800611c:	e7cf      	b.n	80060be <__swbuf_r+0x1a>
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <__swbuf_r+0xa0>)
 8006120:	429c      	cmp	r4, r3
 8006122:	bf08      	it	eq
 8006124:	68ec      	ldreq	r4, [r5, #12]
 8006126:	e7ca      	b.n	80060be <__swbuf_r+0x1a>
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f81a 	bl	8006164 <__swsetup_r>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0cb      	beq.n	80060cc <__swbuf_r+0x28>
 8006134:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006138:	e7ea      	b.n	8006110 <__swbuf_r+0x6c>
 800613a:	bf00      	nop
 800613c:	08006c6c 	.word	0x08006c6c
 8006140:	08006c8c 	.word	0x08006c8c
 8006144:	08006c4c 	.word	0x08006c4c

08006148 <__ascii_wctomb>:
 8006148:	b149      	cbz	r1, 800615e <__ascii_wctomb+0x16>
 800614a:	2aff      	cmp	r2, #255	; 0xff
 800614c:	bf85      	ittet	hi
 800614e:	238a      	movhi	r3, #138	; 0x8a
 8006150:	6003      	strhi	r3, [r0, #0]
 8006152:	700a      	strbls	r2, [r1, #0]
 8006154:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006158:	bf98      	it	ls
 800615a:	2001      	movls	r0, #1
 800615c:	4770      	bx	lr
 800615e:	4608      	mov	r0, r1
 8006160:	4770      	bx	lr
	...

08006164 <__swsetup_r>:
 8006164:	4b32      	ldr	r3, [pc, #200]	; (8006230 <__swsetup_r+0xcc>)
 8006166:	b570      	push	{r4, r5, r6, lr}
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	4606      	mov	r6, r0
 800616c:	460c      	mov	r4, r1
 800616e:	b125      	cbz	r5, 800617a <__swsetup_r+0x16>
 8006170:	69ab      	ldr	r3, [r5, #24]
 8006172:	b913      	cbnz	r3, 800617a <__swsetup_r+0x16>
 8006174:	4628      	mov	r0, r5
 8006176:	f000 f985 	bl	8006484 <__sinit>
 800617a:	4b2e      	ldr	r3, [pc, #184]	; (8006234 <__swsetup_r+0xd0>)
 800617c:	429c      	cmp	r4, r3
 800617e:	d10f      	bne.n	80061a0 <__swsetup_r+0x3c>
 8006180:	686c      	ldr	r4, [r5, #4]
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006188:	0719      	lsls	r1, r3, #28
 800618a:	d42c      	bmi.n	80061e6 <__swsetup_r+0x82>
 800618c:	06dd      	lsls	r5, r3, #27
 800618e:	d411      	bmi.n	80061b4 <__swsetup_r+0x50>
 8006190:	2309      	movs	r3, #9
 8006192:	6033      	str	r3, [r6, #0]
 8006194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800619e:	e03e      	b.n	800621e <__swsetup_r+0xba>
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <__swsetup_r+0xd4>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d101      	bne.n	80061aa <__swsetup_r+0x46>
 80061a6:	68ac      	ldr	r4, [r5, #8]
 80061a8:	e7eb      	b.n	8006182 <__swsetup_r+0x1e>
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <__swsetup_r+0xd8>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	bf08      	it	eq
 80061b0:	68ec      	ldreq	r4, [r5, #12]
 80061b2:	e7e6      	b.n	8006182 <__swsetup_r+0x1e>
 80061b4:	0758      	lsls	r0, r3, #29
 80061b6:	d512      	bpl.n	80061de <__swsetup_r+0x7a>
 80061b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ba:	b141      	cbz	r1, 80061ce <__swsetup_r+0x6a>
 80061bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061c0:	4299      	cmp	r1, r3
 80061c2:	d002      	beq.n	80061ca <__swsetup_r+0x66>
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff fb6f 	bl	80058a8 <_free_r>
 80061ca:	2300      	movs	r3, #0
 80061cc:	6363      	str	r3, [r4, #52]	; 0x34
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061d4:	81a3      	strh	r3, [r4, #12]
 80061d6:	2300      	movs	r3, #0
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f043 0308 	orr.w	r3, r3, #8
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	b94b      	cbnz	r3, 80061fe <__swsetup_r+0x9a>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f4:	d003      	beq.n	80061fe <__swsetup_r+0x9a>
 80061f6:	4621      	mov	r1, r4
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 fa07 	bl	800660c <__smakebuf_r>
 80061fe:	89a0      	ldrh	r0, [r4, #12]
 8006200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006204:	f010 0301 	ands.w	r3, r0, #1
 8006208:	d00a      	beq.n	8006220 <__swsetup_r+0xbc>
 800620a:	2300      	movs	r3, #0
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	6963      	ldr	r3, [r4, #20]
 8006210:	425b      	negs	r3, r3
 8006212:	61a3      	str	r3, [r4, #24]
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	b943      	cbnz	r3, 800622a <__swsetup_r+0xc6>
 8006218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800621c:	d1ba      	bne.n	8006194 <__swsetup_r+0x30>
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	0781      	lsls	r1, r0, #30
 8006222:	bf58      	it	pl
 8006224:	6963      	ldrpl	r3, [r4, #20]
 8006226:	60a3      	str	r3, [r4, #8]
 8006228:	e7f4      	b.n	8006214 <__swsetup_r+0xb0>
 800622a:	2000      	movs	r0, #0
 800622c:	e7f7      	b.n	800621e <__swsetup_r+0xba>
 800622e:	bf00      	nop
 8006230:	2000000c 	.word	0x2000000c
 8006234:	08006c6c 	.word	0x08006c6c
 8006238:	08006c8c 	.word	0x08006c8c
 800623c:	08006c4c 	.word	0x08006c4c

08006240 <abort>:
 8006240:	b508      	push	{r3, lr}
 8006242:	2006      	movs	r0, #6
 8006244:	f000 fa52 	bl	80066ec <raise>
 8006248:	2001      	movs	r0, #1
 800624a:	f7fb fcb9 	bl	8001bc0 <_exit>
	...

08006250 <__sflush_r>:
 8006250:	898a      	ldrh	r2, [r1, #12]
 8006252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006256:	4605      	mov	r5, r0
 8006258:	0710      	lsls	r0, r2, #28
 800625a:	460c      	mov	r4, r1
 800625c:	d458      	bmi.n	8006310 <__sflush_r+0xc0>
 800625e:	684b      	ldr	r3, [r1, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	dc05      	bgt.n	8006270 <__sflush_r+0x20>
 8006264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	dc02      	bgt.n	8006270 <__sflush_r+0x20>
 800626a:	2000      	movs	r0, #0
 800626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006272:	2e00      	cmp	r6, #0
 8006274:	d0f9      	beq.n	800626a <__sflush_r+0x1a>
 8006276:	2300      	movs	r3, #0
 8006278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800627c:	682f      	ldr	r7, [r5, #0]
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	d032      	beq.n	80062e8 <__sflush_r+0x98>
 8006282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	075a      	lsls	r2, r3, #29
 8006288:	d505      	bpl.n	8006296 <__sflush_r+0x46>
 800628a:	6863      	ldr	r3, [r4, #4]
 800628c:	1ac0      	subs	r0, r0, r3
 800628e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006290:	b10b      	cbz	r3, 8006296 <__sflush_r+0x46>
 8006292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006294:	1ac0      	subs	r0, r0, r3
 8006296:	2300      	movs	r3, #0
 8006298:	4602      	mov	r2, r0
 800629a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800629c:	6a21      	ldr	r1, [r4, #32]
 800629e:	4628      	mov	r0, r5
 80062a0:	47b0      	blx	r6
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	d106      	bne.n	80062b6 <__sflush_r+0x66>
 80062a8:	6829      	ldr	r1, [r5, #0]
 80062aa:	291d      	cmp	r1, #29
 80062ac:	d82c      	bhi.n	8006308 <__sflush_r+0xb8>
 80062ae:	4a2a      	ldr	r2, [pc, #168]	; (8006358 <__sflush_r+0x108>)
 80062b0:	40ca      	lsrs	r2, r1
 80062b2:	07d6      	lsls	r6, r2, #31
 80062b4:	d528      	bpl.n	8006308 <__sflush_r+0xb8>
 80062b6:	2200      	movs	r2, #0
 80062b8:	6062      	str	r2, [r4, #4]
 80062ba:	04d9      	lsls	r1, r3, #19
 80062bc:	6922      	ldr	r2, [r4, #16]
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	d504      	bpl.n	80062cc <__sflush_r+0x7c>
 80062c2:	1c42      	adds	r2, r0, #1
 80062c4:	d101      	bne.n	80062ca <__sflush_r+0x7a>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	b903      	cbnz	r3, 80062cc <__sflush_r+0x7c>
 80062ca:	6560      	str	r0, [r4, #84]	; 0x54
 80062cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ce:	602f      	str	r7, [r5, #0]
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d0ca      	beq.n	800626a <__sflush_r+0x1a>
 80062d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d8:	4299      	cmp	r1, r3
 80062da:	d002      	beq.n	80062e2 <__sflush_r+0x92>
 80062dc:	4628      	mov	r0, r5
 80062de:	f7ff fae3 	bl	80058a8 <_free_r>
 80062e2:	2000      	movs	r0, #0
 80062e4:	6360      	str	r0, [r4, #52]	; 0x34
 80062e6:	e7c1      	b.n	800626c <__sflush_r+0x1c>
 80062e8:	6a21      	ldr	r1, [r4, #32]
 80062ea:	2301      	movs	r3, #1
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b0      	blx	r6
 80062f0:	1c41      	adds	r1, r0, #1
 80062f2:	d1c7      	bne.n	8006284 <__sflush_r+0x34>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0c4      	beq.n	8006284 <__sflush_r+0x34>
 80062fa:	2b1d      	cmp	r3, #29
 80062fc:	d001      	beq.n	8006302 <__sflush_r+0xb2>
 80062fe:	2b16      	cmp	r3, #22
 8006300:	d101      	bne.n	8006306 <__sflush_r+0xb6>
 8006302:	602f      	str	r7, [r5, #0]
 8006304:	e7b1      	b.n	800626a <__sflush_r+0x1a>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800630c:	81a3      	strh	r3, [r4, #12]
 800630e:	e7ad      	b.n	800626c <__sflush_r+0x1c>
 8006310:	690f      	ldr	r7, [r1, #16]
 8006312:	2f00      	cmp	r7, #0
 8006314:	d0a9      	beq.n	800626a <__sflush_r+0x1a>
 8006316:	0793      	lsls	r3, r2, #30
 8006318:	680e      	ldr	r6, [r1, #0]
 800631a:	bf08      	it	eq
 800631c:	694b      	ldreq	r3, [r1, #20]
 800631e:	600f      	str	r7, [r1, #0]
 8006320:	bf18      	it	ne
 8006322:	2300      	movne	r3, #0
 8006324:	eba6 0807 	sub.w	r8, r6, r7
 8006328:	608b      	str	r3, [r1, #8]
 800632a:	f1b8 0f00 	cmp.w	r8, #0
 800632e:	dd9c      	ble.n	800626a <__sflush_r+0x1a>
 8006330:	6a21      	ldr	r1, [r4, #32]
 8006332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006334:	4643      	mov	r3, r8
 8006336:	463a      	mov	r2, r7
 8006338:	4628      	mov	r0, r5
 800633a:	47b0      	blx	r6
 800633c:	2800      	cmp	r0, #0
 800633e:	dc06      	bgt.n	800634e <__sflush_r+0xfe>
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006346:	81a3      	strh	r3, [r4, #12]
 8006348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800634c:	e78e      	b.n	800626c <__sflush_r+0x1c>
 800634e:	4407      	add	r7, r0
 8006350:	eba8 0800 	sub.w	r8, r8, r0
 8006354:	e7e9      	b.n	800632a <__sflush_r+0xda>
 8006356:	bf00      	nop
 8006358:	20400001 	.word	0x20400001

0800635c <_fflush_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	690b      	ldr	r3, [r1, #16]
 8006360:	4605      	mov	r5, r0
 8006362:	460c      	mov	r4, r1
 8006364:	b913      	cbnz	r3, 800636c <_fflush_r+0x10>
 8006366:	2500      	movs	r5, #0
 8006368:	4628      	mov	r0, r5
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	b118      	cbz	r0, 8006376 <_fflush_r+0x1a>
 800636e:	6983      	ldr	r3, [r0, #24]
 8006370:	b90b      	cbnz	r3, 8006376 <_fflush_r+0x1a>
 8006372:	f000 f887 	bl	8006484 <__sinit>
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <_fflush_r+0x6c>)
 8006378:	429c      	cmp	r4, r3
 800637a:	d11b      	bne.n	80063b4 <_fflush_r+0x58>
 800637c:	686c      	ldr	r4, [r5, #4]
 800637e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0ef      	beq.n	8006366 <_fflush_r+0xa>
 8006386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006388:	07d0      	lsls	r0, r2, #31
 800638a:	d404      	bmi.n	8006396 <_fflush_r+0x3a>
 800638c:	0599      	lsls	r1, r3, #22
 800638e:	d402      	bmi.n	8006396 <_fflush_r+0x3a>
 8006390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006392:	f000 f915 	bl	80065c0 <__retarget_lock_acquire_recursive>
 8006396:	4628      	mov	r0, r5
 8006398:	4621      	mov	r1, r4
 800639a:	f7ff ff59 	bl	8006250 <__sflush_r>
 800639e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063a0:	07da      	lsls	r2, r3, #31
 80063a2:	4605      	mov	r5, r0
 80063a4:	d4e0      	bmi.n	8006368 <_fflush_r+0xc>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	059b      	lsls	r3, r3, #22
 80063aa:	d4dd      	bmi.n	8006368 <_fflush_r+0xc>
 80063ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ae:	f000 f908 	bl	80065c2 <__retarget_lock_release_recursive>
 80063b2:	e7d9      	b.n	8006368 <_fflush_r+0xc>
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <_fflush_r+0x70>)
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d101      	bne.n	80063be <_fflush_r+0x62>
 80063ba:	68ac      	ldr	r4, [r5, #8]
 80063bc:	e7df      	b.n	800637e <_fflush_r+0x22>
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <_fflush_r+0x74>)
 80063c0:	429c      	cmp	r4, r3
 80063c2:	bf08      	it	eq
 80063c4:	68ec      	ldreq	r4, [r5, #12]
 80063c6:	e7da      	b.n	800637e <_fflush_r+0x22>
 80063c8:	08006c6c 	.word	0x08006c6c
 80063cc:	08006c8c 	.word	0x08006c8c
 80063d0:	08006c4c 	.word	0x08006c4c

080063d4 <std>:
 80063d4:	2300      	movs	r3, #0
 80063d6:	b510      	push	{r4, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	e9c0 3300 	strd	r3, r3, [r0]
 80063de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063e2:	6083      	str	r3, [r0, #8]
 80063e4:	8181      	strh	r1, [r0, #12]
 80063e6:	6643      	str	r3, [r0, #100]	; 0x64
 80063e8:	81c2      	strh	r2, [r0, #14]
 80063ea:	6183      	str	r3, [r0, #24]
 80063ec:	4619      	mov	r1, r3
 80063ee:	2208      	movs	r2, #8
 80063f0:	305c      	adds	r0, #92	; 0x5c
 80063f2:	f7fd fba5 	bl	8003b40 <memset>
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <std+0x38>)
 80063f8:	6263      	str	r3, [r4, #36]	; 0x24
 80063fa:	4b05      	ldr	r3, [pc, #20]	; (8006410 <std+0x3c>)
 80063fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <std+0x40>)
 8006400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <std+0x44>)
 8006404:	6224      	str	r4, [r4, #32]
 8006406:	6323      	str	r3, [r4, #48]	; 0x30
 8006408:	bd10      	pop	{r4, pc}
 800640a:	bf00      	nop
 800640c:	08006725 	.word	0x08006725
 8006410:	08006747 	.word	0x08006747
 8006414:	0800677f 	.word	0x0800677f
 8006418:	080067a3 	.word	0x080067a3

0800641c <_cleanup_r>:
 800641c:	4901      	ldr	r1, [pc, #4]	; (8006424 <_cleanup_r+0x8>)
 800641e:	f000 b8af 	b.w	8006580 <_fwalk_reent>
 8006422:	bf00      	nop
 8006424:	0800635d 	.word	0x0800635d

08006428 <__sfmoreglue>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	1e4a      	subs	r2, r1, #1
 800642c:	2568      	movs	r5, #104	; 0x68
 800642e:	4355      	muls	r5, r2
 8006430:	460e      	mov	r6, r1
 8006432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006436:	f7ff fa87 	bl	8005948 <_malloc_r>
 800643a:	4604      	mov	r4, r0
 800643c:	b140      	cbz	r0, 8006450 <__sfmoreglue+0x28>
 800643e:	2100      	movs	r1, #0
 8006440:	e9c0 1600 	strd	r1, r6, [r0]
 8006444:	300c      	adds	r0, #12
 8006446:	60a0      	str	r0, [r4, #8]
 8006448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800644c:	f7fd fb78 	bl	8003b40 <memset>
 8006450:	4620      	mov	r0, r4
 8006452:	bd70      	pop	{r4, r5, r6, pc}

08006454 <__sfp_lock_acquire>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__sfp_lock_acquire+0x8>)
 8006456:	f000 b8b3 	b.w	80065c0 <__retarget_lock_acquire_recursive>
 800645a:	bf00      	nop
 800645c:	200002c8 	.word	0x200002c8

08006460 <__sfp_lock_release>:
 8006460:	4801      	ldr	r0, [pc, #4]	; (8006468 <__sfp_lock_release+0x8>)
 8006462:	f000 b8ae 	b.w	80065c2 <__retarget_lock_release_recursive>
 8006466:	bf00      	nop
 8006468:	200002c8 	.word	0x200002c8

0800646c <__sinit_lock_acquire>:
 800646c:	4801      	ldr	r0, [pc, #4]	; (8006474 <__sinit_lock_acquire+0x8>)
 800646e:	f000 b8a7 	b.w	80065c0 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	200002c3 	.word	0x200002c3

08006478 <__sinit_lock_release>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__sinit_lock_release+0x8>)
 800647a:	f000 b8a2 	b.w	80065c2 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	200002c3 	.word	0x200002c3

08006484 <__sinit>:
 8006484:	b510      	push	{r4, lr}
 8006486:	4604      	mov	r4, r0
 8006488:	f7ff fff0 	bl	800646c <__sinit_lock_acquire>
 800648c:	69a3      	ldr	r3, [r4, #24]
 800648e:	b11b      	cbz	r3, 8006498 <__sinit+0x14>
 8006490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006494:	f7ff bff0 	b.w	8006478 <__sinit_lock_release>
 8006498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800649c:	6523      	str	r3, [r4, #80]	; 0x50
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <__sinit+0x68>)
 80064a0:	4a13      	ldr	r2, [pc, #76]	; (80064f0 <__sinit+0x6c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	bf04      	itt	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	61a3      	streq	r3, [r4, #24]
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f820 	bl	80064f4 <__sfp>
 80064b4:	6060      	str	r0, [r4, #4]
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f81c 	bl	80064f4 <__sfp>
 80064bc:	60a0      	str	r0, [r4, #8]
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f818 	bl	80064f4 <__sfp>
 80064c4:	2200      	movs	r2, #0
 80064c6:	60e0      	str	r0, [r4, #12]
 80064c8:	2104      	movs	r1, #4
 80064ca:	6860      	ldr	r0, [r4, #4]
 80064cc:	f7ff ff82 	bl	80063d4 <std>
 80064d0:	68a0      	ldr	r0, [r4, #8]
 80064d2:	2201      	movs	r2, #1
 80064d4:	2109      	movs	r1, #9
 80064d6:	f7ff ff7d 	bl	80063d4 <std>
 80064da:	68e0      	ldr	r0, [r4, #12]
 80064dc:	2202      	movs	r2, #2
 80064de:	2112      	movs	r1, #18
 80064e0:	f7ff ff78 	bl	80063d4 <std>
 80064e4:	2301      	movs	r3, #1
 80064e6:	61a3      	str	r3, [r4, #24]
 80064e8:	e7d2      	b.n	8006490 <__sinit+0xc>
 80064ea:	bf00      	nop
 80064ec:	080068c8 	.word	0x080068c8
 80064f0:	0800641d 	.word	0x0800641d

080064f4 <__sfp>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	4607      	mov	r7, r0
 80064f8:	f7ff ffac 	bl	8006454 <__sfp_lock_acquire>
 80064fc:	4b1e      	ldr	r3, [pc, #120]	; (8006578 <__sfp+0x84>)
 80064fe:	681e      	ldr	r6, [r3, #0]
 8006500:	69b3      	ldr	r3, [r6, #24]
 8006502:	b913      	cbnz	r3, 800650a <__sfp+0x16>
 8006504:	4630      	mov	r0, r6
 8006506:	f7ff ffbd 	bl	8006484 <__sinit>
 800650a:	3648      	adds	r6, #72	; 0x48
 800650c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006510:	3b01      	subs	r3, #1
 8006512:	d503      	bpl.n	800651c <__sfp+0x28>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	b30b      	cbz	r3, 800655c <__sfp+0x68>
 8006518:	6836      	ldr	r6, [r6, #0]
 800651a:	e7f7      	b.n	800650c <__sfp+0x18>
 800651c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006520:	b9d5      	cbnz	r5, 8006558 <__sfp+0x64>
 8006522:	4b16      	ldr	r3, [pc, #88]	; (800657c <__sfp+0x88>)
 8006524:	60e3      	str	r3, [r4, #12]
 8006526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800652a:	6665      	str	r5, [r4, #100]	; 0x64
 800652c:	f000 f847 	bl	80065be <__retarget_lock_init_recursive>
 8006530:	f7ff ff96 	bl	8006460 <__sfp_lock_release>
 8006534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800653c:	6025      	str	r5, [r4, #0]
 800653e:	61a5      	str	r5, [r4, #24]
 8006540:	2208      	movs	r2, #8
 8006542:	4629      	mov	r1, r5
 8006544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006548:	f7fd fafa 	bl	8003b40 <memset>
 800654c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006554:	4620      	mov	r0, r4
 8006556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006558:	3468      	adds	r4, #104	; 0x68
 800655a:	e7d9      	b.n	8006510 <__sfp+0x1c>
 800655c:	2104      	movs	r1, #4
 800655e:	4638      	mov	r0, r7
 8006560:	f7ff ff62 	bl	8006428 <__sfmoreglue>
 8006564:	4604      	mov	r4, r0
 8006566:	6030      	str	r0, [r6, #0]
 8006568:	2800      	cmp	r0, #0
 800656a:	d1d5      	bne.n	8006518 <__sfp+0x24>
 800656c:	f7ff ff78 	bl	8006460 <__sfp_lock_release>
 8006570:	230c      	movs	r3, #12
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	e7ee      	b.n	8006554 <__sfp+0x60>
 8006576:	bf00      	nop
 8006578:	080068c8 	.word	0x080068c8
 800657c:	ffff0001 	.word	0xffff0001

08006580 <_fwalk_reent>:
 8006580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006584:	4606      	mov	r6, r0
 8006586:	4688      	mov	r8, r1
 8006588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800658c:	2700      	movs	r7, #0
 800658e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006592:	f1b9 0901 	subs.w	r9, r9, #1
 8006596:	d505      	bpl.n	80065a4 <_fwalk_reent+0x24>
 8006598:	6824      	ldr	r4, [r4, #0]
 800659a:	2c00      	cmp	r4, #0
 800659c:	d1f7      	bne.n	800658e <_fwalk_reent+0xe>
 800659e:	4638      	mov	r0, r7
 80065a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a4:	89ab      	ldrh	r3, [r5, #12]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d907      	bls.n	80065ba <_fwalk_reent+0x3a>
 80065aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065ae:	3301      	adds	r3, #1
 80065b0:	d003      	beq.n	80065ba <_fwalk_reent+0x3a>
 80065b2:	4629      	mov	r1, r5
 80065b4:	4630      	mov	r0, r6
 80065b6:	47c0      	blx	r8
 80065b8:	4307      	orrs	r7, r0
 80065ba:	3568      	adds	r5, #104	; 0x68
 80065bc:	e7e9      	b.n	8006592 <_fwalk_reent+0x12>

080065be <__retarget_lock_init_recursive>:
 80065be:	4770      	bx	lr

080065c0 <__retarget_lock_acquire_recursive>:
 80065c0:	4770      	bx	lr

080065c2 <__retarget_lock_release_recursive>:
 80065c2:	4770      	bx	lr

080065c4 <__swhatbuf_r>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	460e      	mov	r6, r1
 80065c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065cc:	2900      	cmp	r1, #0
 80065ce:	b096      	sub	sp, #88	; 0x58
 80065d0:	4614      	mov	r4, r2
 80065d2:	461d      	mov	r5, r3
 80065d4:	da07      	bge.n	80065e6 <__swhatbuf_r+0x22>
 80065d6:	2300      	movs	r3, #0
 80065d8:	602b      	str	r3, [r5, #0]
 80065da:	89b3      	ldrh	r3, [r6, #12]
 80065dc:	061a      	lsls	r2, r3, #24
 80065de:	d410      	bmi.n	8006602 <__swhatbuf_r+0x3e>
 80065e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e4:	e00e      	b.n	8006604 <__swhatbuf_r+0x40>
 80065e6:	466a      	mov	r2, sp
 80065e8:	f000 f902 	bl	80067f0 <_fstat_r>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	dbf2      	blt.n	80065d6 <__swhatbuf_r+0x12>
 80065f0:	9a01      	ldr	r2, [sp, #4]
 80065f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065fa:	425a      	negs	r2, r3
 80065fc:	415a      	adcs	r2, r3
 80065fe:	602a      	str	r2, [r5, #0]
 8006600:	e7ee      	b.n	80065e0 <__swhatbuf_r+0x1c>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	2000      	movs	r0, #0
 8006606:	6023      	str	r3, [r4, #0]
 8006608:	b016      	add	sp, #88	; 0x58
 800660a:	bd70      	pop	{r4, r5, r6, pc}

0800660c <__smakebuf_r>:
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006610:	079d      	lsls	r5, r3, #30
 8006612:	4606      	mov	r6, r0
 8006614:	460c      	mov	r4, r1
 8006616:	d507      	bpl.n	8006628 <__smakebuf_r+0x1c>
 8006618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	2301      	movs	r3, #1
 8006622:	6163      	str	r3, [r4, #20]
 8006624:	b002      	add	sp, #8
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	ab01      	add	r3, sp, #4
 800662a:	466a      	mov	r2, sp
 800662c:	f7ff ffca 	bl	80065c4 <__swhatbuf_r>
 8006630:	9900      	ldr	r1, [sp, #0]
 8006632:	4605      	mov	r5, r0
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff f987 	bl	8005948 <_malloc_r>
 800663a:	b948      	cbnz	r0, 8006650 <__smakebuf_r+0x44>
 800663c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d4ef      	bmi.n	8006624 <__smakebuf_r+0x18>
 8006644:	f023 0303 	bic.w	r3, r3, #3
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	e7e3      	b.n	8006618 <__smakebuf_r+0xc>
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <__smakebuf_r+0x7c>)
 8006652:	62b3      	str	r3, [r6, #40]	; 0x28
 8006654:	89a3      	ldrh	r3, [r4, #12]
 8006656:	6020      	str	r0, [r4, #0]
 8006658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665c:	81a3      	strh	r3, [r4, #12]
 800665e:	9b00      	ldr	r3, [sp, #0]
 8006660:	6163      	str	r3, [r4, #20]
 8006662:	9b01      	ldr	r3, [sp, #4]
 8006664:	6120      	str	r0, [r4, #16]
 8006666:	b15b      	cbz	r3, 8006680 <__smakebuf_r+0x74>
 8006668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800666c:	4630      	mov	r0, r6
 800666e:	f000 f8d1 	bl	8006814 <_isatty_r>
 8006672:	b128      	cbz	r0, 8006680 <__smakebuf_r+0x74>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	89a0      	ldrh	r0, [r4, #12]
 8006682:	4305      	orrs	r5, r0
 8006684:	81a5      	strh	r5, [r4, #12]
 8006686:	e7cd      	b.n	8006624 <__smakebuf_r+0x18>
 8006688:	0800641d 	.word	0x0800641d

0800668c <_malloc_usable_size_r>:
 800668c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006690:	1f18      	subs	r0, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	bfbc      	itt	lt
 8006696:	580b      	ldrlt	r3, [r1, r0]
 8006698:	18c0      	addlt	r0, r0, r3
 800669a:	4770      	bx	lr

0800669c <_raise_r>:
 800669c:	291f      	cmp	r1, #31
 800669e:	b538      	push	{r3, r4, r5, lr}
 80066a0:	4604      	mov	r4, r0
 80066a2:	460d      	mov	r5, r1
 80066a4:	d904      	bls.n	80066b0 <_raise_r+0x14>
 80066a6:	2316      	movs	r3, #22
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066b2:	b112      	cbz	r2, 80066ba <_raise_r+0x1e>
 80066b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066b8:	b94b      	cbnz	r3, 80066ce <_raise_r+0x32>
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 f830 	bl	8006720 <_getpid_r>
 80066c0:	462a      	mov	r2, r5
 80066c2:	4601      	mov	r1, r0
 80066c4:	4620      	mov	r0, r4
 80066c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ca:	f000 b817 	b.w	80066fc <_kill_r>
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d00a      	beq.n	80066e8 <_raise_r+0x4c>
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	d103      	bne.n	80066de <_raise_r+0x42>
 80066d6:	2316      	movs	r3, #22
 80066d8:	6003      	str	r3, [r0, #0]
 80066da:	2001      	movs	r0, #1
 80066dc:	e7e7      	b.n	80066ae <_raise_r+0x12>
 80066de:	2400      	movs	r4, #0
 80066e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066e4:	4628      	mov	r0, r5
 80066e6:	4798      	blx	r3
 80066e8:	2000      	movs	r0, #0
 80066ea:	e7e0      	b.n	80066ae <_raise_r+0x12>

080066ec <raise>:
 80066ec:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <raise+0xc>)
 80066ee:	4601      	mov	r1, r0
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f7ff bfd3 	b.w	800669c <_raise_r>
 80066f6:	bf00      	nop
 80066f8:	2000000c 	.word	0x2000000c

080066fc <_kill_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d07      	ldr	r5, [pc, #28]	; (800671c <_kill_r+0x20>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	f7fb fa49 	bl	8001ba0 <_kill>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d102      	bne.n	8006718 <_kill_r+0x1c>
 8006712:	682b      	ldr	r3, [r5, #0]
 8006714:	b103      	cbz	r3, 8006718 <_kill_r+0x1c>
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	bd38      	pop	{r3, r4, r5, pc}
 800671a:	bf00      	nop
 800671c:	200002bc 	.word	0x200002bc

08006720 <_getpid_r>:
 8006720:	f7fb ba36 	b.w	8001b90 <_getpid>

08006724 <__sread>:
 8006724:	b510      	push	{r4, lr}
 8006726:	460c      	mov	r4, r1
 8006728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672c:	f000 f894 	bl	8006858 <_read_r>
 8006730:	2800      	cmp	r0, #0
 8006732:	bfab      	itete	ge
 8006734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006736:	89a3      	ldrhlt	r3, [r4, #12]
 8006738:	181b      	addge	r3, r3, r0
 800673a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800673e:	bfac      	ite	ge
 8006740:	6563      	strge	r3, [r4, #84]	; 0x54
 8006742:	81a3      	strhlt	r3, [r4, #12]
 8006744:	bd10      	pop	{r4, pc}

08006746 <__swrite>:
 8006746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674a:	461f      	mov	r7, r3
 800674c:	898b      	ldrh	r3, [r1, #12]
 800674e:	05db      	lsls	r3, r3, #23
 8006750:	4605      	mov	r5, r0
 8006752:	460c      	mov	r4, r1
 8006754:	4616      	mov	r6, r2
 8006756:	d505      	bpl.n	8006764 <__swrite+0x1e>
 8006758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675c:	2302      	movs	r3, #2
 800675e:	2200      	movs	r2, #0
 8006760:	f000 f868 	bl	8006834 <_lseek_r>
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800676a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	4632      	mov	r2, r6
 8006772:	463b      	mov	r3, r7
 8006774:	4628      	mov	r0, r5
 8006776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800677a:	f000 b817 	b.w	80067ac <_write_r>

0800677e <__sseek>:
 800677e:	b510      	push	{r4, lr}
 8006780:	460c      	mov	r4, r1
 8006782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006786:	f000 f855 	bl	8006834 <_lseek_r>
 800678a:	1c43      	adds	r3, r0, #1
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	bf15      	itete	ne
 8006790:	6560      	strne	r0, [r4, #84]	; 0x54
 8006792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800679a:	81a3      	strheq	r3, [r4, #12]
 800679c:	bf18      	it	ne
 800679e:	81a3      	strhne	r3, [r4, #12]
 80067a0:	bd10      	pop	{r4, pc}

080067a2 <__sclose>:
 80067a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a6:	f000 b813 	b.w	80067d0 <_close_r>
	...

080067ac <_write_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	; (80067cc <_write_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fb fa27 	bl	8001c0e <_write>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_write_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_write_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	200002bc 	.word	0x200002bc

080067d0 <_close_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d06      	ldr	r5, [pc, #24]	; (80067ec <_close_r+0x1c>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	f7fb fa33 	bl	8001c46 <_close>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_close_r+0x1a>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_close_r+0x1a>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	200002bc 	.word	0x200002bc

080067f0 <_fstat_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d07      	ldr	r5, [pc, #28]	; (8006810 <_fstat_r+0x20>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	4611      	mov	r1, r2
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	f7fb fa2e 	bl	8001c5e <_fstat>
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	d102      	bne.n	800680c <_fstat_r+0x1c>
 8006806:	682b      	ldr	r3, [r5, #0]
 8006808:	b103      	cbz	r3, 800680c <_fstat_r+0x1c>
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	bd38      	pop	{r3, r4, r5, pc}
 800680e:	bf00      	nop
 8006810:	200002bc 	.word	0x200002bc

08006814 <_isatty_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	; (8006830 <_isatty_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fb fa2d 	bl	8001c7e <_isatty>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_isatty_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_isatty_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200002bc 	.word	0x200002bc

08006834 <_lseek_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	; (8006854 <_lseek_r+0x20>)
 8006838:	4604      	mov	r4, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb fa26 	bl	8001c94 <_lseek>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_lseek_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_lseek_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	200002bc 	.word	0x200002bc

08006858 <_read_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d07      	ldr	r5, [pc, #28]	; (8006878 <_read_r+0x20>)
 800685c:	4604      	mov	r4, r0
 800685e:	4608      	mov	r0, r1
 8006860:	4611      	mov	r1, r2
 8006862:	2200      	movs	r2, #0
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fb f9b4 	bl	8001bd4 <_read>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_read_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_read_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	200002bc 	.word	0x200002bc

0800687c <_init>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr

08006888 <_fini>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr
