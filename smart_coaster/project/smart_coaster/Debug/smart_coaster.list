
smart_coaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ec4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008078  08008078  00018078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000001e0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003bc  200003bc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fd0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ff  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  00034ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00035aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025839  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013850  00000000  00000000  0005c179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de472  00000000  00000000  0006f9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014de3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005308  00000000  00000000  0014de90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800805c 	.word	0x0800805c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800805c 	.word	0x0800805c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_GPIO_Init>:
     PB6   ------> FMC_SDNE1
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	4bb2      	ldr	r3, [pc, #712]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4ab1      	ldr	r2, [pc, #708]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ee0:	f043 0310 	orr.w	r3, r3, #16
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4baf      	ldr	r3, [pc, #700]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	623b      	str	r3, [r7, #32]
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4aaa      	ldr	r2, [pc, #680]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4ba4      	ldr	r3, [pc, #656]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4aa3      	ldr	r2, [pc, #652]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a9c      	ldr	r2, [pc, #624]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b9a      	ldr	r3, [pc, #616]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b96      	ldr	r3, [pc, #600]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a95      	ldr	r2, [pc, #596]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b85      	ldr	r3, [pc, #532]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a80      	ldr	r2, [pc, #512]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b7e      	ldr	r3, [pc, #504]	; (80011a4 <MX_GPIO_Init+0x2e4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	487b      	ldr	r0, [pc, #492]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000fbc:	f001 fcf2 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2116      	movs	r1, #22
 8000fc4:	4879      	ldr	r0, [pc, #484]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8000fc6:	f001 fced 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4878      	ldr	r0, [pc, #480]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 8000fd0:	f001 fce8 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000fda:	4876      	ldr	r0, [pc, #472]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 8000fdc:	f001 fce2 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fe6:	4874      	ldr	r0, [pc, #464]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 8000fe8:	f001 fcdc 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4869      	ldr	r0, [pc, #420]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8001004:	f001 fb0a 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A2_Pin|A3_Pin|A5_Pin|SDNRAS_Pin
 8001008:	f64f 032c 	movw	r3, #63532	; 0xf82c
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
                          |A6_Pin|A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800101a:	230c      	movs	r3, #12
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4865      	ldr	r0, [pc, #404]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001026:	f001 faf9 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = esnes_pmet_Pin;
 800102a:	2310      	movs	r3, #16
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(esnes_pmet_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	485f      	ldr	r0, [pc, #380]	; (80011bc <MX_GPIO_Init+0x2fc>)
 800103e:	f001 faed 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001042:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001054:	2305      	movs	r3, #5
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4857      	ldr	r0, [pc, #348]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001060:	f001 fadc 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001064:	2301      	movs	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001074:	230c      	movs	r3, #12
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	484b      	ldr	r0, [pc, #300]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8001080:	f001 facc 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001084:	2316      	movs	r3, #22
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4844      	ldr	r0, [pc, #272]	; (80011ac <MX_GPIO_Init+0x2ec>)
 800109c:	f001 fabe 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80010a0:	f248 0307 	movw	r3, #32775	; 0x8007
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	483e      	ldr	r0, [pc, #248]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 80010b8:	f001 fab0 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4837      	ldr	r0, [pc, #220]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 80010d4:	f001 faa2 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010d8:	2304      	movs	r3, #4
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4835      	ldr	r0, [pc, #212]	; (80011c0 <MX_GPIO_Init+0x300>)
 80010ec:	f001 fa96 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010f0:	f248 1333 	movw	r3, #33075	; 0x8133
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001102:	230c      	movs	r3, #12
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	482a      	ldr	r0, [pc, #168]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 800110e:	f001 fa85 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001112:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001124:	230c      	movs	r3, #12
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	481e      	ldr	r0, [pc, #120]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8001130:	f001 fa74 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001134:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001146:	230c      	movs	r3, #12
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_GPIO_Init+0x300>)
 8001152:	f001 fa63 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x300>)
 800116c:	f001 fa56 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001170:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001182:	230c      	movs	r3, #12
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 800118e:	f001 fa45 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a0:	e010      	b.n	80011c4 <MX_GPIO_Init+0x304>
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40021400 	.word	0x40021400
 80011c0:	40020400 	.word	0x40020400
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	483a      	ldr	r0, [pc, #232]	; (80012b4 <MX_GPIO_Init+0x3f4>)
 80011cc:	f001 fa26 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80011d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_GPIO_Init+0x3f4>)
 80011ea:	f001 fa17 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80011ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001200:	2304      	movs	r3, #4
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	482b      	ldr	r0, [pc, #172]	; (80012b8 <MX_GPIO_Init+0x3f8>)
 800120c:	f001 fa06 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001216:	2312      	movs	r3, #18
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121a:	2301      	movs	r3, #1
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001222:	2304      	movs	r3, #4
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	4823      	ldr	r0, [pc, #140]	; (80012bc <MX_GPIO_Init+0x3fc>)
 800122e:	f001 f9f5 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001232:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001244:	2307      	movs	r3, #7
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_GPIO_Init+0x3fc>)
 8001250:	f001 f9e4 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001254:	23a0      	movs	r3, #160	; 0xa0
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <MX_GPIO_Init+0x3f4>)
 800126a:	f001 f9d7 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800126e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <MX_GPIO_Init+0x400>)
 8001288:	f001 f9c8 	bl	800261c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129c:	230c      	movs	r3, #12
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <MX_GPIO_Init+0x404>)
 80012a8:	f001 f9b8 	bl	800261c <HAL_GPIO_Init>

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020400 	.word	0x40020400

080012c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f023 030f 	bic.w	r3, r3, #15
 80012d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	f043 030c 	orr.w	r3, r3, #12
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	f043 030c 	orr.w	r3, r3, #12
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	b2db      	uxtb	r3, r3
 8001306:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001308:	f107 0208 	add.w	r2, r7, #8
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2304      	movs	r3, #4
 8001312:	214e      	movs	r1, #78	; 0x4e
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <lcd_send_cmd+0x5c>)
 8001316:	f001 fca3 	bl	8002c60 <HAL_I2C_Master_Transmit>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000210 	.word	0x20000210

08001328 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f023 030f 	bic.w	r3, r3, #15
 8001338:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	f043 030d 	orr.w	r3, r3, #13
 8001346:	b2db      	uxtb	r3, r3
 8001348:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f043 0309 	orr.w	r3, r3, #9
 8001350:	b2db      	uxtb	r3, r3
 8001352:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	f043 030d 	orr.w	r3, r3, #13
 800135a:	b2db      	uxtb	r3, r3
 800135c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	f043 0309 	orr.w	r3, r3, #9
 8001364:	b2db      	uxtb	r3, r3
 8001366:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2304      	movs	r3, #4
 8001372:	214e      	movs	r1, #78	; 0x4e
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <lcd_send_data+0x5c>)
 8001376:	f001 fc73 	bl	8002c60 <HAL_I2C_Master_Transmit>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000210 	.word	0x20000210

08001388 <lcd_clear>:

void lcd_clear (void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800138e:	2080      	movs	r0, #128	; 0x80
 8001390:	f7ff ff9a 	bl	80012c8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	e005      	b.n	80013a6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800139a:	2020      	movs	r0, #32
 800139c:	f7ff ffc4 	bl	8001328 <lcd_send_data>
	for (int i=0; i<70; i++)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b45      	cmp	r3, #69	; 0x45
 80013aa:	ddf6      	ble.n	800139a <lcd_clear+0x12>
	}
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
    switch (row)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <lcd_put_cur+0x18>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <lcd_put_cur+0x22>
 80013cc:	e009      	b.n	80013e2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	603b      	str	r3, [r7, #0]
            break;
 80013d6:	e004      	b.n	80013e2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80013de:	603b      	str	r3, [r7, #0]
            break;
 80013e0:	bf00      	nop
    }

    lcd_send_cmd (col);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff6e 	bl	80012c8 <lcd_send_cmd>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <lcd_init>:


void lcd_init (void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f001 f805 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x30);
 80013fe:	2030      	movs	r0, #48	; 0x30
 8001400:	f7ff ff62 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001404:	2005      	movs	r0, #5
 8001406:	f000 ffff 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x30);
 800140a:	2030      	movs	r0, #48	; 0x30
 800140c:	f7ff ff5c 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001410:	2001      	movs	r0, #1
 8001412:	f000 fff9 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001416:	2030      	movs	r0, #48	; 0x30
 8001418:	f7ff ff56 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(10);
 800141c:	200a      	movs	r0, #10
 800141e:	f000 fff3 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001422:	2020      	movs	r0, #32
 8001424:	f7ff ff50 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f000 ffed 	bl	8002408 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800142e:	2028      	movs	r0, #40	; 0x28
 8001430:	f7ff ff4a 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f000 ffe7 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800143a:	2008      	movs	r0, #8
 800143c:	f7ff ff44 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 ffe1 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ff3e 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f000 ffdb 	bl	8002408 <HAL_Delay>
	HAL_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f000 ffd8 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001458:	2006      	movs	r0, #6
 800145a:	f7ff ff35 	bl	80012c8 <lcd_send_cmd>
	HAL_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f000 ffd2 	bl	8002408 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001464:	200c      	movs	r0, #12
 8001466:	f7ff ff2f 	bl	80012c8 <lcd_send_cmd>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}

0800146e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001476:	e006      	b.n	8001486 <lcd_send_string+0x18>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff51 	bl	8001328 <lcd_send_data>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f4      	bne.n	8001478 <lcd_send_string+0xa>
}
 800148e:	bf00      	nop
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_I2C2_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <MX_I2C2_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_I2C2_Init+0x74>)
 80014a4:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <MX_I2C2_Init+0x7c>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_I2C2_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_I2C2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_I2C2_Init+0x74>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_I2C2_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_I2C2_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_I2C2_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_I2C2_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_I2C2_Init+0x74>)
 80014d6:	f001 fa7f 	bl	80029d8 <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 fcae 	bl	8001e40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4809      	ldr	r0, [pc, #36]	; (800150c <MX_I2C2_Init+0x74>)
 80014e8:	f001 fec1 	bl	800326e <HAL_I2CEx_ConfigAnalogFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80014f2:	f000 fca5 	bl	8001e40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_I2C2_Init+0x74>)
 80014fa:	f001 fef4 	bl	80032e6 <HAL_I2CEx_ConfigDigitalFilter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001504:	f000 fc9c 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000210 	.word	0x20000210
 8001510:	40005800 	.word	0x40005800
 8001514:	000186a0 	.word	0x000186a0

08001518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_I2C_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001556:	2303      	movs	r3, #3
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001566:	2304      	movs	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <HAL_I2C_MspInit+0x8c>)
 8001572:	f001 f853 	bl	800261c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_I2C_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005800 	.word	0x40005800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021400 	.word	0x40021400

080015a8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09a      	sub	sp, #104	; 0x68
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 feb2 	bl	8005320 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2234      	movs	r2, #52	; 0x34
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 feac 	bl	8005320 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015ca:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <MX_LTDC_Init+0x160>)
 80015cc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015da:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015ee:	2203      	movs	r2, #3
 80015f0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80015f2:	4b44      	ldr	r3, [pc, #272]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015f4:	220e      	movs	r2, #14
 80015f6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <MX_LTDC_Init+0x15c>)
 80015fa:	2205      	movs	r2, #5
 80015fc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001600:	f240 228e 	movw	r2, #654	; 0x28e
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001608:	f240 12e5 	movw	r2, #485	; 0x1e5
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001610:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001618:	f240 12e7 	movw	r2, #487	; 0x1e7
 800161c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001636:	4833      	ldr	r0, [pc, #204]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001638:	f001 fe94 	bl	8003364 <HAL_LTDC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001642:	f000 fbfd 	bl	8001e40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001656:	2300      	movs	r3, #0
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001666:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001668:	2305      	movs	r3, #5
 800166a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800168a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	481c      	ldr	r0, [pc, #112]	; (8001704 <MX_LTDC_Init+0x15c>)
 8001694:	f001 ff36 	bl	8003504 <HAL_LTDC_ConfigLayer>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800169e:	f000 fbcf 	bl	8001e40 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016c4:	2305      	movs	r3, #5
 80016c6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_LTDC_Init+0x15c>)
 80016ee:	f001 ff09 	bl	8003504 <HAL_LTDC_ConfigLayer>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80016f8:	f000 fba2 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3768      	adds	r7, #104	; 0x68
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000264 	.word	0x20000264
 8001708:	40016800 	.word	0x40016800

0800170c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09a      	sub	sp, #104	; 0x68
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	2230      	movs	r2, #48	; 0x30
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fdf7 	bl	8005320 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a81      	ldr	r2, [pc, #516]	; (800193c <HAL_LTDC_MspInit+0x230>)
 8001738:	4293      	cmp	r3, r2
 800173a:	f040 80fa 	bne.w	8001932 <HAL_LTDC_MspInit+0x226>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800173e:	2308      	movs	r3, #8
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001742:	2332      	movs	r3, #50	; 0x32
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001746:	2302      	movs	r3, #2
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800174a:	2300      	movs	r3, #0
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fd0c 	bl	8004170 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800175e:	f000 fb6f 	bl	8001e40 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a75      	ldr	r2, [pc, #468]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 800176c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b73      	ldr	r3, [pc, #460]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a67      	ldr	r2, [pc, #412]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b61      	ldr	r3, [pc, #388]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a60      	ldr	r2, [pc, #384]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b5a      	ldr	r3, [pc, #360]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a59      	ldr	r2, [pc, #356]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a52      	ldr	r2, [pc, #328]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <HAL_LTDC_MspInit+0x234>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001838:	230e      	movs	r3, #14
 800183a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001840:	4619      	mov	r1, r3
 8001842:	4840      	ldr	r0, [pc, #256]	; (8001944 <HAL_LTDC_MspInit+0x238>)
 8001844:	f000 feea 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001848:	f641 0358 	movw	r3, #6232	; 0x1858
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800185a:	230e      	movs	r3, #14
 800185c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001862:	4619      	mov	r1, r3
 8001864:	4838      	ldr	r0, [pc, #224]	; (8001948 <HAL_LTDC_MspInit+0x23c>)
 8001866:	f000 fed9 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800186a:	2303      	movs	r3, #3
 800186c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800187a:	2309      	movs	r3, #9
 800187c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001882:	4619      	mov	r1, r3
 8001884:	4831      	ldr	r0, [pc, #196]	; (800194c <HAL_LTDC_MspInit+0x240>)
 8001886:	f000 fec9 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800188a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800188e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800189c:	230e      	movs	r3, #14
 800189e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a4:	4619      	mov	r1, r3
 80018a6:	4829      	ldr	r0, [pc, #164]	; (800194c <HAL_LTDC_MspInit+0x240>)
 80018a8:	f000 feb8 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80018ac:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80018b0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018be:	230e      	movs	r3, #14
 80018c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018c6:	4619      	mov	r1, r3
 80018c8:	4821      	ldr	r0, [pc, #132]	; (8001950 <HAL_LTDC_MspInit+0x244>)
 80018ca:	f000 fea7 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80018ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018e0:	230e      	movs	r3, #14
 80018e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018e8:	4619      	mov	r1, r3
 80018ea:	481a      	ldr	r0, [pc, #104]	; (8001954 <HAL_LTDC_MspInit+0x248>)
 80018ec:	f000 fe96 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80018f0:	2348      	movs	r3, #72	; 0x48
 80018f2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001900:	230e      	movs	r3, #14
 8001902:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001908:	4619      	mov	r1, r3
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <HAL_LTDC_MspInit+0x24c>)
 800190c:	f000 fe86 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001922:	2309      	movs	r3, #9
 8001924:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800192a:	4619      	mov	r1, r3
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <HAL_LTDC_MspInit+0x244>)
 800192e:	f000 fe75 	bl	800261c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001932:	bf00      	nop
 8001934:	3768      	adds	r7, #104	; 0x68
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40016800 	.word	0x40016800
 8001940:	40023800 	.word	0x40023800
 8001944:	40021400 	.word	0x40021400
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40021800 	.word	0x40021800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00

0800195c <delay>:
*/
//DHT_DataTypedef DHT11_Data;
//float Temperature, Humidity;

void delay (uint16_t time)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <delay+0x30>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 800196e:	bf00      	nop
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <delay+0x30>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3f9      	bcc.n	8001970 <delay+0x14>
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000318 	.word	0x20000318

08001990 <buzzer_beep>:

void buzzer_beep(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
	int x = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
	for(x=10; x<30; x=x+1)
 800199a:	230a      	movs	r3, #10
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	e010      	b.n	80019c2 <buzzer_beep+0x32>
	{
	  __HAL_TIM_SET_AUTORELOAD(&htim2, x*2);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	005a      	lsls	r2, r3, #1
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <buzzer_beep+0x48>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <buzzer_beep+0x48>)
 80019b2:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, x);
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <buzzer_beep+0x48>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	639a      	str	r2, [r3, #56]	; 0x38
	for(x=10; x<30; x=x+1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3301      	adds	r3, #1
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b1d      	cmp	r3, #29
 80019c6:	ddeb      	ble.n	80019a0 <buzzer_beep+0x10>
	}
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000360 	.word	0x20000360

080019dc <stop_buzzer>:

void stop_buzzer(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 0);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <stop_buzzer+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000360 	.word	0x20000360

080019f8 <Display_Temp>:

void Display_Temp (float Temp)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fccd 	bl	80013b6 <lcd_put_cur>

//	sprintf (str, "TEMP:- %.2f ", Temp);
	sprintf (str, "TEMP: %.2f ", Temp);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe fda3 	bl	8000568 <__aeabi_f2d>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	f107 000c 	add.w	r0, r7, #12
 8001a2a:	4907      	ldr	r1, [pc, #28]	; (8001a48 <Display_Temp+0x50>)
 8001a2c:	f004 f8ea 	bl	8005c04 <siprintf>
	lcd_send_string(str);
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fd1a 	bl	800146e <lcd_send_string>
	lcd_send_data('C');
 8001a3a:	2043      	movs	r0, #67	; 0x43
 8001a3c:	f7ff fc74 	bl	8001328 <lcd_send_data>
}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	08008078 	.word	0x08008078

08001a4c <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fdce 	bl	800261c <HAL_GPIO_Init>
}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fdb0 	bl	800261c <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DHT11_Start>:

#define DHT11_PORT esnes_pmet_GPIO_Port
#define DHT11_PIN esnes_pmet_Pin

void DHT11_Start (void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001ac8:	2110      	movs	r1, #16
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <DHT11_Start+0x3c>)
 8001acc:	f7ff ffbe 	bl	8001a4c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <DHT11_Start+0x3c>)
 8001ad6:	f000 ff65 	bl	80029a4 <HAL_GPIO_WritePin>
	delay (18000);   // wait for 18ms
 8001ada:	f244 6050 	movw	r0, #18000	; 0x4650
 8001ade:	f7ff ff3d 	bl	800195c <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <DHT11_Start+0x3c>)
 8001ae8:	f000 ff5c 	bl	80029a4 <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001aec:	2014      	movs	r0, #20
 8001aee:	f7ff ff35 	bl	800195c <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001af2:	2110      	movs	r1, #16
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DHT11_Start+0x3c>)
 8001af6:	f7ff ffc7 	bl	8001a88 <Set_Pin_Input>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021400 	.word	0x40021400

08001b04 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001b0e:	2028      	movs	r0, #40	; 0x28
 8001b10:	f7ff ff24 	bl	800195c <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001b14:	2110      	movs	r1, #16
 8001b16:	4811      	ldr	r0, [pc, #68]	; (8001b5c <DHT11_Check_Response+0x58>)
 8001b18:	f000 ff2c 	bl	8002974 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <DHT11_Check_Response+0x3c>
	{
		delay (80);
 8001b22:	2050      	movs	r0, #80	; 0x50
 8001b24:	f7ff ff1a 	bl	800195c <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001b28:	2110      	movs	r1, #16
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <DHT11_Check_Response+0x58>)
 8001b2c:	f000 ff22 	bl	8002974 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <DHT11_Check_Response+0x38>
 8001b36:	2301      	movs	r3, #1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e001      	b.n	8001b40 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001b3c:	23ff      	movs	r3, #255	; 0xff
 8001b3e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001b40:	bf00      	nop
 8001b42:	2110      	movs	r1, #16
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <DHT11_Check_Response+0x58>)
 8001b46:	f000 ff15 	bl	8002974 <HAL_GPIO_ReadPin>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f8      	bne.n	8001b42 <DHT11_Check_Response+0x3e>

	return Response;
 8001b50:	79fb      	ldrb	r3, [r7, #7]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021400 	.word	0x40021400

08001b60 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	71bb      	strb	r3, [r7, #6]
 8001b6a:	e037      	b.n	8001bdc <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001b6c:	bf00      	nop
 8001b6e:	2110      	movs	r1, #16
 8001b70:	481e      	ldr	r0, [pc, #120]	; (8001bec <DHT11_Read+0x8c>)
 8001b72:	f000 feff 	bl	8002974 <HAL_GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f8      	beq.n	8001b6e <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8001b7c:	2028      	movs	r0, #40	; 0x28
 8001b7e:	f7ff feed 	bl	800195c <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001b82:	2110      	movs	r1, #16
 8001b84:	4819      	ldr	r0, [pc, #100]	; (8001bec <DHT11_Read+0x8c>)
 8001b86:	f000 fef5 	bl	8002974 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10e      	bne.n	8001bae <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2201      	movs	r2, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	e00b      	b.n	8001bc6 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001bae:	79bb      	ldrb	r3, [r7, #6]
 8001bb0:	f1c3 0307 	rsb	r3, r3, #7
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001bc6:	bf00      	nop
 8001bc8:	2110      	movs	r1, #16
 8001bca:	4808      	ldr	r0, [pc, #32]	; (8001bec <DHT11_Read+0x8c>)
 8001bcc:	f000 fed2 	bl	8002974 <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f8      	bne.n	8001bc8 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	71bb      	strb	r3, [r7, #6]
 8001bdc:	79bb      	ldrb	r3, [r7, #6]
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	d9c4      	bls.n	8001b6c <DHT11_Read+0xc>
	}
	return i;
 8001be2:	79fb      	ldrb	r3, [r7, #7]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021400 	.word	0x40021400

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf4:	f000 fb96 	bl	8002324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf8:	f000 f8b6 	bl	8001d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfc:	f7ff f960 	bl	8000ec0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001c00:	f7ff fc4a 	bl	8001498 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001c04:	f000 fac0 	bl	8002188 <MX_TIM6_Init>
  MX_LTDC_Init();
 8001c08:	f7ff fcce 	bl	80015a8 <MX_LTDC_Init>
  MX_TIM2_Init();
 8001c0c:	f000 fa48 	bl	80020a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8001c10:	4848      	ldr	r0, [pc, #288]	; (8001d34 <main+0x144>)
 8001c12:	f002 fcbb 	bl	800458c <HAL_TIM_Base_Start>


  /* Initialize the PWM timer */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); 
 8001c16:	2104      	movs	r1, #4
 8001c18:	4847      	ldr	r0, [pc, #284]	; (8001d38 <main+0x148>)
 8001c1a:	f002 fd79 	bl	8004710 <HAL_TIM_PWM_Start>

  lcd_init();
 8001c1e:	f7ff fbe9 	bl	80013f4 <lcd_init>


  HAL_Delay(1000);
 8001c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c26:	f000 fbef 	bl	8002408 <HAL_Delay>
  lcd_clear();
 8001c2a:	f7ff fbad 	bl	8001388 <lcd_clear>




  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4842      	ldr	r0, [pc, #264]	; (8001d3c <main+0x14c>)
 8001c34:	f000 feb6 	bl	80029a4 <HAL_GPIO_WritePin>
//	  HAL_Delay(100);

//	  buzzer_beep();
//	  HAL_Delay(500);

	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	483f      	ldr	r0, [pc, #252]	; (8001d3c <main+0x14c>)
 8001c3e:	f000 feb1 	bl	80029a4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c46:	f000 fbdf 	bl	8002408 <HAL_Delay>
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2140      	movs	r1, #64	; 0x40
 8001c4e:	483b      	ldr	r0, [pc, #236]	; (8001d3c <main+0x14c>)
 8001c50:	f000 fea8 	bl	80029a4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c58:	f000 fbd6 	bl	8002408 <HAL_Delay>
	  stop_buzzer();
 8001c5c:	f7ff febe 	bl	80019dc <stop_buzzer>
	  HAL_Delay(500);
 8001c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c64:	f000 fbd0 	bl	8002408 <HAL_Delay>

//	  MPU6050_Read_Accel();
//	  MPU6050_Read_Gyro();


	  lcd_init();
 8001c68:	f7ff fbc4 	bl	80013f4 <lcd_init>
	  HAL_Delay(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c70:	f000 fbca 	bl	8002408 <HAL_Delay>
	  lcd_clear();
 8001c74:	f7ff fb88 	bl	8001388 <lcd_clear>
	  /* Display current temperature */
	  Display_Temp(Temperature);
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <main+0x150>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f7ff feb9 	bl	80019f8 <Display_Temp>
//	  Display_Rh(Humidity);



	  DHT11_Start();
 8001c86:	f7ff ff1d 	bl	8001ac4 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8001c8a:	f7ff ff3b 	bl	8001b04 <DHT11_Check_Response>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <main+0x154>)
 8001c94:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 8001c96:	f7ff ff63 	bl	8001b60 <DHT11_Read>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <main+0x158>)
 8001ca0:	701a      	strb	r2, [r3, #0]
      Rh_byte2 = DHT11_Read ();
 8001ca2:	f7ff ff5d 	bl	8001b60 <DHT11_Read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <main+0x15c>)
 8001cac:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8001cae:	f7ff ff57 	bl	8001b60 <DHT11_Read>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <main+0x160>)
 8001cb8:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 8001cba:	f7ff ff51 	bl	8001b60 <DHT11_Read>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <main+0x164>)
 8001cc4:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 8001cc6:	f7ff ff4b 	bl	8001b60 <DHT11_Read>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <main+0x168>)
 8001cd0:	801a      	strh	r2, [r3, #0]



	  TEMP = Temp_byte1;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <main+0x160>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <main+0x16c>)
 8001cda:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <main+0x158>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <main+0x170>)
 8001ce4:	801a      	strh	r2, [r3, #0]

	  Temperature = (float) TEMP;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <main+0x16c>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <main+0x150>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
	  Humidity = (float) RH;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <main+0x170>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <main+0x174>)
 8001d06:	edc3 7a00 	vstr	s15, [r3]

	  if (Temperature > 22.0){
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <main+0x150>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8001d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd01      	ble.n	8001d22 <main+0x132>
		  buzzer_beep();
 8001d1e:	f7ff fe37 	bl	8001990 <buzzer_beep>
	  }




	  HAL_Delay(1000);
 8001d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d26:	f000 fb6f 	bl	8002408 <HAL_Delay>
	  lcd_clear();
 8001d2a:	f7ff fb2d 	bl	8001388 <lcd_clear>
	  stop_buzzer();
 8001d2e:	f7ff fe55 	bl	80019dc <stop_buzzer>
	  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001d32:	e781      	b.n	8001c38 <main+0x48>
 8001d34:	20000318 	.word	0x20000318
 8001d38:	20000360 	.word	0x20000360
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	200001f8 	.word	0x200001f8
 8001d44:	20000200 	.word	0x20000200
 8001d48:	2000030c 	.word	0x2000030c
 8001d4c:	20000313 	.word	0x20000313
 8001d50:	20000312 	.word	0x20000312
 8001d54:	20000316 	.word	0x20000316
 8001d58:	20000314 	.word	0x20000314
 8001d5c:	20000310 	.word	0x20000310
 8001d60:	2000030e 	.word	0x2000030e
 8001d64:	200001fc 	.word	0x200001fc

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b094      	sub	sp, #80	; 0x50
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fad2 	bl	8005320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <SystemClock_Config+0xd0>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <SystemClock_Config+0xd0>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <SystemClock_Config+0xd0>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <SystemClock_Config+0xd4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <SystemClock_Config+0xd4>)
 8001db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <SystemClock_Config+0xd4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001de0:	2348      	movs	r3, #72	; 0x48
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001de8:	2303      	movs	r3, #3
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fd5d 	bl	80038b0 <HAL_RCC_OscConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dfc:	f000 f820 	bl	8001e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e00:	230f      	movs	r3, #15
 8001e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 ffbe 	bl	8003da0 <HAL_RCC_ClockConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e2a:	f000 f809 	bl	8001e40 <Error_Handler>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3750      	adds	r7, #80	; 0x50
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <Error_Handler+0x8>
	...

08001e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 fa6e 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	return 1;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_kill>:

int _kill(int pid, int sig)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0a:	f003 f9df 	bl	80052cc <__errno>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2216      	movs	r2, #22
 8001f12:	601a      	str	r2, [r3, #0]
	return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_exit>:

void _exit (int status)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe7 	bl	8001f00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f32:	e7fe      	b.n	8001f32 <_exit+0x12>

08001f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e00a      	b.n	8001f5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f46:	f3af 8000 	nop.w
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf0      	blt.n	8001f46 <_read+0x12>
	}

return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e009      	b.n	8001f94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	60ba      	str	r2, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf1      	blt.n	8001f80 <_write+0x12>
	}
	return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_close>:

int _close(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
	return -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fce:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_isatty>:

int _isatty(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f003 f944 	bl	80052cc <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20030000 	.word	0x20030000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000204 	.word	0x20000204
 8002078:	200003c0 	.word	0x200003c0

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
 80020ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020da:	227f      	movs	r2, #127	; 0x7f
 80020dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020e6:	2214      	movs	r2, #20
 80020e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f6:	4823      	ldr	r0, [pc, #140]	; (8002184 <MX_TIM2_Init+0xe4>)
 80020f8:	f002 f9f8 	bl	80044ec <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002102:	f7ff fe9d 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002110:	4619      	mov	r1, r3
 8002112:	481c      	ldr	r0, [pc, #112]	; (8002184 <MX_TIM2_Init+0xe4>)
 8002114:	f002 fc86 	bl	8004a24 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800211e:	f7ff fe8f 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <MX_TIM2_Init+0xe4>)
 8002124:	f002 fa9a 	bl	800465c <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800212e:	f7ff fe87 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	4619      	mov	r1, r3
 8002140:	4810      	ldr	r0, [pc, #64]	; (8002184 <MX_TIM2_Init+0xe4>)
 8002142:	f003 f847 	bl	80051d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800214c:	f7ff fe78 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2204      	movs	r2, #4
 8002164:	4619      	mov	r1, r3
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM2_Init+0xe4>)
 8002168:	f002 fb9a 	bl	80048a0 <HAL_TIM_PWM_ConfigChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002172:	f7ff fe65 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM2_Init+0xe4>)
 8002178:	f000 f872 	bl	8002260 <HAL_TIM_MspPostInit>

}
 800217c:	bf00      	nop
 800217e:	3738      	adds	r7, #56	; 0x38
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000360 	.word	0x20000360

08002188 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218e:	463b      	mov	r3, r7
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <MX_TIM6_Init+0x64>)
 8002198:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <MX_TIM6_Init+0x68>)
 800219a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_TIM6_Init+0x64>)
 800219e:	2231      	movs	r2, #49	; 0x31
 80021a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_TIM6_Init+0x64>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_TIM6_Init+0x64>)
 80021aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_TIM6_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021b6:	480d      	ldr	r0, [pc, #52]	; (80021ec <MX_TIM6_Init+0x64>)
 80021b8:	f002 f998 	bl	80044ec <HAL_TIM_Base_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021c2:	f7ff fe3d 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021ce:	463b      	mov	r3, r7
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	; (80021ec <MX_TIM6_Init+0x64>)
 80021d4:	f002 fffe 	bl	80051d4 <HAL_TIMEx_MasterConfigSynchronization>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021de:	f7ff fe2f 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000318 	.word	0x20000318
 80021f0:	40001000 	.word	0x40001000

080021f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002222:	e012      	b.n	800224a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10d      	bne.n	800224a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_TIM_Base_MspInit+0x64>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40001000 	.word	0x40001000

08002260 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d11d      	bne.n	80022be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_TIM_MspPostInit+0x68>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_TIM_MspPostInit+0x68>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_TIM_MspPostInit+0x68>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800229e:	2308      	movs	r3, #8
 80022a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	4804      	ldr	r0, [pc, #16]	; (80022cc <HAL_TIM_MspPostInit+0x6c>)
 80022ba:	f000 f9af 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020400 	.word	0x40020400

080022d0 <Reset_Handler>:
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x12>
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <LoopFillZerobss+0x16>)
 80022d6:	490e      	ldr	r1, [pc, #56]	; (8002310 <LoopFillZerobss+0x1a>)
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <LoopFillZerobss+0x1e>)
 80022da:	2300      	movs	r3, #0
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:
 80022de:	58d4      	ldr	r4, [r2, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:
 80022e4:	18c4      	adds	r4, r0, r3
 80022e6:	428c      	cmp	r4, r1
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x22>)
 80022ec:	4c0b      	ldr	r4, [pc, #44]	; (800231c <LoopFillZerobss+0x26>)
 80022ee:	2300      	movs	r3, #0
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:
 80022f6:	42a2      	cmp	r2, r4
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>
 80022fa:	f7ff febf 	bl	800207c <SystemInit>
 80022fe:	f002 ffeb 	bl	80052d8 <__libc_init_array>
 8002302:	f7ff fc75 	bl	8001bf0 <main>
 8002306:	4770      	bx	lr
 8002308:	20030000 	.word	0x20030000
 800230c:	20000000 	.word	0x20000000
 8002310:	200001dc 	.word	0x200001dc
 8002314:	0800849c 	.word	0x0800849c
 8002318:	200001dc 	.word	0x200001dc
 800231c:	200003bc 	.word	0x200003bc

08002320 <ADC_IRQHandler>:
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_Init+0x40>)
 800232e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_Init+0x40>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_Init+0x40>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f931 	bl	80025b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002352:	200f      	movs	r0, #15
 8002354:	f000 f808 	bl	8002368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002358:	f7ff fd78 	bl	8001e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023c00 	.word	0x40023c00

08002368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x54>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_InitTick+0x58>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f93b 	bl	8002602 <HAL_SYSTICK_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e00e      	b.n	80023b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b0f      	cmp	r3, #15
 800239a:	d80a      	bhi.n	80023b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800239c:	2200      	movs	r2, #0
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023a4:	f000 f911 	bl	80025ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_InitTick+0x5c>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000004 	.word	0x20000004

080023c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_IncTick+0x20>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_IncTick+0x24>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_IncTick+0x24>)
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	200003a8 	.word	0x200003a8

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200003a8 	.word	0x200003a8

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002420:	d005      	beq.n	800242e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_Delay+0x44>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4413      	add	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242e:	bf00      	nop
 8002430:	f7ff ffde 	bl	80023f0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d8f7      	bhi.n	8002430 <HAL_Delay+0x28>
  {
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000008 	.word	0x20000008

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	db0a      	blt.n	80024de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	490c      	ldr	r1, [pc, #48]	; (8002500 <__NVIC_SetPriority+0x4c>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	0112      	lsls	r2, r2, #4
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	440b      	add	r3, r1
 80024d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024dc:	e00a      	b.n	80024f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4908      	ldr	r1, [pc, #32]	; (8002504 <__NVIC_SetPriority+0x50>)
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	3b04      	subs	r3, #4
 80024ec:	0112      	lsls	r2, r2, #4
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	440b      	add	r3, r1
 80024f2:	761a      	strb	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1c3 0307 	rsb	r3, r3, #7
 8002522:	2b04      	cmp	r3, #4
 8002524:	bf28      	it	cs
 8002526:	2304      	movcs	r3, #4
 8002528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3304      	adds	r3, #4
 800252e:	2b06      	cmp	r3, #6
 8002530:	d902      	bls.n	8002538 <NVIC_EncodePriority+0x30>
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3b03      	subs	r3, #3
 8002536:	e000      	b.n	800253a <NVIC_EncodePriority+0x32>
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa01 f303 	lsl.w	r3, r1, r3
 800255a:	43d9      	mvns	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002560:	4313      	orrs	r3, r2
         );
}
 8002562:	4618      	mov	r0, r3
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002580:	d301      	bcc.n	8002586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002582:	2301      	movs	r3, #1
 8002584:	e00f      	b.n	80025a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <SysTick_Config+0x40>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258e:	210f      	movs	r1, #15
 8002590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002594:	f7ff ff8e 	bl	80024b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <SysTick_Config+0x40>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <SysTick_Config+0x40>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff47 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025dc:	f7ff ff5c 	bl	8002498 <__NVIC_GetPriorityGrouping>
 80025e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7ff ff8e 	bl	8002508 <NVIC_EncodePriority>
 80025ec:	4602      	mov	r2, r0
 80025ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff5d 	bl	80024b4 <__NVIC_SetPriority>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffb0 	bl	8002570 <SysTick_Config>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e177      	b.n	8002928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8166 	bne.w	8002922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80c0 	beq.w	8002922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a65      	ldr	r2, [pc, #404]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_GPIO_Init+0x324>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_GPIO_Init+0x328>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_GPIO_Init+0x32c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d037      	beq.n	800285a <HAL_GPIO_Init+0x23e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a57      	ldr	r2, [pc, #348]	; (800294c <HAL_GPIO_Init+0x330>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d031      	beq.n	8002856 <HAL_GPIO_Init+0x23a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a56      	ldr	r2, [pc, #344]	; (8002950 <HAL_GPIO_Init+0x334>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d02b      	beq.n	8002852 <HAL_GPIO_Init+0x236>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_GPIO_Init+0x338>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d025      	beq.n	800284e <HAL_GPIO_Init+0x232>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a54      	ldr	r2, [pc, #336]	; (8002958 <HAL_GPIO_Init+0x33c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01f      	beq.n	800284a <HAL_GPIO_Init+0x22e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a53      	ldr	r2, [pc, #332]	; (800295c <HAL_GPIO_Init+0x340>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d019      	beq.n	8002846 <HAL_GPIO_Init+0x22a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a52      	ldr	r2, [pc, #328]	; (8002960 <HAL_GPIO_Init+0x344>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <HAL_GPIO_Init+0x226>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <HAL_GPIO_Init+0x348>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00d      	beq.n	800283e <HAL_GPIO_Init+0x222>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_GPIO_Init+0x34c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0x21e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a4f      	ldr	r2, [pc, #316]	; (800296c <HAL_GPIO_Init+0x350>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_GPIO_Init+0x21a>
 8002832:	2309      	movs	r3, #9
 8002834:	e012      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002836:	230a      	movs	r3, #10
 8002838:	e010      	b.n	800285c <HAL_GPIO_Init+0x240>
 800283a:	2308      	movs	r3, #8
 800283c:	e00e      	b.n	800285c <HAL_GPIO_Init+0x240>
 800283e:	2307      	movs	r3, #7
 8002840:	e00c      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002842:	2306      	movs	r3, #6
 8002844:	e00a      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002846:	2305      	movs	r3, #5
 8002848:	e008      	b.n	800285c <HAL_GPIO_Init+0x240>
 800284a:	2304      	movs	r3, #4
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x240>
 800284e:	2303      	movs	r3, #3
 8002850:	e004      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002852:	2302      	movs	r3, #2
 8002854:	e002      	b.n	800285c <HAL_GPIO_Init+0x240>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_GPIO_Init+0x240>
 800285a:	2300      	movs	r3, #0
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f002 0203 	and.w	r2, r2, #3
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	4093      	lsls	r3, r2
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <HAL_GPIO_Init+0x328>)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	3302      	adds	r3, #2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_GPIO_Init+0x354>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289e:	4a34      	ldr	r2, [pc, #208]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028c8:	4a29      	ldr	r2, [pc, #164]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ce:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_GPIO_Init+0x354>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800291c:	4a14      	ldr	r2, [pc, #80]	; (8002970 <HAL_GPIO_Init+0x354>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3301      	adds	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b0f      	cmp	r3, #15
 800292c:	f67f ae84 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40013800 	.word	0x40013800
 8002948:	40020000 	.word	0x40020000
 800294c:	40020400 	.word	0x40020400
 8002950:	40020800 	.word	0x40020800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021000 	.word	0x40021000
 800295c:	40021400 	.word	0x40021400
 8002960:	40021800 	.word	0x40021800
 8002964:	40021c00 	.word	0x40021c00
 8002968:	40022000 	.word	0x40022000
 800296c:	40022400 	.word	0x40022400
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e001      	b.n	8002996 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c0:	e003      	b.n	80029ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	041a      	lsls	r2, r3, #16
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	619a      	str	r2, [r3, #24]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e12b      	b.n	8002c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fd8a 	bl	8001518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a3c:	f001 fb84 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a81      	ldr	r2, [pc, #516]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d807      	bhi.n	8002a5c <HAL_I2C_Init+0x84>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <HAL_I2C_Init+0x278>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	bf94      	ite	ls
 8002a54:	2301      	movls	r3, #1
 8002a56:	2300      	movhi	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e006      	b.n	8002a6a <HAL_I2C_Init+0x92>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a7d      	ldr	r2, [pc, #500]	; (8002c54 <HAL_I2C_Init+0x27c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0e7      	b.n	8002c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4a78      	ldr	r2, [pc, #480]	; (8002c58 <HAL_I2C_Init+0x280>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9b      	lsrs	r3, r3, #18
 8002a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a6a      	ldr	r2, [pc, #424]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d802      	bhi.n	8002aac <HAL_I2C_Init+0xd4>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	e009      	b.n	8002ac0 <HAL_I2C_Init+0xe8>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_I2C_Init+0x284>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	3301      	adds	r3, #1
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	495c      	ldr	r1, [pc, #368]	; (8002c4c <HAL_I2C_Init+0x274>)
 8002adc:	428b      	cmp	r3, r1
 8002ade:	d819      	bhi.n	8002b14 <HAL_I2C_Init+0x13c>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e59      	subs	r1, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aee:	1c59      	adds	r1, r3, #1
 8002af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002af4:	400b      	ands	r3, r1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_I2C_Init+0x138>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e59      	subs	r1, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	e051      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b10:	2304      	movs	r3, #4
 8002b12:	e04f      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d111      	bne.n	8002b40 <HAL_I2C_Init+0x168>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1e58      	subs	r0, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6859      	ldr	r1, [r3, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e012      	b.n	8002b66 <HAL_I2C_Init+0x18e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	0099      	lsls	r1, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Init+0x196>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e022      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10e      	bne.n	8002b94 <HAL_I2C_Init+0x1bc>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1e58      	subs	r0, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6859      	ldr	r1, [r3, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	440b      	add	r3, r1
 8002b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b92:	e00f      	b.n	8002bb4 <HAL_I2C_Init+0x1dc>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1e58      	subs	r0, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6859      	ldr	r1, [r3, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	0099      	lsls	r1, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002baa:	3301      	adds	r3, #1
 8002bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	6809      	ldr	r1, [r1, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6911      	ldr	r1, [r2, #16]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68d2      	ldr	r2, [r2, #12]
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	000186a0 	.word	0x000186a0
 8002c50:	001e847f 	.word	0x001e847f
 8002c54:	003d08ff 	.word	0x003d08ff
 8002c58:	431bde83 	.word	0x431bde83
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	817b      	strh	r3, [r7, #10]
 8002c70:	4613      	mov	r3, r2
 8002c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff fbbc 	bl	80023f0 <HAL_GetTick>
 8002c78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80e0 	bne.w	8002e48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4970      	ldr	r1, [pc, #448]	; (8002e54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f964 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0d3      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_Master_Transmit+0x50>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e0cc      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d007      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2221      	movs	r2, #33	; 0x21
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	893a      	ldrh	r2, [r7, #8]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a50      	ldr	r2, [pc, #320]	; (8002e58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f89c 	bl	8002e5c <I2C_MasterRequestWrite>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e08d      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d44:	e066      	b.n	8002e14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	6a39      	ldr	r1, [r7, #32]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f9de 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00d      	beq.n	8002d72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d107      	bne.n	8002d6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e06b      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d11b      	bne.n	8002de8 <HAL_I2C_Master_Transmit+0x188>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6a39      	ldr	r1, [r7, #32]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f9ce 	bl	800318e <I2C_WaitOnBTFFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d107      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e01a      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d194      	bne.n	8002d46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	00100002 	.word	0x00100002
 8002e58:	ffff0000 	.word	0xffff0000

08002e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d006      	beq.n	8002e86 <I2C_MasterRequestWrite+0x2a>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d003      	beq.n	8002e86 <I2C_MasterRequestWrite+0x2a>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e84:	d108      	bne.n	8002e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e00b      	b.n	8002eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	2b12      	cmp	r3, #18
 8002e9e:	d107      	bne.n	8002eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f84f 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	d103      	bne.n	8002ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e035      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eec:	d108      	bne.n	8002f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e01b      	b.n	8002f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	11db      	asrs	r3, r3, #7
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0306 	and.w	r3, r3, #6
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f063 030f 	orn	r3, r3, #15
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	490e      	ldr	r1, [pc, #56]	; (8002f58 <I2C_MasterRequestWrite+0xfc>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f875 	bl	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e010      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4907      	ldr	r1, [pc, #28]	; (8002f5c <I2C_MasterRequestWrite+0x100>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f865 	bl	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	00010008 	.word	0x00010008
 8002f5c:	00010002 	.word	0x00010002

08002f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	e025      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7ff fa39 	bl	80023f0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e023      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10d      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	e00c      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	429a      	cmp	r2, r3
 8003002:	d0b6      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301c:	e051      	b.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d123      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003046:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e046      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307c:	d021      	beq.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7ff f9b7 	bl	80023f0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e020      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10c      	bne.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e00b      	b.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d18d      	bne.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003118:	e02d      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f878 	bl	8003210 <I2C_IsAcknowledgeFailed>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02d      	b.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003130:	d021      	beq.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7ff f95d 	bl	80023f0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d1ca      	bne.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319a:	e02d      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f837 	bl	8003210 <I2C_IsAcknowledgeFailed>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e02d      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b2:	d021      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b4:	f7ff f91c 	bl	80023f0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d302      	bcc.n	80031ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d1ca      	bne.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d11b      	bne.n	8003260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f043 0204 	orr.w	r2, r3, #4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	d129      	bne.n	80032d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0210 	bic.w	r2, r2, #16
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e000      	b.n	80032da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
  }
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d12a      	bne.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0201 	bic.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	f023 030f 	bic.w	r3, r3, #15
 8003326:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	89fb      	ldrh	r3, [r7, #14]
 800332e:	4313      	orrs	r3, r2
 8003330:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	89fa      	ldrh	r2, [r7, #14]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0bf      	b.n	80034f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fe f9be 	bl	800170c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80033a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6999      	ldr	r1, [r3, #24]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_LTDC_Init+0x19c>)
 80033d8:	400b      	ands	r3, r1
 80033da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68d9      	ldr	r1, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <HAL_LTDC_Init+0x19c>)
 8003406:	400b      	ands	r3, r1
 8003408:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1a      	ldr	r2, [r3, #32]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6919      	ldr	r1, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_LTDC_Init+0x19c>)
 8003434:	400b      	ands	r3, r1
 8003436:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6959      	ldr	r1, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_LTDC_Init+0x19c>)
 8003462:	400b      	ands	r3, r1
 8003464:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	041b      	lsls	r3, r3, #16
 800346c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6959      	ldr	r1, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003494:	041b      	lsls	r3, r3, #16
 8003496:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0206 	orr.w	r2, r2, #6
 80034d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	f000f800 	.word	0xf000f800

08003504 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003504:	b5b0      	push	{r4, r5, r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_LTDC_ConfigLayer+0x1a>
 800351a:	2302      	movs	r3, #2
 800351c:	e02c      	b.n	8003578 <HAL_LTDC_ConfigLayer+0x74>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2134      	movs	r1, #52	; 0x34
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f811 	bl	8003580 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bdb0      	pop	{r4, r5, r7, pc}

08003580 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359c:	4413      	add	r3, r2
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	01db      	lsls	r3, r3, #7
 80035ac:	4413      	add	r3, r2
 80035ae:	3384      	adds	r3, #132	; 0x84
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	4611      	mov	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	01d2      	lsls	r2, r2, #7
 80035bc:	440a      	add	r2, r1
 80035be:	3284      	adds	r2, #132	; 0x84
 80035c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80035c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	4413      	add	r3, r2
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	01db      	lsls	r3, r3, #7
 80035e4:	440b      	add	r3, r1
 80035e6:	3384      	adds	r3, #132	; 0x84
 80035e8:	4619      	mov	r1, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fe:	4413      	add	r3, r2
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	01db      	lsls	r3, r3, #7
 800360e:	4413      	add	r3, r2
 8003610:	3384      	adds	r3, #132	; 0x84
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	4611      	mov	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	01d2      	lsls	r2, r2, #7
 800361e:	440a      	add	r2, r1
 8003620:	3284      	adds	r2, #132	; 0x84
 8003622:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003626:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003636:	4413      	add	r3, r2
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	01db      	lsls	r3, r3, #7
 8003644:	440b      	add	r3, r1
 8003646:	3384      	adds	r3, #132	; 0x84
 8003648:	4619      	mov	r1, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	4413      	add	r3, r2
 800365c:	3384      	adds	r3, #132	; 0x84
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4611      	mov	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	01d2      	lsls	r2, r2, #7
 800366a:	440a      	add	r2, r1
 800366c:	3284      	adds	r2, #132	; 0x84
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	01db      	lsls	r3, r3, #7
 800367e:	4413      	add	r3, r2
 8003680:	3384      	adds	r3, #132	; 0x84
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	4413      	add	r3, r2
 80036b2:	3384      	adds	r3, #132	; 0x84
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	01db      	lsls	r3, r3, #7
 80036c0:	4413      	add	r3, r2
 80036c2:	3384      	adds	r3, #132	; 0x84
 80036c4:	461a      	mov	r2, r3
 80036c6:	2300      	movs	r3, #0
 80036c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036d0:	461a      	mov	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4619      	mov	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	01db      	lsls	r3, r3, #7
 80036e4:	440b      	add	r3, r1
 80036e6:	3384      	adds	r3, #132	; 0x84
 80036e8:	4619      	mov	r1, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	01db      	lsls	r3, r3, #7
 80036fa:	4413      	add	r3, r2
 80036fc:	3384      	adds	r3, #132	; 0x84
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4611      	mov	r1, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	01d2      	lsls	r2, r2, #7
 800370a:	440a      	add	r2, r1
 800370c:	3284      	adds	r2, #132	; 0x84
 800370e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003712:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	01db      	lsls	r3, r3, #7
 800371e:	4413      	add	r3, r2
 8003720:	3384      	adds	r3, #132	; 0x84
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	4413      	add	r3, r2
 8003736:	3384      	adds	r3, #132	; 0x84
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	4611      	mov	r1, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	01d2      	lsls	r2, r2, #7
 8003744:	440a      	add	r2, r1
 8003746:	3284      	adds	r2, #132	; 0x84
 8003748:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800374c:	f023 0307 	bic.w	r3, r3, #7
 8003750:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	68f9      	ldr	r1, [r7, #12]
 800375c:	6809      	ldr	r1, [r1, #0]
 800375e:	4608      	mov	r0, r1
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	01c9      	lsls	r1, r1, #7
 8003764:	4401      	add	r1, r0
 8003766:	3184      	adds	r1, #132	; 0x84
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	01db      	lsls	r3, r3, #7
 8003776:	4413      	add	r3, r2
 8003778:	3384      	adds	r3, #132	; 0x84
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	01db      	lsls	r3, r3, #7
 8003786:	4413      	add	r3, r2
 8003788:	3384      	adds	r3, #132	; 0x84
 800378a:	461a      	mov	r2, r3
 800378c:	2300      	movs	r3, #0
 800378e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	01db      	lsls	r3, r3, #7
 800379a:	4413      	add	r3, r2
 800379c:	3384      	adds	r3, #132	; 0x84
 800379e:	461a      	mov	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d102      	bne.n	80037b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80037ae:	2304      	movs	r3, #4
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	e01b      	b.n	80037ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80037bc:	2303      	movs	r3, #3
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e014      	b.n	80037ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d00b      	beq.n	80037e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d007      	beq.n	80037e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d003      	beq.n	80037e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80037de:	2b07      	cmp	r3, #7
 80037e0:	d102      	bne.n	80037e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80037e2:	2302      	movs	r3, #2
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	e001      	b.n	80037ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80037e8:	2301      	movs	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	01db      	lsls	r3, r3, #7
 80037f6:	4413      	add	r3, r2
 80037f8:	3384      	adds	r3, #132	; 0x84
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	4611      	mov	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	01d2      	lsls	r2, r2, #7
 8003806:	440a      	add	r2, r1
 8003808:	3284      	adds	r2, #132	; 0x84
 800380a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800380e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	041a      	lsls	r2, r3, #16
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1acb      	subs	r3, r1, r3
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	3303      	adds	r3, #3
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	6809      	ldr	r1, [r1, #0]
 8003832:	4608      	mov	r0, r1
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	01c9      	lsls	r1, r1, #7
 8003838:	4401      	add	r1, r0
 800383a:	3184      	adds	r1, #132	; 0x84
 800383c:	4313      	orrs	r3, r2
 800383e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	01db      	lsls	r3, r3, #7
 800384a:	4413      	add	r3, r2
 800384c:	3384      	adds	r3, #132	; 0x84
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	4611      	mov	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	01d2      	lsls	r2, r2, #7
 800385a:	440a      	add	r2, r1
 800385c:	3284      	adds	r2, #132	; 0x84
 800385e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003862:	f023 0307 	bic.w	r3, r3, #7
 8003866:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	01db      	lsls	r3, r3, #7
 8003872:	4413      	add	r3, r2
 8003874:	3384      	adds	r3, #132	; 0x84
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	4413      	add	r3, r2
 800388a:	3384      	adds	r3, #132	; 0x84
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	4611      	mov	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	01d2      	lsls	r2, r2, #7
 8003898:	440a      	add	r2, r1
 800389a:	3284      	adds	r2, #132	; 0x84
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6013      	str	r3, [r2, #0]
}
 80038a2:	bf00      	nop
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e264      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d075      	beq.n	80039ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ce:	4ba3      	ldr	r3, [pc, #652]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d00c      	beq.n	80038f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4ba0      	ldr	r3, [pc, #640]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d112      	bne.n	800390c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b9d      	ldr	r3, [pc, #628]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f2:	d10b      	bne.n	800390c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	4b99      	ldr	r3, [pc, #612]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05b      	beq.n	80039b8 <HAL_RCC_OscConfig+0x108>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d157      	bne.n	80039b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e23f      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d106      	bne.n	8003924 <HAL_RCC_OscConfig+0x74>
 8003916:	4b91      	ldr	r3, [pc, #580]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a90      	ldr	r2, [pc, #576]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xb0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x98>
 800392e:	4b8b      	ldr	r3, [pc, #556]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a8a      	ldr	r2, [pc, #552]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a87      	ldr	r2, [pc, #540]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xb0>
 8003948:	4b84      	ldr	r3, [pc, #528]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a83      	ldr	r2, [pc, #524]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a80      	ldr	r2, [pc, #512]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fd42 	bl	80023f0 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fd3e 	bl	80023f0 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e204      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xc0>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe fd2e 	bl	80023f0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe fd2a 	bl	80023f0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1f0      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0xe8>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c6:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x152>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1c4      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4952      	ldr	r1, [pc, #328]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e03a      	b.n	8003a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b4f      	ldr	r3, [pc, #316]	; (8003b60 <HAL_RCC_OscConfig+0x2b0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a26:	f7fe fce3 	bl	80023f0 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fcdf 	bl	80023f0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1a5      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	4b46      	ldr	r3, [pc, #280]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4940      	ldr	r1, [pc, #256]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b3f      	ldr	r3, [pc, #252]	; (8003b60 <HAL_RCC_OscConfig+0x2b0>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fcc2 	bl	80023f0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fcbe 	bl	80023f0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e184      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d030      	beq.n	8003afc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x2b4>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fca2 	bl	80023f0 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fc9e 	bl	80023f0 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e164      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x200>
 8003ace:	e015      	b.n	8003afc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x2b4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fc8b 	bl	80023f0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fe fc87 	bl	80023f0 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e14d      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f0      	bne.n	8003ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a0 	beq.w	8003c4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a0e      	ldr	r2, [pc, #56]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x2b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCC_OscConfig+0x2b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_RCC_OscConfig+0x2b8>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fe fc4d 	bl	80023f0 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e011      	b.n	8003b7e <HAL_RCC_OscConfig+0x2ce>
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	42470000 	.word	0x42470000
 8003b64:	42470e80 	.word	0x42470e80
 8003b68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6c:	f7fe fc40 	bl	80023f0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e106      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCC_OscConfig+0x4e4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0f0      	beq.n	8003b6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d106      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
 8003b92:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	4a80      	ldr	r2, [pc, #512]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9e:	e01c      	b.n	8003bda <HAL_RCC_OscConfig+0x32a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x312>
 8003ba8:	4b7b      	ldr	r3, [pc, #492]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a7a      	ldr	r2, [pc, #488]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	4b78      	ldr	r3, [pc, #480]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	4a77      	ldr	r2, [pc, #476]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc0:	e00b      	b.n	8003bda <HAL_RCC_OscConfig+0x32a>
 8003bc2:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a74      	ldr	r2, [pc, #464]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	4a71      	ldr	r2, [pc, #452]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d015      	beq.n	8003c0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe fc05 	bl	80023f0 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe fc01 	bl	80023f0 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e0c5      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	4b65      	ldr	r3, [pc, #404]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ee      	beq.n	8003bea <HAL_RCC_OscConfig+0x33a>
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0e:	f7fe fbef 	bl	80023f0 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe fbeb 	bl	80023f0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0af      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2c:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ee      	bne.n	8003c16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3e:	4b56      	ldr	r3, [pc, #344]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a55      	ldr	r2, [pc, #340]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 809b 	beq.w	8003d8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c54:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d05c      	beq.n	8003d1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d141      	bne.n	8003cec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <HAL_RCC_OscConfig+0x4ec>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6e:	f7fe fbbf 	bl	80023f0 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fe fbbb 	bl	80023f0 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e081      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c88:	4b43      	ldr	r3, [pc, #268]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	019b      	lsls	r3, r3, #6
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	3b01      	subs	r3, #1
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	4937      	ldr	r1, [pc, #220]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbe:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <HAL_RCC_OscConfig+0x4ec>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fb94 	bl	80023f0 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe fb90 	bl	80023f0 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e056      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x41c>
 8003cea:	e04e      	b.n	8003d8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x4ec>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fe fb7d 	bl	80023f0 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7fe fb79 	bl	80023f0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e03f      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f0      	bne.n	8003cfa <HAL_RCC_OscConfig+0x44a>
 8003d18:	e037      	b.n	8003d8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e032      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d26:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d028      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d121      	bne.n	8003d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d11a      	bne.n	8003d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d56:	4013      	ands	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d111      	bne.n	8003d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40007000 	.word	0x40007000
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	42470060 	.word	0x42470060

08003da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0cc      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db4:	4b68      	ldr	r3, [pc, #416]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d90c      	bls.n	8003ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc2:	4b65      	ldr	r3, [pc, #404]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	4b63      	ldr	r3, [pc, #396]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0b8      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d020      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df4:	4b59      	ldr	r3, [pc, #356]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a58      	ldr	r2, [pc, #352]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e0c:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a52      	ldr	r2, [pc, #328]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e18:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	494d      	ldr	r1, [pc, #308]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d044      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d119      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e07f      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06f      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e067      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7e:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f023 0203 	bic.w	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4934      	ldr	r1, [pc, #208]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e90:	f7fe faae 	bl	80023f0 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fe faaa 	bl	80023f0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e04f      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 020c 	and.w	r2, r3, #12
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d1eb      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d20c      	bcs.n	8003ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed6:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e032      	b.n	8003f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4916      	ldr	r1, [pc, #88]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f26:	f000 f821 	bl	8003f6c <HAL_RCC_GetSysClockFreq>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	490a      	ldr	r1, [pc, #40]	; (8003f60 <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	5ccb      	ldrb	r3, [r1, r3]
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <HAL_RCC_ClockConfig+0x1c8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fa0e 	bl	8002368 <HAL_InitTick>

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023c00 	.word	0x40023c00
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	08008090 	.word	0x08008090
 8003f64:	20000000 	.word	0x20000000
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	607b      	str	r3, [r7, #4]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f84:	4b67      	ldr	r3, [pc, #412]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x40>
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	f200 80bd 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f9e:	e0b7      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fa2:	60bb      	str	r3, [r7, #8]
       break;
 8003fa4:	e0b7      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003fa8:	60bb      	str	r3, [r7, #8]
      break;
 8003faa:	e0b4      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb6:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04d      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc2:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	099b      	lsrs	r3, r3, #6
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	ea02 0800 	and.w	r8, r2, r0
 8003fda:	ea03 0901 	and.w	r9, r3, r1
 8003fde:	4640      	mov	r0, r8
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	014b      	lsls	r3, r1, #5
 8003fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ff0:	0142      	lsls	r2, r0, #5
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8003ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800400c:	0182      	lsls	r2, r0, #6
 800400e:	1a12      	subs	r2, r2, r0
 8004010:	eb63 0301 	sbc.w	r3, r3, r1
 8004014:	f04f 0000 	mov.w	r0, #0
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	00d9      	lsls	r1, r3, #3
 800401e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004022:	00d0      	lsls	r0, r2, #3
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	eb12 0208 	adds.w	r2, r2, r8
 800402c:	eb43 0309 	adc.w	r3, r3, r9
 8004030:	f04f 0000 	mov.w	r0, #0
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	0259      	lsls	r1, r3, #9
 800403a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800403e:	0250      	lsls	r0, r2, #9
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	f7fc fdba 	bl	8000bc8 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e04a      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405e:	4b31      	ldr	r3, [pc, #196]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	099b      	lsrs	r3, r3, #6
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	ea02 0400 	and.w	r4, r2, r0
 8004076:	ea03 0501 	and.w	r5, r3, r1
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	014b      	lsls	r3, r1, #5
 8004088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800408c:	0142      	lsls	r2, r0, #5
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	1b00      	subs	r0, r0, r4
 8004094:	eb61 0105 	sbc.w	r1, r1, r5
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	018b      	lsls	r3, r1, #6
 80040a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040a6:	0182      	lsls	r2, r0, #6
 80040a8:	1a12      	subs	r2, r2, r0
 80040aa:	eb63 0301 	sbc.w	r3, r3, r1
 80040ae:	f04f 0000 	mov.w	r0, #0
 80040b2:	f04f 0100 	mov.w	r1, #0
 80040b6:	00d9      	lsls	r1, r3, #3
 80040b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040bc:	00d0      	lsls	r0, r2, #3
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	1912      	adds	r2, r2, r4
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0299      	lsls	r1, r3, #10
 80040d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040d6:	0290      	lsls	r0, r2, #10
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	f7fc fd6e 	bl	8000bc8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	60bb      	str	r3, [r7, #8]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004112:	60bb      	str	r3, [r7, #8]
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	68bb      	ldr	r3, [r7, #8]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	080080a0 	.word	0x080080a0

08004170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d075      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041a4:	4bad      	ldr	r3, [pc, #692]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041aa:	f7fe f921 	bl	80023f0 <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041b2:	f7fe f91d 	bl	80023f0 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e18b      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c4:	4ba6      	ldr	r3, [pc, #664]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1f0      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	019a      	lsls	r2, r3, #6
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	071b      	lsls	r3, r3, #28
 80041e8:	499d      	ldr	r1, [pc, #628]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041fc:	4b98      	ldr	r3, [pc, #608]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004202:	0f1b      	lsrs	r3, r3, #28
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	019a      	lsls	r2, r3, #6
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	431a      	orrs	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	071b      	lsls	r3, r3, #28
 800421c:	4990      	ldr	r1, [pc, #576]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004224:	4b8e      	ldr	r3, [pc, #568]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800422a:	f023 021f 	bic.w	r2, r3, #31
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	3b01      	subs	r3, #1
 8004234:	498a      	ldr	r1, [pc, #552]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	019a      	lsls	r2, r3, #6
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	071b      	lsls	r3, r3, #28
 800425c:	4980      	ldr	r1, [pc, #512]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004264:	4b7d      	ldr	r3, [pc, #500]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800426a:	f7fe f8c1 	bl	80023f0 <HAL_GetTick>
 800426e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004272:	f7fe f8bd 	bl	80023f0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e12b      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004284:	4b76      	ldr	r3, [pc, #472]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d079      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042a8:	4b6e      	ldr	r3, [pc, #440]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ae:	f7fe f89f 	bl	80023f0 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80042b6:	f7fe f89b 	bl	80023f0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e109      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c8:	4b65      	ldr	r3, [pc, #404]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d4:	d0ef      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d020      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042e2:	4b5f      	ldr	r3, [pc, #380]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	0f1b      	lsrs	r3, r3, #28
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	019a      	lsls	r2, r3, #6
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	431a      	orrs	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	4957      	ldr	r1, [pc, #348]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800430a:	4b55      	ldr	r3, [pc, #340]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004310:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	3b01      	subs	r3, #1
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	4950      	ldr	r1, [pc, #320]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01e      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004330:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	0e1b      	lsrs	r3, r3, #24
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	019a      	lsls	r2, r3, #6
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	071b      	lsls	r3, r3, #28
 8004350:	4943      	ldr	r1, [pc, #268]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004358:	4b41      	ldr	r3, [pc, #260]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	493e      	ldr	r1, [pc, #248]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004374:	f7fe f83c 	bl	80023f0 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800437c:	f7fe f838 	bl	80023f0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0a6      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800438e:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439a:	d1ef      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 808d 	beq.w	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043c6:	4b28      	ldr	r3, [pc, #160]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a27      	ldr	r2, [pc, #156]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80043cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043d2:	f7fe f80d 	bl	80023f0 <HAL_GetTick>
 80043d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fe f809 	bl	80023f0 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e077      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004400:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d039      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d032      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800442c:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d11e      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800443e:	f7fd ffd7 	bl	80023f0 <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004444:	e014      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fd ffd3 	bl	80023f0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	; 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d90b      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03f      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800445c:	42470068 	.word	0x42470068
 8004460:	40023800 	.word	0x40023800
 8004464:	42470070 	.word	0x42470070
 8004468:	40007000 	.word	0x40007000
 800446c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0e4      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d10d      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	4911      	ldr	r1, [pc, #68]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
 80044a4:	e005      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044b0:	6093      	str	r3, [r2, #8]
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044be:	4909      	ldr	r1, [pc, #36]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80044d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40023800 	.word	0x40023800
 80044e8:	424711e0 	.word	0x424711e0

080044ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e041      	b.n	8004582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fd fe6e 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 fb42 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e046      	b.n	8004632 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a23      	ldr	r2, [pc, #140]	; (8004640 <HAL_TIM_Base_Start+0xb4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d022      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d01d      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_TIM_Base_Start+0xb8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d018      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <HAL_TIM_Base_Start+0xbc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_TIM_Base_Start+0xc0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00e      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_TIM_Base_Start+0xc4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d009      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_TIM_Base_Start+0xc8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <HAL_TIM_Base_Start+0x70>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_TIM_Base_Start+0xcc>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d111      	bne.n	8004620 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b06      	cmp	r3, #6
 800460c:	d010      	beq.n	8004630 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	e007      	b.n	8004630 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40010400 	.word	0x40010400
 8004654:	40014000 	.word	0x40014000
 8004658:	40001800 	.word	0x40001800

0800465c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e041      	b.n	80046f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f839 	bl	80046fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f000 fa8a 	bl	8004bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x24>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e022      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b04      	cmp	r3, #4
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start+0x3e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e015      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x58>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07c      	b.n	800487c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x82>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004790:	e013      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	e00b      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	e003      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fce0 	bl	8005188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_TIM_PWM_Start+0x174>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_PWM_Start+0xcc>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <HAL_TIM_PWM_Start+0x178>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_PWM_Start+0xd0>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_Start+0xd2>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_TIM_PWM_Start+0x174>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d01d      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIM_PWM_Start+0x17c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_TIM_PWM_Start+0x180>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIM_PWM_Start+0x184>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_TIM_PWM_Start+0x178>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_TIM_PWM_Start+0x188>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_TIM_PWM_Start+0x18c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d111      	bne.n	800486a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d010      	beq.n	800487a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	e007      	b.n	800487a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000
 800489c:	40001800 	.word	0x40001800

080048a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e0ae      	b.n	8004a1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	f200 809f 	bhi.w	8004a0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004a0d 	.word	0x08004a0d
 80048dc:	08004a0d 	.word	0x08004a0d
 80048e0:	08004a0d 	.word	0x08004a0d
 80048e4:	08004949 	.word	0x08004949
 80048e8:	08004a0d 	.word	0x08004a0d
 80048ec:	08004a0d 	.word	0x08004a0d
 80048f0:	08004a0d 	.word	0x08004a0d
 80048f4:	0800498b 	.word	0x0800498b
 80048f8:	08004a0d 	.word	0x08004a0d
 80048fc:	08004a0d 	.word	0x08004a0d
 8004900:	08004a0d 	.word	0x08004a0d
 8004904:	080049cb 	.word	0x080049cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f9f0 	bl	8004cf4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0208 	orr.w	r2, r2, #8
 8004922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0204 	bic.w	r2, r2, #4
 8004932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6999      	ldr	r1, [r3, #24]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	619a      	str	r2, [r3, #24]
      break;
 8004946:	e064      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fa40 	bl	8004dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	021a      	lsls	r2, r3, #8
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	619a      	str	r2, [r3, #24]
      break;
 8004988:	e043      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fa95 	bl	8004ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0208 	orr.w	r2, r2, #8
 80049a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0204 	bic.w	r2, r2, #4
 80049b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69d9      	ldr	r1, [r3, #28]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	61da      	str	r2, [r3, #28]
      break;
 80049c8:	e023      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fae9 	bl	8004fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69d9      	ldr	r1, [r3, #28]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	021a      	lsls	r2, r3, #8
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	61da      	str	r2, [r3, #28]
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_ConfigClockSource+0x1c>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e0b4      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x186>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a78:	d03e      	beq.n	8004af8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	f200 8087 	bhi.w	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	f000 8086 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x172>
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d87f      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b70      	cmp	r3, #112	; 0x70
 8004a92:	d01a      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0xa6>
 8004a94:	2b70      	cmp	r3, #112	; 0x70
 8004a96:	d87b      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b60      	cmp	r3, #96	; 0x60
 8004a9a:	d050      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x11a>
 8004a9c:	2b60      	cmp	r3, #96	; 0x60
 8004a9e:	d877      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d03c      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0xfa>
 8004aa4:	2b50      	cmp	r3, #80	; 0x50
 8004aa6:	d873      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d058      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x13a>
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	d86f      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d064      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ab4:	2b30      	cmp	r3, #48	; 0x30
 8004ab6:	d86b      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d060      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x15a>
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d867      	bhi.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d05c      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d05a      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0x15a>
 8004ac8:	e062      	b.n	8004b90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6899      	ldr	r1, [r3, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f000 fb35 	bl	8005148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	609a      	str	r2, [r3, #8]
      break;
 8004af6:	e04f      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f000 fb1e 	bl	8005148 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b1a:	609a      	str	r2, [r3, #8]
      break;
 8004b1c:	e03c      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fa92 	bl	8005054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2150      	movs	r1, #80	; 0x50
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 faeb 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e02c      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fab1 	bl	80050b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2160      	movs	r1, #96	; 0x60
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fadb 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e01c      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6859      	ldr	r1, [r3, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f000 fa72 	bl	8005054 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 facb 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004b7c:	e00c      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f000 fac2 	bl	8005112 <TIM_ITRx_SetConfig>
      break;
 8004b8e:	e003      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      break;
 8004b94:	e000      	b.n	8004b98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a40      	ldr	r2, [pc, #256]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d00f      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3d      	ldr	r2, [pc, #244]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00b      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3c      	ldr	r2, [pc, #240]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d007      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3b      	ldr	r2, [pc, #236]	; (8004cd4 <TIM_Base_SetConfig+0x120>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d003      	beq.n	8004bf4 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3a      	ldr	r2, [pc, #232]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d02b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d027      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <TIM_Base_SetConfig+0x118>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d023      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2b      	ldr	r2, [pc, #172]	; (8004cd0 <TIM_Base_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01f      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <TIM_Base_SetConfig+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d01b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d017      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <TIM_Base_SetConfig+0x128>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d013      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <TIM_Base_SetConfig+0x12c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00f      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <TIM_Base_SetConfig+0x130>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <TIM_Base_SetConfig+0x134>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a24      	ldr	r2, [pc, #144]	; (8004cec <TIM_Base_SetConfig+0x138>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <TIM_Base_SetConfig+0x13c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d108      	bne.n	8004c78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <TIM_Base_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_Base_SetConfig+0xf8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a0c      	ldr	r2, [pc, #48]	; (8004cd8 <TIM_Base_SetConfig+0x124>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d103      	bne.n	8004cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	615a      	str	r2, [r3, #20]
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	40001800 	.word	0x40001800
 8004cec:	40001c00 	.word	0x40001c00
 8004cf0:	40002000 	.word	0x40002000

08004cf4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0302 	bic.w	r3, r3, #2
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a20      	ldr	r2, [pc, #128]	; (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_OC1_SetConfig+0x64>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d10c      	bne.n	8004d72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f023 0308 	bic.w	r3, r3, #8
 8004d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 0304 	bic.w	r3, r3, #4
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC1_SetConfig+0xd8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC1_SetConfig+0x8e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <TIM_OC1_SetConfig+0xdc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d111      	bne.n	8004da6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40010000 	.word	0x40010000
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0210 	bic.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC2_SetConfig+0x68>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10d      	bne.n	8004e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <TIM_OC2_SetConfig+0xe4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC2_SetConfig+0x94>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <TIM_OC2_SetConfig+0xe8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d113      	bne.n	8004e90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	621a      	str	r2, [r3, #32]
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_OC3_SetConfig+0x66>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10d      	bne.n	8004f42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <TIM_OC3_SetConfig+0xe0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_OC3_SetConfig+0x92>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <TIM_OC3_SetConfig+0xe4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	031b      	lsls	r3, r3, #12
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <TIM_OC4_SetConfig+0xa4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_OC4_SetConfig+0x68>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a11      	ldr	r2, [pc, #68]	; (8005050 <TIM_OC4_SetConfig+0xa8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d109      	bne.n	8005024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f023 0201 	bic.w	r2, r3, #1
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 030a 	bic.w	r3, r3, #10
 8005090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0210 	bic.w	r2, r3, #16
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	f043 0307 	orr.w	r3, r3, #7
 8005134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	431a      	orrs	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 031f 	and.w	r3, r3, #31
 800519a:	2201      	movs	r2, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	fa01 f303 	lsl.w	r3, r1, r3
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e05a      	b.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a21      	ldr	r2, [pc, #132]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005238:	d01d      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a17      	ldr	r2, [pc, #92]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10c      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	4313      	orrs	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <__errno>:
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <__errno+0x8>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c

080052d8 <__libc_init_array>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	4d0d      	ldr	r5, [pc, #52]	; (8005310 <__libc_init_array+0x38>)
 80052dc:	4c0d      	ldr	r4, [pc, #52]	; (8005314 <__libc_init_array+0x3c>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	2600      	movs	r6, #0
 80052e4:	42a6      	cmp	r6, r4
 80052e6:	d109      	bne.n	80052fc <__libc_init_array+0x24>
 80052e8:	4d0b      	ldr	r5, [pc, #44]	; (8005318 <__libc_init_array+0x40>)
 80052ea:	4c0c      	ldr	r4, [pc, #48]	; (800531c <__libc_init_array+0x44>)
 80052ec:	f002 feb6 	bl	800805c <_init>
 80052f0:	1b64      	subs	r4, r4, r5
 80052f2:	10a4      	asrs	r4, r4, #2
 80052f4:	2600      	movs	r6, #0
 80052f6:	42a6      	cmp	r6, r4
 80052f8:	d105      	bne.n	8005306 <__libc_init_array+0x2e>
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005300:	4798      	blx	r3
 8005302:	3601      	adds	r6, #1
 8005304:	e7ee      	b.n	80052e4 <__libc_init_array+0xc>
 8005306:	f855 3b04 	ldr.w	r3, [r5], #4
 800530a:	4798      	blx	r3
 800530c:	3601      	adds	r6, #1
 800530e:	e7f2      	b.n	80052f6 <__libc_init_array+0x1e>
 8005310:	08008494 	.word	0x08008494
 8005314:	08008494 	.word	0x08008494
 8005318:	08008494 	.word	0x08008494
 800531c:	08008498 	.word	0x08008498

08005320 <memset>:
 8005320:	4402      	add	r2, r0
 8005322:	4603      	mov	r3, r0
 8005324:	4293      	cmp	r3, r2
 8005326:	d100      	bne.n	800532a <memset+0xa>
 8005328:	4770      	bx	lr
 800532a:	f803 1b01 	strb.w	r1, [r3], #1
 800532e:	e7f9      	b.n	8005324 <memset+0x4>

08005330 <__cvt>:
 8005330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	ec55 4b10 	vmov	r4, r5, d0
 8005338:	2d00      	cmp	r5, #0
 800533a:	460e      	mov	r6, r1
 800533c:	4619      	mov	r1, r3
 800533e:	462b      	mov	r3, r5
 8005340:	bfbb      	ittet	lt
 8005342:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005346:	461d      	movlt	r5, r3
 8005348:	2300      	movge	r3, #0
 800534a:	232d      	movlt	r3, #45	; 0x2d
 800534c:	700b      	strb	r3, [r1, #0]
 800534e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005350:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005354:	4691      	mov	r9, r2
 8005356:	f023 0820 	bic.w	r8, r3, #32
 800535a:	bfbc      	itt	lt
 800535c:	4622      	movlt	r2, r4
 800535e:	4614      	movlt	r4, r2
 8005360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005364:	d005      	beq.n	8005372 <__cvt+0x42>
 8005366:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800536a:	d100      	bne.n	800536e <__cvt+0x3e>
 800536c:	3601      	adds	r6, #1
 800536e:	2102      	movs	r1, #2
 8005370:	e000      	b.n	8005374 <__cvt+0x44>
 8005372:	2103      	movs	r1, #3
 8005374:	ab03      	add	r3, sp, #12
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	ab02      	add	r3, sp, #8
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	ec45 4b10 	vmov	d0, r4, r5
 8005380:	4653      	mov	r3, sl
 8005382:	4632      	mov	r2, r6
 8005384:	f000 fcec 	bl	8005d60 <_dtoa_r>
 8005388:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800538c:	4607      	mov	r7, r0
 800538e:	d102      	bne.n	8005396 <__cvt+0x66>
 8005390:	f019 0f01 	tst.w	r9, #1
 8005394:	d022      	beq.n	80053dc <__cvt+0xac>
 8005396:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800539a:	eb07 0906 	add.w	r9, r7, r6
 800539e:	d110      	bne.n	80053c2 <__cvt+0x92>
 80053a0:	783b      	ldrb	r3, [r7, #0]
 80053a2:	2b30      	cmp	r3, #48	; 0x30
 80053a4:	d10a      	bne.n	80053bc <__cvt+0x8c>
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fb fb9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80053b2:	b918      	cbnz	r0, 80053bc <__cvt+0x8c>
 80053b4:	f1c6 0601 	rsb	r6, r6, #1
 80053b8:	f8ca 6000 	str.w	r6, [sl]
 80053bc:	f8da 3000 	ldr.w	r3, [sl]
 80053c0:	4499      	add	r9, r3
 80053c2:	2200      	movs	r2, #0
 80053c4:	2300      	movs	r3, #0
 80053c6:	4620      	mov	r0, r4
 80053c8:	4629      	mov	r1, r5
 80053ca:	f7fb fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80053ce:	b108      	cbz	r0, 80053d4 <__cvt+0xa4>
 80053d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80053d4:	2230      	movs	r2, #48	; 0x30
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	454b      	cmp	r3, r9
 80053da:	d307      	bcc.n	80053ec <__cvt+0xbc>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e0:	1bdb      	subs	r3, r3, r7
 80053e2:	4638      	mov	r0, r7
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	b004      	add	sp, #16
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	1c59      	adds	r1, r3, #1
 80053ee:	9103      	str	r1, [sp, #12]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e7f0      	b.n	80053d6 <__cvt+0xa6>

080053f4 <__exponent>:
 80053f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f6:	4603      	mov	r3, r0
 80053f8:	2900      	cmp	r1, #0
 80053fa:	bfb8      	it	lt
 80053fc:	4249      	neglt	r1, r1
 80053fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005402:	bfb4      	ite	lt
 8005404:	222d      	movlt	r2, #45	; 0x2d
 8005406:	222b      	movge	r2, #43	; 0x2b
 8005408:	2909      	cmp	r1, #9
 800540a:	7042      	strb	r2, [r0, #1]
 800540c:	dd2a      	ble.n	8005464 <__exponent+0x70>
 800540e:	f10d 0407 	add.w	r4, sp, #7
 8005412:	46a4      	mov	ip, r4
 8005414:	270a      	movs	r7, #10
 8005416:	46a6      	mov	lr, r4
 8005418:	460a      	mov	r2, r1
 800541a:	fb91 f6f7 	sdiv	r6, r1, r7
 800541e:	fb07 1516 	mls	r5, r7, r6, r1
 8005422:	3530      	adds	r5, #48	; 0x30
 8005424:	2a63      	cmp	r2, #99	; 0x63
 8005426:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800542a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800542e:	4631      	mov	r1, r6
 8005430:	dcf1      	bgt.n	8005416 <__exponent+0x22>
 8005432:	3130      	adds	r1, #48	; 0x30
 8005434:	f1ae 0502 	sub.w	r5, lr, #2
 8005438:	f804 1c01 	strb.w	r1, [r4, #-1]
 800543c:	1c44      	adds	r4, r0, #1
 800543e:	4629      	mov	r1, r5
 8005440:	4561      	cmp	r1, ip
 8005442:	d30a      	bcc.n	800545a <__exponent+0x66>
 8005444:	f10d 0209 	add.w	r2, sp, #9
 8005448:	eba2 020e 	sub.w	r2, r2, lr
 800544c:	4565      	cmp	r5, ip
 800544e:	bf88      	it	hi
 8005450:	2200      	movhi	r2, #0
 8005452:	4413      	add	r3, r2
 8005454:	1a18      	subs	r0, r3, r0
 8005456:	b003      	add	sp, #12
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005462:	e7ed      	b.n	8005440 <__exponent+0x4c>
 8005464:	2330      	movs	r3, #48	; 0x30
 8005466:	3130      	adds	r1, #48	; 0x30
 8005468:	7083      	strb	r3, [r0, #2]
 800546a:	70c1      	strb	r1, [r0, #3]
 800546c:	1d03      	adds	r3, r0, #4
 800546e:	e7f1      	b.n	8005454 <__exponent+0x60>

08005470 <_printf_float>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b02 	vpush	{d8}
 8005478:	b08d      	sub	sp, #52	; 0x34
 800547a:	460c      	mov	r4, r1
 800547c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005480:	4616      	mov	r6, r2
 8005482:	461f      	mov	r7, r3
 8005484:	4605      	mov	r5, r0
 8005486:	f001 fa57 	bl	8006938 <_localeconv_r>
 800548a:	f8d0 a000 	ldr.w	sl, [r0]
 800548e:	4650      	mov	r0, sl
 8005490:	f7fa feae 	bl	80001f0 <strlen>
 8005494:	2300      	movs	r3, #0
 8005496:	930a      	str	r3, [sp, #40]	; 0x28
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	9305      	str	r3, [sp, #20]
 800549c:	f8d8 3000 	ldr.w	r3, [r8]
 80054a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	f8c8 2000 	str.w	r2, [r8]
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80054c8:	ee08 0a10 	vmov	s16, r0
 80054cc:	4b9f      	ldr	r3, [pc, #636]	; (800574c <_printf_float+0x2dc>)
 80054ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d6:	f7fb fb39 	bl	8000b4c <__aeabi_dcmpun>
 80054da:	bb88      	cbnz	r0, 8005540 <_printf_float+0xd0>
 80054dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054e0:	4b9a      	ldr	r3, [pc, #616]	; (800574c <_printf_float+0x2dc>)
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e6:	f7fb fb13 	bl	8000b10 <__aeabi_dcmple>
 80054ea:	bb48      	cbnz	r0, 8005540 <_printf_float+0xd0>
 80054ec:	2200      	movs	r2, #0
 80054ee:	2300      	movs	r3, #0
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fb fb02 	bl	8000afc <__aeabi_dcmplt>
 80054f8:	b110      	cbz	r0, 8005500 <_printf_float+0x90>
 80054fa:	232d      	movs	r3, #45	; 0x2d
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005500:	4b93      	ldr	r3, [pc, #588]	; (8005750 <_printf_float+0x2e0>)
 8005502:	4894      	ldr	r0, [pc, #592]	; (8005754 <_printf_float+0x2e4>)
 8005504:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005508:	bf94      	ite	ls
 800550a:	4698      	movls	r8, r3
 800550c:	4680      	movhi	r8, r0
 800550e:	2303      	movs	r3, #3
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	9b05      	ldr	r3, [sp, #20]
 8005514:	f023 0204 	bic.w	r2, r3, #4
 8005518:	6022      	str	r2, [r4, #0]
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	9700      	str	r7, [sp, #0]
 8005520:	4633      	mov	r3, r6
 8005522:	aa0b      	add	r2, sp, #44	; 0x2c
 8005524:	4621      	mov	r1, r4
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f9d8 	bl	80058dc <_printf_common>
 800552c:	3001      	adds	r0, #1
 800552e:	f040 8090 	bne.w	8005652 <_printf_float+0x1e2>
 8005532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005536:	b00d      	add	sp, #52	; 0x34
 8005538:	ecbd 8b02 	vpop	{d8}
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	4640      	mov	r0, r8
 8005546:	4649      	mov	r1, r9
 8005548:	f7fb fb00 	bl	8000b4c <__aeabi_dcmpun>
 800554c:	b140      	cbz	r0, 8005560 <_printf_float+0xf0>
 800554e:	464b      	mov	r3, r9
 8005550:	2b00      	cmp	r3, #0
 8005552:	bfbc      	itt	lt
 8005554:	232d      	movlt	r3, #45	; 0x2d
 8005556:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800555a:	487f      	ldr	r0, [pc, #508]	; (8005758 <_printf_float+0x2e8>)
 800555c:	4b7f      	ldr	r3, [pc, #508]	; (800575c <_printf_float+0x2ec>)
 800555e:	e7d1      	b.n	8005504 <_printf_float+0x94>
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005566:	9206      	str	r2, [sp, #24]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	d13f      	bne.n	80055ec <_printf_float+0x17c>
 800556c:	2306      	movs	r3, #6
 800556e:	6063      	str	r3, [r4, #4]
 8005570:	9b05      	ldr	r3, [sp, #20]
 8005572:	6861      	ldr	r1, [r4, #4]
 8005574:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005578:	2300      	movs	r3, #0
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	ab0a      	add	r3, sp, #40	; 0x28
 800557e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005582:	ab09      	add	r3, sp, #36	; 0x24
 8005584:	ec49 8b10 	vmov	d0, r8, r9
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005590:	4628      	mov	r0, r5
 8005592:	f7ff fecd 	bl	8005330 <__cvt>
 8005596:	9b06      	ldr	r3, [sp, #24]
 8005598:	9909      	ldr	r1, [sp, #36]	; 0x24
 800559a:	2b47      	cmp	r3, #71	; 0x47
 800559c:	4680      	mov	r8, r0
 800559e:	d108      	bne.n	80055b2 <_printf_float+0x142>
 80055a0:	1cc8      	adds	r0, r1, #3
 80055a2:	db02      	blt.n	80055aa <_printf_float+0x13a>
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	4299      	cmp	r1, r3
 80055a8:	dd41      	ble.n	800562e <_printf_float+0x1be>
 80055aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80055ae:	fa5f fb8b 	uxtb.w	fp, fp
 80055b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055b6:	d820      	bhi.n	80055fa <_printf_float+0x18a>
 80055b8:	3901      	subs	r1, #1
 80055ba:	465a      	mov	r2, fp
 80055bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055c0:	9109      	str	r1, [sp, #36]	; 0x24
 80055c2:	f7ff ff17 	bl	80053f4 <__exponent>
 80055c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c8:	1813      	adds	r3, r2, r0
 80055ca:	2a01      	cmp	r2, #1
 80055cc:	4681      	mov	r9, r0
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	dc02      	bgt.n	80055d8 <_printf_float+0x168>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	d501      	bpl.n	80055dc <_printf_float+0x16c>
 80055d8:	3301      	adds	r3, #1
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d09c      	beq.n	800551e <_printf_float+0xae>
 80055e4:	232d      	movs	r3, #45	; 0x2d
 80055e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ea:	e798      	b.n	800551e <_printf_float+0xae>
 80055ec:	9a06      	ldr	r2, [sp, #24]
 80055ee:	2a47      	cmp	r2, #71	; 0x47
 80055f0:	d1be      	bne.n	8005570 <_printf_float+0x100>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1bc      	bne.n	8005570 <_printf_float+0x100>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e7b9      	b.n	800556e <_printf_float+0xfe>
 80055fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055fe:	d118      	bne.n	8005632 <_printf_float+0x1c2>
 8005600:	2900      	cmp	r1, #0
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	dd0b      	ble.n	800561e <_printf_float+0x1ae>
 8005606:	6121      	str	r1, [r4, #16]
 8005608:	b913      	cbnz	r3, 8005610 <_printf_float+0x1a0>
 800560a:	6822      	ldr	r2, [r4, #0]
 800560c:	07d0      	lsls	r0, r2, #31
 800560e:	d502      	bpl.n	8005616 <_printf_float+0x1a6>
 8005610:	3301      	adds	r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	65a1      	str	r1, [r4, #88]	; 0x58
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	e7de      	b.n	80055dc <_printf_float+0x16c>
 800561e:	b913      	cbnz	r3, 8005626 <_printf_float+0x1b6>
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	07d2      	lsls	r2, r2, #31
 8005624:	d501      	bpl.n	800562a <_printf_float+0x1ba>
 8005626:	3302      	adds	r3, #2
 8005628:	e7f4      	b.n	8005614 <_printf_float+0x1a4>
 800562a:	2301      	movs	r3, #1
 800562c:	e7f2      	b.n	8005614 <_printf_float+0x1a4>
 800562e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005634:	4299      	cmp	r1, r3
 8005636:	db05      	blt.n	8005644 <_printf_float+0x1d4>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6121      	str	r1, [r4, #16]
 800563c:	07d8      	lsls	r0, r3, #31
 800563e:	d5ea      	bpl.n	8005616 <_printf_float+0x1a6>
 8005640:	1c4b      	adds	r3, r1, #1
 8005642:	e7e7      	b.n	8005614 <_printf_float+0x1a4>
 8005644:	2900      	cmp	r1, #0
 8005646:	bfd4      	ite	le
 8005648:	f1c1 0202 	rsble	r2, r1, #2
 800564c:	2201      	movgt	r2, #1
 800564e:	4413      	add	r3, r2
 8005650:	e7e0      	b.n	8005614 <_printf_float+0x1a4>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	055a      	lsls	r2, r3, #21
 8005656:	d407      	bmi.n	8005668 <_printf_float+0x1f8>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	4642      	mov	r2, r8
 800565c:	4631      	mov	r1, r6
 800565e:	4628      	mov	r0, r5
 8005660:	47b8      	blx	r7
 8005662:	3001      	adds	r0, #1
 8005664:	d12c      	bne.n	80056c0 <_printf_float+0x250>
 8005666:	e764      	b.n	8005532 <_printf_float+0xc2>
 8005668:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800566c:	f240 80e0 	bls.w	8005830 <_printf_float+0x3c0>
 8005670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	f7fb fa36 	bl	8000ae8 <__aeabi_dcmpeq>
 800567c:	2800      	cmp	r0, #0
 800567e:	d034      	beq.n	80056ea <_printf_float+0x27a>
 8005680:	4a37      	ldr	r2, [pc, #220]	; (8005760 <_printf_float+0x2f0>)
 8005682:	2301      	movs	r3, #1
 8005684:	4631      	mov	r1, r6
 8005686:	4628      	mov	r0, r5
 8005688:	47b8      	blx	r7
 800568a:	3001      	adds	r0, #1
 800568c:	f43f af51 	beq.w	8005532 <_printf_float+0xc2>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	429a      	cmp	r2, r3
 8005696:	db02      	blt.n	800569e <_printf_float+0x22e>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07d8      	lsls	r0, r3, #31
 800569c:	d510      	bpl.n	80056c0 <_printf_float+0x250>
 800569e:	ee18 3a10 	vmov	r3, s16
 80056a2:	4652      	mov	r2, sl
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af41 	beq.w	8005532 <_printf_float+0xc2>
 80056b0:	f04f 0800 	mov.w	r8, #0
 80056b4:	f104 091a 	add.w	r9, r4, #26
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	3b01      	subs	r3, #1
 80056bc:	4543      	cmp	r3, r8
 80056be:	dc09      	bgt.n	80056d4 <_printf_float+0x264>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	079b      	lsls	r3, r3, #30
 80056c4:	f100 8105 	bmi.w	80058d2 <_printf_float+0x462>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e730      	b.n	8005536 <_printf_float+0xc6>
 80056d4:	2301      	movs	r3, #1
 80056d6:	464a      	mov	r2, r9
 80056d8:	4631      	mov	r1, r6
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	f43f af27 	beq.w	8005532 <_printf_float+0xc2>
 80056e4:	f108 0801 	add.w	r8, r8, #1
 80056e8:	e7e6      	b.n	80056b8 <_printf_float+0x248>
 80056ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	dc39      	bgt.n	8005764 <_printf_float+0x2f4>
 80056f0:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <_printf_float+0x2f0>)
 80056f2:	2301      	movs	r3, #1
 80056f4:	4631      	mov	r1, r6
 80056f6:	4628      	mov	r0, r5
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f af19 	beq.w	8005532 <_printf_float+0xc2>
 8005700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005704:	4313      	orrs	r3, r2
 8005706:	d102      	bne.n	800570e <_printf_float+0x29e>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d5d8      	bpl.n	80056c0 <_printf_float+0x250>
 800570e:	ee18 3a10 	vmov	r3, s16
 8005712:	4652      	mov	r2, sl
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f af09 	beq.w	8005532 <_printf_float+0xc2>
 8005720:	f04f 0900 	mov.w	r9, #0
 8005724:	f104 0a1a 	add.w	sl, r4, #26
 8005728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572a:	425b      	negs	r3, r3
 800572c:	454b      	cmp	r3, r9
 800572e:	dc01      	bgt.n	8005734 <_printf_float+0x2c4>
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	e792      	b.n	800565a <_printf_float+0x1ea>
 8005734:	2301      	movs	r3, #1
 8005736:	4652      	mov	r2, sl
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f aef7 	beq.w	8005532 <_printf_float+0xc2>
 8005744:	f109 0901 	add.w	r9, r9, #1
 8005748:	e7ee      	b.n	8005728 <_printf_float+0x2b8>
 800574a:	bf00      	nop
 800574c:	7fefffff 	.word	0x7fefffff
 8005750:	080080ac 	.word	0x080080ac
 8005754:	080080b0 	.word	0x080080b0
 8005758:	080080b8 	.word	0x080080b8
 800575c:	080080b4 	.word	0x080080b4
 8005760:	080080bc 	.word	0x080080bc
 8005764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005766:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005768:	429a      	cmp	r2, r3
 800576a:	bfa8      	it	ge
 800576c:	461a      	movge	r2, r3
 800576e:	2a00      	cmp	r2, #0
 8005770:	4691      	mov	r9, r2
 8005772:	dc37      	bgt.n	80057e4 <_printf_float+0x374>
 8005774:	f04f 0b00 	mov.w	fp, #0
 8005778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800577c:	f104 021a 	add.w	r2, r4, #26
 8005780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	eba3 0309 	sub.w	r3, r3, r9
 8005788:	455b      	cmp	r3, fp
 800578a:	dc33      	bgt.n	80057f4 <_printf_float+0x384>
 800578c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005790:	429a      	cmp	r2, r3
 8005792:	db3b      	blt.n	800580c <_printf_float+0x39c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d438      	bmi.n	800580c <_printf_float+0x39c>
 800579a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579c:	9b05      	ldr	r3, [sp, #20]
 800579e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	eba2 0901 	sub.w	r9, r2, r1
 80057a6:	4599      	cmp	r9, r3
 80057a8:	bfa8      	it	ge
 80057aa:	4699      	movge	r9, r3
 80057ac:	f1b9 0f00 	cmp.w	r9, #0
 80057b0:	dc35      	bgt.n	800581e <_printf_float+0x3ae>
 80057b2:	f04f 0800 	mov.w	r8, #0
 80057b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057ba:	f104 0a1a 	add.w	sl, r4, #26
 80057be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	eba3 0309 	sub.w	r3, r3, r9
 80057c8:	4543      	cmp	r3, r8
 80057ca:	f77f af79 	ble.w	80056c0 <_printf_float+0x250>
 80057ce:	2301      	movs	r3, #1
 80057d0:	4652      	mov	r2, sl
 80057d2:	4631      	mov	r1, r6
 80057d4:	4628      	mov	r0, r5
 80057d6:	47b8      	blx	r7
 80057d8:	3001      	adds	r0, #1
 80057da:	f43f aeaa 	beq.w	8005532 <_printf_float+0xc2>
 80057de:	f108 0801 	add.w	r8, r8, #1
 80057e2:	e7ec      	b.n	80057be <_printf_float+0x34e>
 80057e4:	4613      	mov	r3, r2
 80057e6:	4631      	mov	r1, r6
 80057e8:	4642      	mov	r2, r8
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	d1c0      	bne.n	8005774 <_printf_float+0x304>
 80057f2:	e69e      	b.n	8005532 <_printf_float+0xc2>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	9205      	str	r2, [sp, #20]
 80057fc:	47b8      	blx	r7
 80057fe:	3001      	adds	r0, #1
 8005800:	f43f ae97 	beq.w	8005532 <_printf_float+0xc2>
 8005804:	9a05      	ldr	r2, [sp, #20]
 8005806:	f10b 0b01 	add.w	fp, fp, #1
 800580a:	e7b9      	b.n	8005780 <_printf_float+0x310>
 800580c:	ee18 3a10 	vmov	r3, s16
 8005810:	4652      	mov	r2, sl
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	d1be      	bne.n	800579a <_printf_float+0x32a>
 800581c:	e689      	b.n	8005532 <_printf_float+0xc2>
 800581e:	9a05      	ldr	r2, [sp, #20]
 8005820:	464b      	mov	r3, r9
 8005822:	4442      	add	r2, r8
 8005824:	4631      	mov	r1, r6
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	d1c1      	bne.n	80057b2 <_printf_float+0x342>
 800582e:	e680      	b.n	8005532 <_printf_float+0xc2>
 8005830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005832:	2a01      	cmp	r2, #1
 8005834:	dc01      	bgt.n	800583a <_printf_float+0x3ca>
 8005836:	07db      	lsls	r3, r3, #31
 8005838:	d538      	bpl.n	80058ac <_printf_float+0x43c>
 800583a:	2301      	movs	r3, #1
 800583c:	4642      	mov	r2, r8
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae74 	beq.w	8005532 <_printf_float+0xc2>
 800584a:	ee18 3a10 	vmov	r3, s16
 800584e:	4652      	mov	r2, sl
 8005850:	4631      	mov	r1, r6
 8005852:	4628      	mov	r0, r5
 8005854:	47b8      	blx	r7
 8005856:	3001      	adds	r0, #1
 8005858:	f43f ae6b 	beq.w	8005532 <_printf_float+0xc2>
 800585c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005860:	2200      	movs	r2, #0
 8005862:	2300      	movs	r3, #0
 8005864:	f7fb f940 	bl	8000ae8 <__aeabi_dcmpeq>
 8005868:	b9d8      	cbnz	r0, 80058a2 <_printf_float+0x432>
 800586a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586c:	f108 0201 	add.w	r2, r8, #1
 8005870:	3b01      	subs	r3, #1
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	d10e      	bne.n	800589a <_printf_float+0x42a>
 800587c:	e659      	b.n	8005532 <_printf_float+0xc2>
 800587e:	2301      	movs	r3, #1
 8005880:	4652      	mov	r2, sl
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	f43f ae52 	beq.w	8005532 <_printf_float+0xc2>
 800588e:	f108 0801 	add.w	r8, r8, #1
 8005892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	4543      	cmp	r3, r8
 8005898:	dcf1      	bgt.n	800587e <_printf_float+0x40e>
 800589a:	464b      	mov	r3, r9
 800589c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80058a0:	e6dc      	b.n	800565c <_printf_float+0x1ec>
 80058a2:	f04f 0800 	mov.w	r8, #0
 80058a6:	f104 0a1a 	add.w	sl, r4, #26
 80058aa:	e7f2      	b.n	8005892 <_printf_float+0x422>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4642      	mov	r2, r8
 80058b0:	e7df      	b.n	8005872 <_printf_float+0x402>
 80058b2:	2301      	movs	r3, #1
 80058b4:	464a      	mov	r2, r9
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	f43f ae38 	beq.w	8005532 <_printf_float+0xc2>
 80058c2:	f108 0801 	add.w	r8, r8, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	4543      	cmp	r3, r8
 80058ce:	dcf0      	bgt.n	80058b2 <_printf_float+0x442>
 80058d0:	e6fa      	b.n	80056c8 <_printf_float+0x258>
 80058d2:	f04f 0800 	mov.w	r8, #0
 80058d6:	f104 0919 	add.w	r9, r4, #25
 80058da:	e7f4      	b.n	80058c6 <_printf_float+0x456>

080058dc <_printf_common>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4616      	mov	r6, r2
 80058e2:	4699      	mov	r9, r3
 80058e4:	688a      	ldr	r2, [r1, #8]
 80058e6:	690b      	ldr	r3, [r1, #16]
 80058e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bfb8      	it	lt
 80058f0:	4613      	movlt	r3, r2
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f8:	4607      	mov	r7, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	b10a      	cbz	r2, 8005902 <_printf_common+0x26>
 80058fe:	3301      	adds	r3, #1
 8005900:	6033      	str	r3, [r6, #0]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	0699      	lsls	r1, r3, #26
 8005906:	bf42      	ittt	mi
 8005908:	6833      	ldrmi	r3, [r6, #0]
 800590a:	3302      	addmi	r3, #2
 800590c:	6033      	strmi	r3, [r6, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	f015 0506 	ands.w	r5, r5, #6
 8005914:	d106      	bne.n	8005924 <_printf_common+0x48>
 8005916:	f104 0a19 	add.w	sl, r4, #25
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	6832      	ldr	r2, [r6, #0]
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	42ab      	cmp	r3, r5
 8005922:	dc26      	bgt.n	8005972 <_printf_common+0x96>
 8005924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005928:	1e13      	subs	r3, r2, #0
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	bf18      	it	ne
 800592e:	2301      	movne	r3, #1
 8005930:	0692      	lsls	r2, r2, #26
 8005932:	d42b      	bmi.n	800598c <_printf_common+0xb0>
 8005934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005938:	4649      	mov	r1, r9
 800593a:	4638      	mov	r0, r7
 800593c:	47c0      	blx	r8
 800593e:	3001      	adds	r0, #1
 8005940:	d01e      	beq.n	8005980 <_printf_common+0xa4>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	68e5      	ldr	r5, [r4, #12]
 8005946:	6832      	ldr	r2, [r6, #0]
 8005948:	f003 0306 	and.w	r3, r3, #6
 800594c:	2b04      	cmp	r3, #4
 800594e:	bf08      	it	eq
 8005950:	1aad      	subeq	r5, r5, r2
 8005952:	68a3      	ldr	r3, [r4, #8]
 8005954:	6922      	ldr	r2, [r4, #16]
 8005956:	bf0c      	ite	eq
 8005958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800595c:	2500      	movne	r5, #0
 800595e:	4293      	cmp	r3, r2
 8005960:	bfc4      	itt	gt
 8005962:	1a9b      	subgt	r3, r3, r2
 8005964:	18ed      	addgt	r5, r5, r3
 8005966:	2600      	movs	r6, #0
 8005968:	341a      	adds	r4, #26
 800596a:	42b5      	cmp	r5, r6
 800596c:	d11a      	bne.n	80059a4 <_printf_common+0xc8>
 800596e:	2000      	movs	r0, #0
 8005970:	e008      	b.n	8005984 <_printf_common+0xa8>
 8005972:	2301      	movs	r3, #1
 8005974:	4652      	mov	r2, sl
 8005976:	4649      	mov	r1, r9
 8005978:	4638      	mov	r0, r7
 800597a:	47c0      	blx	r8
 800597c:	3001      	adds	r0, #1
 800597e:	d103      	bne.n	8005988 <_printf_common+0xac>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005988:	3501      	adds	r5, #1
 800598a:	e7c6      	b.n	800591a <_printf_common+0x3e>
 800598c:	18e1      	adds	r1, r4, r3
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	2030      	movs	r0, #48	; 0x30
 8005992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005996:	4422      	add	r2, r4
 8005998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800599c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059a0:	3302      	adds	r3, #2
 80059a2:	e7c7      	b.n	8005934 <_printf_common+0x58>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4622      	mov	r2, r4
 80059a8:	4649      	mov	r1, r9
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0e6      	beq.n	8005980 <_printf_common+0xa4>
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7d9      	b.n	800596a <_printf_common+0x8e>
	...

080059b8 <_printf_i>:
 80059b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	460c      	mov	r4, r1
 80059be:	4691      	mov	r9, r2
 80059c0:	7e27      	ldrb	r7, [r4, #24]
 80059c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059c4:	2f78      	cmp	r7, #120	; 0x78
 80059c6:	4680      	mov	r8, r0
 80059c8:	469a      	mov	sl, r3
 80059ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ce:	d807      	bhi.n	80059e0 <_printf_i+0x28>
 80059d0:	2f62      	cmp	r7, #98	; 0x62
 80059d2:	d80a      	bhi.n	80059ea <_printf_i+0x32>
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	f000 80d8 	beq.w	8005b8a <_printf_i+0x1d2>
 80059da:	2f58      	cmp	r7, #88	; 0x58
 80059dc:	f000 80a3 	beq.w	8005b26 <_printf_i+0x16e>
 80059e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e8:	e03a      	b.n	8005a60 <_printf_i+0xa8>
 80059ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059ee:	2b15      	cmp	r3, #21
 80059f0:	d8f6      	bhi.n	80059e0 <_printf_i+0x28>
 80059f2:	a001      	add	r0, pc, #4	; (adr r0, 80059f8 <_printf_i+0x40>)
 80059f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059f8:	08005a51 	.word	0x08005a51
 80059fc:	08005a65 	.word	0x08005a65
 8005a00:	080059e1 	.word	0x080059e1
 8005a04:	080059e1 	.word	0x080059e1
 8005a08:	080059e1 	.word	0x080059e1
 8005a0c:	080059e1 	.word	0x080059e1
 8005a10:	08005a65 	.word	0x08005a65
 8005a14:	080059e1 	.word	0x080059e1
 8005a18:	080059e1 	.word	0x080059e1
 8005a1c:	080059e1 	.word	0x080059e1
 8005a20:	080059e1 	.word	0x080059e1
 8005a24:	08005b71 	.word	0x08005b71
 8005a28:	08005a95 	.word	0x08005a95
 8005a2c:	08005b53 	.word	0x08005b53
 8005a30:	080059e1 	.word	0x080059e1
 8005a34:	080059e1 	.word	0x080059e1
 8005a38:	08005b93 	.word	0x08005b93
 8005a3c:	080059e1 	.word	0x080059e1
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	080059e1 	.word	0x080059e1
 8005a48:	080059e1 	.word	0x080059e1
 8005a4c:	08005b5b 	.word	0x08005b5b
 8005a50:	680b      	ldr	r3, [r1, #0]
 8005a52:	1d1a      	adds	r2, r3, #4
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	600a      	str	r2, [r1, #0]
 8005a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0a3      	b.n	8005bac <_printf_i+0x1f4>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	6808      	ldr	r0, [r1, #0]
 8005a68:	062e      	lsls	r6, r5, #24
 8005a6a:	f100 0304 	add.w	r3, r0, #4
 8005a6e:	d50a      	bpl.n	8005a86 <_printf_i+0xce>
 8005a70:	6805      	ldr	r5, [r0, #0]
 8005a72:	600b      	str	r3, [r1, #0]
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	da03      	bge.n	8005a80 <_printf_i+0xc8>
 8005a78:	232d      	movs	r3, #45	; 0x2d
 8005a7a:	426d      	negs	r5, r5
 8005a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a80:	485e      	ldr	r0, [pc, #376]	; (8005bfc <_printf_i+0x244>)
 8005a82:	230a      	movs	r3, #10
 8005a84:	e019      	b.n	8005aba <_printf_i+0x102>
 8005a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a8a:	6805      	ldr	r5, [r0, #0]
 8005a8c:	600b      	str	r3, [r1, #0]
 8005a8e:	bf18      	it	ne
 8005a90:	b22d      	sxthne	r5, r5
 8005a92:	e7ef      	b.n	8005a74 <_printf_i+0xbc>
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	6825      	ldr	r5, [r4, #0]
 8005a98:	1d18      	adds	r0, r3, #4
 8005a9a:	6008      	str	r0, [r1, #0]
 8005a9c:	0628      	lsls	r0, r5, #24
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0xec>
 8005aa0:	681d      	ldr	r5, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <_printf_i+0xf2>
 8005aa4:	0669      	lsls	r1, r5, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0xe8>
 8005aa8:	881d      	ldrh	r5, [r3, #0]
 8005aaa:	4854      	ldr	r0, [pc, #336]	; (8005bfc <_printf_i+0x244>)
 8005aac:	2f6f      	cmp	r7, #111	; 0x6f
 8005aae:	bf0c      	ite	eq
 8005ab0:	2308      	moveq	r3, #8
 8005ab2:	230a      	movne	r3, #10
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005aba:	6866      	ldr	r6, [r4, #4]
 8005abc:	60a6      	str	r6, [r4, #8]
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	bfa2      	ittt	ge
 8005ac2:	6821      	ldrge	r1, [r4, #0]
 8005ac4:	f021 0104 	bicge.w	r1, r1, #4
 8005ac8:	6021      	strge	r1, [r4, #0]
 8005aca:	b90d      	cbnz	r5, 8005ad0 <_printf_i+0x118>
 8005acc:	2e00      	cmp	r6, #0
 8005ace:	d04d      	beq.n	8005b6c <_printf_i+0x1b4>
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8005ada:	5dc7      	ldrb	r7, [r0, r7]
 8005adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ae0:	462f      	mov	r7, r5
 8005ae2:	42bb      	cmp	r3, r7
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	d9f4      	bls.n	8005ad2 <_printf_i+0x11a>
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d10b      	bne.n	8005b04 <_printf_i+0x14c>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	07df      	lsls	r7, r3, #31
 8005af0:	d508      	bpl.n	8005b04 <_printf_i+0x14c>
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	6861      	ldr	r1, [r4, #4]
 8005af6:	4299      	cmp	r1, r3
 8005af8:	bfde      	ittt	le
 8005afa:	2330      	movle	r3, #48	; 0x30
 8005afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b00:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005b04:	1b92      	subs	r2, r2, r6
 8005b06:	6122      	str	r2, [r4, #16]
 8005b08:	f8cd a000 	str.w	sl, [sp]
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	aa03      	add	r2, sp, #12
 8005b10:	4621      	mov	r1, r4
 8005b12:	4640      	mov	r0, r8
 8005b14:	f7ff fee2 	bl	80058dc <_printf_common>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d14c      	bne.n	8005bb6 <_printf_i+0x1fe>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b20:	b004      	add	sp, #16
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	4835      	ldr	r0, [pc, #212]	; (8005bfc <_printf_i+0x244>)
 8005b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	680e      	ldr	r6, [r1, #0]
 8005b30:	061f      	lsls	r7, r3, #24
 8005b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b36:	600e      	str	r6, [r1, #0]
 8005b38:	d514      	bpl.n	8005b64 <_printf_i+0x1ac>
 8005b3a:	07d9      	lsls	r1, r3, #31
 8005b3c:	bf44      	itt	mi
 8005b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b42:	6023      	strmi	r3, [r4, #0]
 8005b44:	b91d      	cbnz	r5, 8005b4e <_printf_i+0x196>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	f023 0320 	bic.w	r3, r3, #32
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	2310      	movs	r3, #16
 8005b50:	e7b0      	b.n	8005ab4 <_printf_i+0xfc>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	f043 0320 	orr.w	r3, r3, #32
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	2378      	movs	r3, #120	; 0x78
 8005b5c:	4828      	ldr	r0, [pc, #160]	; (8005c00 <_printf_i+0x248>)
 8005b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b62:	e7e3      	b.n	8005b2c <_printf_i+0x174>
 8005b64:	065e      	lsls	r6, r3, #25
 8005b66:	bf48      	it	mi
 8005b68:	b2ad      	uxthmi	r5, r5
 8005b6a:	e7e6      	b.n	8005b3a <_printf_i+0x182>
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	e7bb      	b.n	8005ae8 <_printf_i+0x130>
 8005b70:	680b      	ldr	r3, [r1, #0]
 8005b72:	6826      	ldr	r6, [r4, #0]
 8005b74:	6960      	ldr	r0, [r4, #20]
 8005b76:	1d1d      	adds	r5, r3, #4
 8005b78:	600d      	str	r5, [r1, #0]
 8005b7a:	0635      	lsls	r5, r6, #24
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0x1cc>
 8005b80:	6018      	str	r0, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0x1d2>
 8005b84:	0671      	lsls	r1, r6, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0x1c8>
 8005b88:	8018      	strh	r0, [r3, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	4616      	mov	r6, r2
 8005b90:	e7ba      	b.n	8005b08 <_printf_i+0x150>
 8005b92:	680b      	ldr	r3, [r1, #0]
 8005b94:	1d1a      	adds	r2, r3, #4
 8005b96:	600a      	str	r2, [r1, #0]
 8005b98:	681e      	ldr	r6, [r3, #0]
 8005b9a:	6862      	ldr	r2, [r4, #4]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f7fa fb2e 	bl	8000200 <memchr>
 8005ba4:	b108      	cbz	r0, 8005baa <_printf_i+0x1f2>
 8005ba6:	1b80      	subs	r0, r0, r6
 8005ba8:	6060      	str	r0, [r4, #4]
 8005baa:	6863      	ldr	r3, [r4, #4]
 8005bac:	6123      	str	r3, [r4, #16]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bb4:	e7a8      	b.n	8005b08 <_printf_i+0x150>
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	47d0      	blx	sl
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d0ab      	beq.n	8005b1c <_printf_i+0x164>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	079b      	lsls	r3, r3, #30
 8005bc8:	d413      	bmi.n	8005bf2 <_printf_i+0x23a>
 8005bca:	68e0      	ldr	r0, [r4, #12]
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	4298      	cmp	r0, r3
 8005bd0:	bfb8      	it	lt
 8005bd2:	4618      	movlt	r0, r3
 8005bd4:	e7a4      	b.n	8005b20 <_printf_i+0x168>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	4632      	mov	r2, r6
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4640      	mov	r0, r8
 8005bde:	47d0      	blx	sl
 8005be0:	3001      	adds	r0, #1
 8005be2:	d09b      	beq.n	8005b1c <_printf_i+0x164>
 8005be4:	3501      	adds	r5, #1
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	9903      	ldr	r1, [sp, #12]
 8005bea:	1a5b      	subs	r3, r3, r1
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dcf2      	bgt.n	8005bd6 <_printf_i+0x21e>
 8005bf0:	e7eb      	b.n	8005bca <_printf_i+0x212>
 8005bf2:	2500      	movs	r5, #0
 8005bf4:	f104 0619 	add.w	r6, r4, #25
 8005bf8:	e7f5      	b.n	8005be6 <_printf_i+0x22e>
 8005bfa:	bf00      	nop
 8005bfc:	080080be 	.word	0x080080be
 8005c00:	080080cf 	.word	0x080080cf

08005c04 <siprintf>:
 8005c04:	b40e      	push	{r1, r2, r3}
 8005c06:	b500      	push	{lr}
 8005c08:	b09c      	sub	sp, #112	; 0x70
 8005c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c0c:	9002      	str	r0, [sp, #8]
 8005c0e:	9006      	str	r0, [sp, #24]
 8005c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c14:	4809      	ldr	r0, [pc, #36]	; (8005c3c <siprintf+0x38>)
 8005c16:	9107      	str	r1, [sp, #28]
 8005c18:	9104      	str	r1, [sp, #16]
 8005c1a:	4909      	ldr	r1, [pc, #36]	; (8005c40 <siprintf+0x3c>)
 8005c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c20:	9105      	str	r1, [sp, #20]
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	a902      	add	r1, sp, #8
 8005c28:	f001 fb34 	bl	8007294 <_svfiprintf_r>
 8005c2c:	9b02      	ldr	r3, [sp, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	b01c      	add	sp, #112	; 0x70
 8005c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c38:	b003      	add	sp, #12
 8005c3a:	4770      	bx	lr
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	ffff0208 	.word	0xffff0208

08005c44 <quorem>:
 8005c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	6903      	ldr	r3, [r0, #16]
 8005c4a:	690c      	ldr	r4, [r1, #16]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	4607      	mov	r7, r0
 8005c50:	f2c0 8081 	blt.w	8005d56 <quorem+0x112>
 8005c54:	3c01      	subs	r4, #1
 8005c56:	f101 0814 	add.w	r8, r1, #20
 8005c5a:	f100 0514 	add.w	r5, r0, #20
 8005c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c7c:	d331      	bcc.n	8005ce2 <quorem+0x9e>
 8005c7e:	f04f 0e00 	mov.w	lr, #0
 8005c82:	4640      	mov	r0, r8
 8005c84:	46ac      	mov	ip, r5
 8005c86:	46f2      	mov	sl, lr
 8005c88:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c8c:	b293      	uxth	r3, r2
 8005c8e:	fb06 e303 	mla	r3, r6, r3, lr
 8005c92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	ebaa 0303 	sub.w	r3, sl, r3
 8005c9c:	0c12      	lsrs	r2, r2, #16
 8005c9e:	f8dc a000 	ldr.w	sl, [ip]
 8005ca2:	fb06 e202 	mla	r2, r6, r2, lr
 8005ca6:	fa13 f38a 	uxtah	r3, r3, sl
 8005caa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cae:	fa1f fa82 	uxth.w	sl, r2
 8005cb2:	f8dc 2000 	ldr.w	r2, [ip]
 8005cb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cc4:	4581      	cmp	r9, r0
 8005cc6:	f84c 3b04 	str.w	r3, [ip], #4
 8005cca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cce:	d2db      	bcs.n	8005c88 <quorem+0x44>
 8005cd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cd4:	b92b      	cbnz	r3, 8005ce2 <quorem+0x9e>
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	3b04      	subs	r3, #4
 8005cda:	429d      	cmp	r5, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	d32e      	bcc.n	8005d3e <quorem+0xfa>
 8005ce0:	613c      	str	r4, [r7, #16]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f001 f8c0 	bl	8006e68 <__mcmp>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	db24      	blt.n	8005d36 <quorem+0xf2>
 8005cec:	3601      	adds	r6, #1
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f04f 0c00 	mov.w	ip, #0
 8005cf4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cf8:	f8d0 e000 	ldr.w	lr, [r0]
 8005cfc:	b293      	uxth	r3, r2
 8005cfe:	ebac 0303 	sub.w	r3, ip, r3
 8005d02:	0c12      	lsrs	r2, r2, #16
 8005d04:	fa13 f38e 	uxtah	r3, r3, lr
 8005d08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d16:	45c1      	cmp	r9, r8
 8005d18:	f840 3b04 	str.w	r3, [r0], #4
 8005d1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d20:	d2e8      	bcs.n	8005cf4 <quorem+0xb0>
 8005d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d2a:	b922      	cbnz	r2, 8005d36 <quorem+0xf2>
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	d30a      	bcc.n	8005d4a <quorem+0x106>
 8005d34:	613c      	str	r4, [r7, #16]
 8005d36:	4630      	mov	r0, r6
 8005d38:	b003      	add	sp, #12
 8005d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	3b04      	subs	r3, #4
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	d1cc      	bne.n	8005ce0 <quorem+0x9c>
 8005d46:	3c01      	subs	r4, #1
 8005d48:	e7c7      	b.n	8005cda <quorem+0x96>
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d1f0      	bne.n	8005d34 <quorem+0xf0>
 8005d52:	3c01      	subs	r4, #1
 8005d54:	e7eb      	b.n	8005d2e <quorem+0xea>
 8005d56:	2000      	movs	r0, #0
 8005d58:	e7ee      	b.n	8005d38 <quorem+0xf4>
 8005d5a:	0000      	movs	r0, r0
 8005d5c:	0000      	movs	r0, r0
	...

08005d60 <_dtoa_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	ed2d 8b02 	vpush	{d8}
 8005d68:	ec57 6b10 	vmov	r6, r7, d0
 8005d6c:	b095      	sub	sp, #84	; 0x54
 8005d6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d80:	b975      	cbnz	r5, 8005da0 <_dtoa_r+0x40>
 8005d82:	2010      	movs	r0, #16
 8005d84:	f000 fddc 	bl	8006940 <malloc>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d8c:	b920      	cbnz	r0, 8005d98 <_dtoa_r+0x38>
 8005d8e:	4bb2      	ldr	r3, [pc, #712]	; (8006058 <_dtoa_r+0x2f8>)
 8005d90:	21ea      	movs	r1, #234	; 0xea
 8005d92:	48b2      	ldr	r0, [pc, #712]	; (800605c <_dtoa_r+0x2fc>)
 8005d94:	f001 fb8e 	bl	80074b4 <__assert_func>
 8005d98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d9c:	6005      	str	r5, [r0, #0]
 8005d9e:	60c5      	str	r5, [r0, #12]
 8005da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	b151      	cbz	r1, 8005dbc <_dtoa_r+0x5c>
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	604a      	str	r2, [r1, #4]
 8005daa:	2301      	movs	r3, #1
 8005dac:	4093      	lsls	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]
 8005db0:	4620      	mov	r0, r4
 8005db2:	f000 fe1b 	bl	80069ec <_Bfree>
 8005db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	1e3b      	subs	r3, r7, #0
 8005dbe:	bfb9      	ittee	lt
 8005dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dc4:	9303      	strlt	r3, [sp, #12]
 8005dc6:	2300      	movge	r3, #0
 8005dc8:	f8c8 3000 	strge.w	r3, [r8]
 8005dcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005dd0:	4ba3      	ldr	r3, [pc, #652]	; (8006060 <_dtoa_r+0x300>)
 8005dd2:	bfbc      	itt	lt
 8005dd4:	2201      	movlt	r2, #1
 8005dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8005dda:	ea33 0309 	bics.w	r3, r3, r9
 8005dde:	d11b      	bne.n	8005e18 <_dtoa_r+0xb8>
 8005de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005de2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dec:	4333      	orrs	r3, r6
 8005dee:	f000 857a 	beq.w	80068e6 <_dtoa_r+0xb86>
 8005df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df4:	b963      	cbnz	r3, 8005e10 <_dtoa_r+0xb0>
 8005df6:	4b9b      	ldr	r3, [pc, #620]	; (8006064 <_dtoa_r+0x304>)
 8005df8:	e024      	b.n	8005e44 <_dtoa_r+0xe4>
 8005dfa:	4b9b      	ldr	r3, [pc, #620]	; (8006068 <_dtoa_r+0x308>)
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	9800      	ldr	r0, [sp, #0]
 8005e06:	b015      	add	sp, #84	; 0x54
 8005e08:	ecbd 8b02 	vpop	{d8}
 8005e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e10:	4b94      	ldr	r3, [pc, #592]	; (8006064 <_dtoa_r+0x304>)
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	3303      	adds	r3, #3
 8005e16:	e7f3      	b.n	8005e00 <_dtoa_r+0xa0>
 8005e18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	ec51 0b17 	vmov	r0, r1, d7
 8005e22:	2300      	movs	r3, #0
 8005e24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e28:	f7fa fe5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	b158      	cbz	r0, 8005e48 <_dtoa_r+0xe8>
 8005e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e32:	2301      	movs	r3, #1
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8551 	beq.w	80068e0 <_dtoa_r+0xb80>
 8005e3e:	488b      	ldr	r0, [pc, #556]	; (800606c <_dtoa_r+0x30c>)
 8005e40:	6018      	str	r0, [r3, #0]
 8005e42:	1e43      	subs	r3, r0, #1
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	e7dd      	b.n	8005e04 <_dtoa_r+0xa4>
 8005e48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e4c:	aa12      	add	r2, sp, #72	; 0x48
 8005e4e:	a913      	add	r1, sp, #76	; 0x4c
 8005e50:	4620      	mov	r0, r4
 8005e52:	f001 f8ad 	bl	8006fb0 <__d2b>
 8005e56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e5a:	4683      	mov	fp, r0
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	d07c      	beq.n	8005f5a <_dtoa_r+0x1fa>
 8005e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e7a:	4b7d      	ldr	r3, [pc, #500]	; (8006070 <_dtoa_r+0x310>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4630      	mov	r0, r6
 8005e80:	4639      	mov	r1, r7
 8005e82:	f7fa fa11 	bl	80002a8 <__aeabi_dsub>
 8005e86:	a36e      	add	r3, pc, #440	; (adr r3, 8006040 <_dtoa_r+0x2e0>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fbc4 	bl	8000618 <__aeabi_dmul>
 8005e90:	a36d      	add	r3, pc, #436	; (adr r3, 8006048 <_dtoa_r+0x2e8>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fa09 	bl	80002ac <__adddf3>
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	460f      	mov	r7, r1
 8005ea0:	f7fa fb50 	bl	8000544 <__aeabi_i2d>
 8005ea4:	a36a      	add	r3, pc, #424	; (adr r3, 8006050 <_dtoa_r+0x2f0>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa fbb5 	bl	8000618 <__aeabi_dmul>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	f7fa f9f9 	bl	80002ac <__adddf3>
 8005eba:	4606      	mov	r6, r0
 8005ebc:	460f      	mov	r7, r1
 8005ebe:	f7fa fe5b 	bl	8000b78 <__aeabi_d2iz>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f7fa fe16 	bl	8000afc <__aeabi_dcmplt>
 8005ed0:	b148      	cbz	r0, 8005ee6 <_dtoa_r+0x186>
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	f7fa fb36 	bl	8000544 <__aeabi_i2d>
 8005ed8:	4632      	mov	r2, r6
 8005eda:	463b      	mov	r3, r7
 8005edc:	f7fa fe04 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ee0:	b908      	cbnz	r0, 8005ee6 <_dtoa_r+0x186>
 8005ee2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ee6:	f1ba 0f16 	cmp.w	sl, #22
 8005eea:	d854      	bhi.n	8005f96 <_dtoa_r+0x236>
 8005eec:	4b61      	ldr	r3, [pc, #388]	; (8006074 <_dtoa_r+0x314>)
 8005eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005efa:	f7fa fdff 	bl	8000afc <__aeabi_dcmplt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d04b      	beq.n	8005f9a <_dtoa_r+0x23a>
 8005f02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f06:	2300      	movs	r3, #0
 8005f08:	930e      	str	r3, [sp, #56]	; 0x38
 8005f0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f0c:	1b5d      	subs	r5, r3, r5
 8005f0e:	1e6b      	subs	r3, r5, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	bf43      	ittte	mi
 8005f14:	2300      	movmi	r3, #0
 8005f16:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f1a:	9304      	strmi	r3, [sp, #16]
 8005f1c:	f04f 0800 	movpl.w	r8, #0
 8005f20:	f1ba 0f00 	cmp.w	sl, #0
 8005f24:	db3b      	blt.n	8005f9e <_dtoa_r+0x23e>
 8005f26:	9b04      	ldr	r3, [sp, #16]
 8005f28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f2c:	4453      	add	r3, sl
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	9b05      	ldr	r3, [sp, #20]
 8005f36:	2b09      	cmp	r3, #9
 8005f38:	d869      	bhi.n	800600e <_dtoa_r+0x2ae>
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	bfc4      	itt	gt
 8005f3e:	3b04      	subgt	r3, #4
 8005f40:	9305      	strgt	r3, [sp, #20]
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	f1a3 0302 	sub.w	r3, r3, #2
 8005f48:	bfcc      	ite	gt
 8005f4a:	2500      	movgt	r5, #0
 8005f4c:	2501      	movle	r5, #1
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d869      	bhi.n	8006026 <_dtoa_r+0x2c6>
 8005f52:	e8df f003 	tbb	[pc, r3]
 8005f56:	4e2c      	.short	0x4e2c
 8005f58:	5a4c      	.short	0x5a4c
 8005f5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f5e:	441d      	add	r5, r3
 8005f60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	bfc1      	itttt	gt
 8005f68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f70:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f74:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f78:	bfda      	itte	le
 8005f7a:	f1c3 0320 	rsble	r3, r3, #32
 8005f7e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f82:	4318      	orrgt	r0, r3
 8005f84:	f7fa face 	bl	8000524 <__aeabi_ui2d>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f90:	3d01      	subs	r5, #1
 8005f92:	9310      	str	r3, [sp, #64]	; 0x40
 8005f94:	e771      	b.n	8005e7a <_dtoa_r+0x11a>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e7b6      	b.n	8005f08 <_dtoa_r+0x1a8>
 8005f9a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f9c:	e7b5      	b.n	8005f0a <_dtoa_r+0x1aa>
 8005f9e:	f1ca 0300 	rsb	r3, sl, #0
 8005fa2:	9306      	str	r3, [sp, #24]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	eba8 080a 	sub.w	r8, r8, sl
 8005faa:	930d      	str	r3, [sp, #52]	; 0x34
 8005fac:	e7c2      	b.n	8005f34 <_dtoa_r+0x1d4>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	9308      	str	r3, [sp, #32]
 8005fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dc39      	bgt.n	800602c <_dtoa_r+0x2cc>
 8005fb8:	f04f 0901 	mov.w	r9, #1
 8005fbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fc8:	2200      	movs	r2, #0
 8005fca:	6042      	str	r2, [r0, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	f102 0614 	add.w	r6, r2, #20
 8005fd2:	429e      	cmp	r6, r3
 8005fd4:	6841      	ldr	r1, [r0, #4]
 8005fd6:	d92f      	bls.n	8006038 <_dtoa_r+0x2d8>
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 fcc7 	bl	800696c <_Balloc>
 8005fde:	9000      	str	r0, [sp, #0]
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d14b      	bne.n	800607c <_dtoa_r+0x31c>
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <_dtoa_r+0x318>)
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fec:	e6d1      	b.n	8005d92 <_dtoa_r+0x32>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7de      	b.n	8005fb0 <_dtoa_r+0x250>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9308      	str	r3, [sp, #32]
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	eb0a 0903 	add.w	r9, sl, r3
 8005ffc:	f109 0301 	add.w	r3, r9, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	bfb8      	it	lt
 8006006:	2301      	movlt	r3, #1
 8006008:	e7dd      	b.n	8005fc6 <_dtoa_r+0x266>
 800600a:	2301      	movs	r3, #1
 800600c:	e7f2      	b.n	8005ff4 <_dtoa_r+0x294>
 800600e:	2501      	movs	r5, #1
 8006010:	2300      	movs	r3, #0
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	9508      	str	r5, [sp, #32]
 8006016:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800601a:	2200      	movs	r2, #0
 800601c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006020:	2312      	movs	r3, #18
 8006022:	9209      	str	r2, [sp, #36]	; 0x24
 8006024:	e7cf      	b.n	8005fc6 <_dtoa_r+0x266>
 8006026:	2301      	movs	r3, #1
 8006028:	9308      	str	r3, [sp, #32]
 800602a:	e7f4      	b.n	8006016 <_dtoa_r+0x2b6>
 800602c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006030:	f8cd 9004 	str.w	r9, [sp, #4]
 8006034:	464b      	mov	r3, r9
 8006036:	e7c6      	b.n	8005fc6 <_dtoa_r+0x266>
 8006038:	3101      	adds	r1, #1
 800603a:	6041      	str	r1, [r0, #4]
 800603c:	0052      	lsls	r2, r2, #1
 800603e:	e7c6      	b.n	8005fce <_dtoa_r+0x26e>
 8006040:	636f4361 	.word	0x636f4361
 8006044:	3fd287a7 	.word	0x3fd287a7
 8006048:	8b60c8b3 	.word	0x8b60c8b3
 800604c:	3fc68a28 	.word	0x3fc68a28
 8006050:	509f79fb 	.word	0x509f79fb
 8006054:	3fd34413 	.word	0x3fd34413
 8006058:	080080ed 	.word	0x080080ed
 800605c:	08008104 	.word	0x08008104
 8006060:	7ff00000 	.word	0x7ff00000
 8006064:	080080e9 	.word	0x080080e9
 8006068:	080080e0 	.word	0x080080e0
 800606c:	080080bd 	.word	0x080080bd
 8006070:	3ff80000 	.word	0x3ff80000
 8006074:	08008200 	.word	0x08008200
 8006078:	08008163 	.word	0x08008163
 800607c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607e:	9a00      	ldr	r2, [sp, #0]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	9b01      	ldr	r3, [sp, #4]
 8006084:	2b0e      	cmp	r3, #14
 8006086:	f200 80ad 	bhi.w	80061e4 <_dtoa_r+0x484>
 800608a:	2d00      	cmp	r5, #0
 800608c:	f000 80aa 	beq.w	80061e4 <_dtoa_r+0x484>
 8006090:	f1ba 0f00 	cmp.w	sl, #0
 8006094:	dd36      	ble.n	8006104 <_dtoa_r+0x3a4>
 8006096:	4ac3      	ldr	r2, [pc, #780]	; (80063a4 <_dtoa_r+0x644>)
 8006098:	f00a 030f 	and.w	r3, sl, #15
 800609c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060a0:	ed93 7b00 	vldr	d7, [r3]
 80060a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80060ac:	eeb0 8a47 	vmov.f32	s16, s14
 80060b0:	eef0 8a67 	vmov.f32	s17, s15
 80060b4:	d016      	beq.n	80060e4 <_dtoa_r+0x384>
 80060b6:	4bbc      	ldr	r3, [pc, #752]	; (80063a8 <_dtoa_r+0x648>)
 80060b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060c0:	f7fa fbd4 	bl	800086c <__aeabi_ddiv>
 80060c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c8:	f007 070f 	and.w	r7, r7, #15
 80060cc:	2503      	movs	r5, #3
 80060ce:	4eb6      	ldr	r6, [pc, #728]	; (80063a8 <_dtoa_r+0x648>)
 80060d0:	b957      	cbnz	r7, 80060e8 <_dtoa_r+0x388>
 80060d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d6:	ec53 2b18 	vmov	r2, r3, d8
 80060da:	f7fa fbc7 	bl	800086c <__aeabi_ddiv>
 80060de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e2:	e029      	b.n	8006138 <_dtoa_r+0x3d8>
 80060e4:	2502      	movs	r5, #2
 80060e6:	e7f2      	b.n	80060ce <_dtoa_r+0x36e>
 80060e8:	07f9      	lsls	r1, r7, #31
 80060ea:	d508      	bpl.n	80060fe <_dtoa_r+0x39e>
 80060ec:	ec51 0b18 	vmov	r0, r1, d8
 80060f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060f4:	f7fa fa90 	bl	8000618 <__aeabi_dmul>
 80060f8:	ec41 0b18 	vmov	d8, r0, r1
 80060fc:	3501      	adds	r5, #1
 80060fe:	107f      	asrs	r7, r7, #1
 8006100:	3608      	adds	r6, #8
 8006102:	e7e5      	b.n	80060d0 <_dtoa_r+0x370>
 8006104:	f000 80a6 	beq.w	8006254 <_dtoa_r+0x4f4>
 8006108:	f1ca 0600 	rsb	r6, sl, #0
 800610c:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <_dtoa_r+0x644>)
 800610e:	4fa6      	ldr	r7, [pc, #664]	; (80063a8 <_dtoa_r+0x648>)
 8006110:	f006 020f 	and.w	r2, r6, #15
 8006114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006120:	f7fa fa7a 	bl	8000618 <__aeabi_dmul>
 8006124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006128:	1136      	asrs	r6, r6, #4
 800612a:	2300      	movs	r3, #0
 800612c:	2502      	movs	r5, #2
 800612e:	2e00      	cmp	r6, #0
 8006130:	f040 8085 	bne.w	800623e <_dtoa_r+0x4de>
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1d2      	bne.n	80060de <_dtoa_r+0x37e>
 8006138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 808c 	beq.w	8006258 <_dtoa_r+0x4f8>
 8006140:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006144:	4b99      	ldr	r3, [pc, #612]	; (80063ac <_dtoa_r+0x64c>)
 8006146:	2200      	movs	r2, #0
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fcd6 	bl	8000afc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f000 8081 	beq.w	8006258 <_dtoa_r+0x4f8>
 8006156:	9b01      	ldr	r3, [sp, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d07d      	beq.n	8006258 <_dtoa_r+0x4f8>
 800615c:	f1b9 0f00 	cmp.w	r9, #0
 8006160:	dd3c      	ble.n	80061dc <_dtoa_r+0x47c>
 8006162:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006166:	9307      	str	r3, [sp, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	4b91      	ldr	r3, [pc, #580]	; (80063b0 <_dtoa_r+0x650>)
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa fa52 	bl	8000618 <__aeabi_dmul>
 8006174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006178:	3501      	adds	r5, #1
 800617a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800617e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006182:	4628      	mov	r0, r5
 8006184:	f7fa f9de 	bl	8000544 <__aeabi_i2d>
 8006188:	4632      	mov	r2, r6
 800618a:	463b      	mov	r3, r7
 800618c:	f7fa fa44 	bl	8000618 <__aeabi_dmul>
 8006190:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <_dtoa_r+0x654>)
 8006192:	2200      	movs	r2, #0
 8006194:	f7fa f88a 	bl	80002ac <__adddf3>
 8006198:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800619c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d15c      	bne.n	8006262 <_dtoa_r+0x502>
 80061a8:	4b83      	ldr	r3, [pc, #524]	; (80063b8 <_dtoa_r+0x658>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	4630      	mov	r0, r6
 80061ae:	4639      	mov	r1, r7
 80061b0:	f7fa f87a 	bl	80002a8 <__aeabi_dsub>
 80061b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b8:	4606      	mov	r6, r0
 80061ba:	460f      	mov	r7, r1
 80061bc:	f7fa fcbc 	bl	8000b38 <__aeabi_dcmpgt>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	f040 8296 	bne.w	80066f2 <_dtoa_r+0x992>
 80061c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061ca:	4630      	mov	r0, r6
 80061cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061d0:	4639      	mov	r1, r7
 80061d2:	f7fa fc93 	bl	8000afc <__aeabi_dcmplt>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f040 8288 	bne.w	80066ec <_dtoa_r+0x98c>
 80061dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f2c0 8158 	blt.w	800649c <_dtoa_r+0x73c>
 80061ec:	f1ba 0f0e 	cmp.w	sl, #14
 80061f0:	f300 8154 	bgt.w	800649c <_dtoa_r+0x73c>
 80061f4:	4b6b      	ldr	r3, [pc, #428]	; (80063a4 <_dtoa_r+0x644>)
 80061f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	f280 80e3 	bge.w	80063cc <_dtoa_r+0x66c>
 8006206:	9b01      	ldr	r3, [sp, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f300 80df 	bgt.w	80063cc <_dtoa_r+0x66c>
 800620e:	f040 826d 	bne.w	80066ec <_dtoa_r+0x98c>
 8006212:	4b69      	ldr	r3, [pc, #420]	; (80063b8 <_dtoa_r+0x658>)
 8006214:	2200      	movs	r2, #0
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa f9fd 	bl	8000618 <__aeabi_dmul>
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	f7fa fc7f 	bl	8000b24 <__aeabi_dcmpge>
 8006226:	9e01      	ldr	r6, [sp, #4]
 8006228:	4637      	mov	r7, r6
 800622a:	2800      	cmp	r0, #0
 800622c:	f040 8243 	bne.w	80066b6 <_dtoa_r+0x956>
 8006230:	9d00      	ldr	r5, [sp, #0]
 8006232:	2331      	movs	r3, #49	; 0x31
 8006234:	f805 3b01 	strb.w	r3, [r5], #1
 8006238:	f10a 0a01 	add.w	sl, sl, #1
 800623c:	e23f      	b.n	80066be <_dtoa_r+0x95e>
 800623e:	07f2      	lsls	r2, r6, #31
 8006240:	d505      	bpl.n	800624e <_dtoa_r+0x4ee>
 8006242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006246:	f7fa f9e7 	bl	8000618 <__aeabi_dmul>
 800624a:	3501      	adds	r5, #1
 800624c:	2301      	movs	r3, #1
 800624e:	1076      	asrs	r6, r6, #1
 8006250:	3708      	adds	r7, #8
 8006252:	e76c      	b.n	800612e <_dtoa_r+0x3ce>
 8006254:	2502      	movs	r5, #2
 8006256:	e76f      	b.n	8006138 <_dtoa_r+0x3d8>
 8006258:	9b01      	ldr	r3, [sp, #4]
 800625a:	f8cd a01c 	str.w	sl, [sp, #28]
 800625e:	930c      	str	r3, [sp, #48]	; 0x30
 8006260:	e78d      	b.n	800617e <_dtoa_r+0x41e>
 8006262:	9900      	ldr	r1, [sp, #0]
 8006264:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006268:	4b4e      	ldr	r3, [pc, #312]	; (80063a4 <_dtoa_r+0x644>)
 800626a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800626e:	4401      	add	r1, r0
 8006270:	9102      	str	r1, [sp, #8]
 8006272:	9908      	ldr	r1, [sp, #32]
 8006274:	eeb0 8a47 	vmov.f32	s16, s14
 8006278:	eef0 8a67 	vmov.f32	s17, s15
 800627c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006280:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006284:	2900      	cmp	r1, #0
 8006286:	d045      	beq.n	8006314 <_dtoa_r+0x5b4>
 8006288:	494c      	ldr	r1, [pc, #304]	; (80063bc <_dtoa_r+0x65c>)
 800628a:	2000      	movs	r0, #0
 800628c:	f7fa faee 	bl	800086c <__aeabi_ddiv>
 8006290:	ec53 2b18 	vmov	r2, r3, d8
 8006294:	f7fa f808 	bl	80002a8 <__aeabi_dsub>
 8006298:	9d00      	ldr	r5, [sp, #0]
 800629a:	ec41 0b18 	vmov	d8, r0, r1
 800629e:	4639      	mov	r1, r7
 80062a0:	4630      	mov	r0, r6
 80062a2:	f7fa fc69 	bl	8000b78 <__aeabi_d2iz>
 80062a6:	900c      	str	r0, [sp, #48]	; 0x30
 80062a8:	f7fa f94c 	bl	8000544 <__aeabi_i2d>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7f9 fff8 	bl	80002a8 <__aeabi_dsub>
 80062b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062ba:	3330      	adds	r3, #48	; 0x30
 80062bc:	f805 3b01 	strb.w	r3, [r5], #1
 80062c0:	ec53 2b18 	vmov	r2, r3, d8
 80062c4:	4606      	mov	r6, r0
 80062c6:	460f      	mov	r7, r1
 80062c8:	f7fa fc18 	bl	8000afc <__aeabi_dcmplt>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d165      	bne.n	800639c <_dtoa_r+0x63c>
 80062d0:	4632      	mov	r2, r6
 80062d2:	463b      	mov	r3, r7
 80062d4:	4935      	ldr	r1, [pc, #212]	; (80063ac <_dtoa_r+0x64c>)
 80062d6:	2000      	movs	r0, #0
 80062d8:	f7f9 ffe6 	bl	80002a8 <__aeabi_dsub>
 80062dc:	ec53 2b18 	vmov	r2, r3, d8
 80062e0:	f7fa fc0c 	bl	8000afc <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f040 80b9 	bne.w	800645c <_dtoa_r+0x6fc>
 80062ea:	9b02      	ldr	r3, [sp, #8]
 80062ec:	429d      	cmp	r5, r3
 80062ee:	f43f af75 	beq.w	80061dc <_dtoa_r+0x47c>
 80062f2:	4b2f      	ldr	r3, [pc, #188]	; (80063b0 <_dtoa_r+0x650>)
 80062f4:	ec51 0b18 	vmov	r0, r1, d8
 80062f8:	2200      	movs	r2, #0
 80062fa:	f7fa f98d 	bl	8000618 <__aeabi_dmul>
 80062fe:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <_dtoa_r+0x650>)
 8006300:	ec41 0b18 	vmov	d8, r0, r1
 8006304:	2200      	movs	r2, #0
 8006306:	4630      	mov	r0, r6
 8006308:	4639      	mov	r1, r7
 800630a:	f7fa f985 	bl	8000618 <__aeabi_dmul>
 800630e:	4606      	mov	r6, r0
 8006310:	460f      	mov	r7, r1
 8006312:	e7c4      	b.n	800629e <_dtoa_r+0x53e>
 8006314:	ec51 0b17 	vmov	r0, r1, d7
 8006318:	f7fa f97e 	bl	8000618 <__aeabi_dmul>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	9d00      	ldr	r5, [sp, #0]
 8006320:	930c      	str	r3, [sp, #48]	; 0x30
 8006322:	ec41 0b18 	vmov	d8, r0, r1
 8006326:	4639      	mov	r1, r7
 8006328:	4630      	mov	r0, r6
 800632a:	f7fa fc25 	bl	8000b78 <__aeabi_d2iz>
 800632e:	9011      	str	r0, [sp, #68]	; 0x44
 8006330:	f7fa f908 	bl	8000544 <__aeabi_i2d>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7f9 ffb4 	bl	80002a8 <__aeabi_dsub>
 8006340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006342:	3330      	adds	r3, #48	; 0x30
 8006344:	f805 3b01 	strb.w	r3, [r5], #1
 8006348:	9b02      	ldr	r3, [sp, #8]
 800634a:	429d      	cmp	r5, r3
 800634c:	4606      	mov	r6, r0
 800634e:	460f      	mov	r7, r1
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	d134      	bne.n	80063c0 <_dtoa_r+0x660>
 8006356:	4b19      	ldr	r3, [pc, #100]	; (80063bc <_dtoa_r+0x65c>)
 8006358:	ec51 0b18 	vmov	r0, r1, d8
 800635c:	f7f9 ffa6 	bl	80002ac <__adddf3>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa fbe6 	bl	8000b38 <__aeabi_dcmpgt>
 800636c:	2800      	cmp	r0, #0
 800636e:	d175      	bne.n	800645c <_dtoa_r+0x6fc>
 8006370:	ec53 2b18 	vmov	r2, r3, d8
 8006374:	4911      	ldr	r1, [pc, #68]	; (80063bc <_dtoa_r+0x65c>)
 8006376:	2000      	movs	r0, #0
 8006378:	f7f9 ff96 	bl	80002a8 <__aeabi_dsub>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7fa fbba 	bl	8000afc <__aeabi_dcmplt>
 8006388:	2800      	cmp	r0, #0
 800638a:	f43f af27 	beq.w	80061dc <_dtoa_r+0x47c>
 800638e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006390:	1e6b      	subs	r3, r5, #1
 8006392:	930c      	str	r3, [sp, #48]	; 0x30
 8006394:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d0f8      	beq.n	800638e <_dtoa_r+0x62e>
 800639c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80063a0:	e04a      	b.n	8006438 <_dtoa_r+0x6d8>
 80063a2:	bf00      	nop
 80063a4:	08008200 	.word	0x08008200
 80063a8:	080081d8 	.word	0x080081d8
 80063ac:	3ff00000 	.word	0x3ff00000
 80063b0:	40240000 	.word	0x40240000
 80063b4:	401c0000 	.word	0x401c0000
 80063b8:	40140000 	.word	0x40140000
 80063bc:	3fe00000 	.word	0x3fe00000
 80063c0:	4baf      	ldr	r3, [pc, #700]	; (8006680 <_dtoa_r+0x920>)
 80063c2:	f7fa f929 	bl	8000618 <__aeabi_dmul>
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	e7ac      	b.n	8006326 <_dtoa_r+0x5c6>
 80063cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063d0:	9d00      	ldr	r5, [sp, #0]
 80063d2:	4642      	mov	r2, r8
 80063d4:	464b      	mov	r3, r9
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7fa fa47 	bl	800086c <__aeabi_ddiv>
 80063de:	f7fa fbcb 	bl	8000b78 <__aeabi_d2iz>
 80063e2:	9002      	str	r0, [sp, #8]
 80063e4:	f7fa f8ae 	bl	8000544 <__aeabi_i2d>
 80063e8:	4642      	mov	r2, r8
 80063ea:	464b      	mov	r3, r9
 80063ec:	f7fa f914 	bl	8000618 <__aeabi_dmul>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4630      	mov	r0, r6
 80063f6:	4639      	mov	r1, r7
 80063f8:	f7f9 ff56 	bl	80002a8 <__aeabi_dsub>
 80063fc:	9e02      	ldr	r6, [sp, #8]
 80063fe:	9f01      	ldr	r7, [sp, #4]
 8006400:	3630      	adds	r6, #48	; 0x30
 8006402:	f805 6b01 	strb.w	r6, [r5], #1
 8006406:	9e00      	ldr	r6, [sp, #0]
 8006408:	1bae      	subs	r6, r5, r6
 800640a:	42b7      	cmp	r7, r6
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	d137      	bne.n	8006482 <_dtoa_r+0x722>
 8006412:	f7f9 ff4b 	bl	80002ac <__adddf3>
 8006416:	4642      	mov	r2, r8
 8006418:	464b      	mov	r3, r9
 800641a:	4606      	mov	r6, r0
 800641c:	460f      	mov	r7, r1
 800641e:	f7fa fb8b 	bl	8000b38 <__aeabi_dcmpgt>
 8006422:	b9c8      	cbnz	r0, 8006458 <_dtoa_r+0x6f8>
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fb5c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006430:	b110      	cbz	r0, 8006438 <_dtoa_r+0x6d8>
 8006432:	9b02      	ldr	r3, [sp, #8]
 8006434:	07d9      	lsls	r1, r3, #31
 8006436:	d40f      	bmi.n	8006458 <_dtoa_r+0x6f8>
 8006438:	4620      	mov	r0, r4
 800643a:	4659      	mov	r1, fp
 800643c:	f000 fad6 	bl	80069ec <_Bfree>
 8006440:	2300      	movs	r3, #0
 8006442:	702b      	strb	r3, [r5, #0]
 8006444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006446:	f10a 0001 	add.w	r0, sl, #1
 800644a:	6018      	str	r0, [r3, #0]
 800644c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800644e:	2b00      	cmp	r3, #0
 8006450:	f43f acd8 	beq.w	8005e04 <_dtoa_r+0xa4>
 8006454:	601d      	str	r5, [r3, #0]
 8006456:	e4d5      	b.n	8005e04 <_dtoa_r+0xa4>
 8006458:	f8cd a01c 	str.w	sl, [sp, #28]
 800645c:	462b      	mov	r3, r5
 800645e:	461d      	mov	r5, r3
 8006460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006464:	2a39      	cmp	r2, #57	; 0x39
 8006466:	d108      	bne.n	800647a <_dtoa_r+0x71a>
 8006468:	9a00      	ldr	r2, [sp, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d1f7      	bne.n	800645e <_dtoa_r+0x6fe>
 800646e:	9a07      	ldr	r2, [sp, #28]
 8006470:	9900      	ldr	r1, [sp, #0]
 8006472:	3201      	adds	r2, #1
 8006474:	9207      	str	r2, [sp, #28]
 8006476:	2230      	movs	r2, #48	; 0x30
 8006478:	700a      	strb	r2, [r1, #0]
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	3201      	adds	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e78c      	b.n	800639c <_dtoa_r+0x63c>
 8006482:	4b7f      	ldr	r3, [pc, #508]	; (8006680 <_dtoa_r+0x920>)
 8006484:	2200      	movs	r2, #0
 8006486:	f7fa f8c7 	bl	8000618 <__aeabi_dmul>
 800648a:	2200      	movs	r2, #0
 800648c:	2300      	movs	r3, #0
 800648e:	4606      	mov	r6, r0
 8006490:	460f      	mov	r7, r1
 8006492:	f7fa fb29 	bl	8000ae8 <__aeabi_dcmpeq>
 8006496:	2800      	cmp	r0, #0
 8006498:	d09b      	beq.n	80063d2 <_dtoa_r+0x672>
 800649a:	e7cd      	b.n	8006438 <_dtoa_r+0x6d8>
 800649c:	9a08      	ldr	r2, [sp, #32]
 800649e:	2a00      	cmp	r2, #0
 80064a0:	f000 80c4 	beq.w	800662c <_dtoa_r+0x8cc>
 80064a4:	9a05      	ldr	r2, [sp, #20]
 80064a6:	2a01      	cmp	r2, #1
 80064a8:	f300 80a8 	bgt.w	80065fc <_dtoa_r+0x89c>
 80064ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	f000 80a0 	beq.w	80065f4 <_dtoa_r+0x894>
 80064b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064b8:	9e06      	ldr	r6, [sp, #24]
 80064ba:	4645      	mov	r5, r8
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	2101      	movs	r1, #1
 80064c0:	441a      	add	r2, r3
 80064c2:	4620      	mov	r0, r4
 80064c4:	4498      	add	r8, r3
 80064c6:	9204      	str	r2, [sp, #16]
 80064c8:	f000 fb4c 	bl	8006b64 <__i2b>
 80064cc:	4607      	mov	r7, r0
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	dd0b      	ble.n	80064ea <_dtoa_r+0x78a>
 80064d2:	9b04      	ldr	r3, [sp, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dd08      	ble.n	80064ea <_dtoa_r+0x78a>
 80064d8:	42ab      	cmp	r3, r5
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	bfa8      	it	ge
 80064de:	462b      	movge	r3, r5
 80064e0:	eba8 0803 	sub.w	r8, r8, r3
 80064e4:	1aed      	subs	r5, r5, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	9304      	str	r3, [sp, #16]
 80064ea:	9b06      	ldr	r3, [sp, #24]
 80064ec:	b1fb      	cbz	r3, 800652e <_dtoa_r+0x7ce>
 80064ee:	9b08      	ldr	r3, [sp, #32]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 809f 	beq.w	8006634 <_dtoa_r+0x8d4>
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	dd11      	ble.n	800651e <_dtoa_r+0x7be>
 80064fa:	4639      	mov	r1, r7
 80064fc:	4632      	mov	r2, r6
 80064fe:	4620      	mov	r0, r4
 8006500:	f000 fbec 	bl	8006cdc <__pow5mult>
 8006504:	465a      	mov	r2, fp
 8006506:	4601      	mov	r1, r0
 8006508:	4607      	mov	r7, r0
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fb40 	bl	8006b90 <__multiply>
 8006510:	4659      	mov	r1, fp
 8006512:	9007      	str	r0, [sp, #28]
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fa69 	bl	80069ec <_Bfree>
 800651a:	9b07      	ldr	r3, [sp, #28]
 800651c:	469b      	mov	fp, r3
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	1b9a      	subs	r2, r3, r6
 8006522:	d004      	beq.n	800652e <_dtoa_r+0x7ce>
 8006524:	4659      	mov	r1, fp
 8006526:	4620      	mov	r0, r4
 8006528:	f000 fbd8 	bl	8006cdc <__pow5mult>
 800652c:	4683      	mov	fp, r0
 800652e:	2101      	movs	r1, #1
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fb17 	bl	8006b64 <__i2b>
 8006536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006538:	2b00      	cmp	r3, #0
 800653a:	4606      	mov	r6, r0
 800653c:	dd7c      	ble.n	8006638 <_dtoa_r+0x8d8>
 800653e:	461a      	mov	r2, r3
 8006540:	4601      	mov	r1, r0
 8006542:	4620      	mov	r0, r4
 8006544:	f000 fbca 	bl	8006cdc <__pow5mult>
 8006548:	9b05      	ldr	r3, [sp, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	4606      	mov	r6, r0
 800654e:	dd76      	ble.n	800663e <_dtoa_r+0x8de>
 8006550:	2300      	movs	r3, #0
 8006552:	9306      	str	r3, [sp, #24]
 8006554:	6933      	ldr	r3, [r6, #16]
 8006556:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800655a:	6918      	ldr	r0, [r3, #16]
 800655c:	f000 fab2 	bl	8006ac4 <__hi0bits>
 8006560:	f1c0 0020 	rsb	r0, r0, #32
 8006564:	9b04      	ldr	r3, [sp, #16]
 8006566:	4418      	add	r0, r3
 8006568:	f010 001f 	ands.w	r0, r0, #31
 800656c:	f000 8086 	beq.w	800667c <_dtoa_r+0x91c>
 8006570:	f1c0 0320 	rsb	r3, r0, #32
 8006574:	2b04      	cmp	r3, #4
 8006576:	dd7f      	ble.n	8006678 <_dtoa_r+0x918>
 8006578:	f1c0 001c 	rsb	r0, r0, #28
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	4403      	add	r3, r0
 8006580:	4480      	add	r8, r0
 8006582:	4405      	add	r5, r0
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	dd05      	ble.n	8006598 <_dtoa_r+0x838>
 800658c:	4659      	mov	r1, fp
 800658e:	4642      	mov	r2, r8
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fbfd 	bl	8006d90 <__lshift>
 8006596:	4683      	mov	fp, r0
 8006598:	9b04      	ldr	r3, [sp, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	dd05      	ble.n	80065aa <_dtoa_r+0x84a>
 800659e:	4631      	mov	r1, r6
 80065a0:	461a      	mov	r2, r3
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 fbf4 	bl	8006d90 <__lshift>
 80065a8:	4606      	mov	r6, r0
 80065aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d069      	beq.n	8006684 <_dtoa_r+0x924>
 80065b0:	4631      	mov	r1, r6
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fc58 	bl	8006e68 <__mcmp>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	da63      	bge.n	8006684 <_dtoa_r+0x924>
 80065bc:	2300      	movs	r3, #0
 80065be:	4659      	mov	r1, fp
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 fa34 	bl	8006a30 <__multadd>
 80065c8:	9b08      	ldr	r3, [sp, #32]
 80065ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065ce:	4683      	mov	fp, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 818f 	beq.w	80068f4 <_dtoa_r+0xb94>
 80065d6:	4639      	mov	r1, r7
 80065d8:	2300      	movs	r3, #0
 80065da:	220a      	movs	r2, #10
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 fa27 	bl	8006a30 <__multadd>
 80065e2:	f1b9 0f00 	cmp.w	r9, #0
 80065e6:	4607      	mov	r7, r0
 80065e8:	f300 808e 	bgt.w	8006708 <_dtoa_r+0x9a8>
 80065ec:	9b05      	ldr	r3, [sp, #20]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	dc50      	bgt.n	8006694 <_dtoa_r+0x934>
 80065f2:	e089      	b.n	8006708 <_dtoa_r+0x9a8>
 80065f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065fa:	e75d      	b.n	80064b8 <_dtoa_r+0x758>
 80065fc:	9b01      	ldr	r3, [sp, #4]
 80065fe:	1e5e      	subs	r6, r3, #1
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	42b3      	cmp	r3, r6
 8006604:	bfbf      	itttt	lt
 8006606:	9b06      	ldrlt	r3, [sp, #24]
 8006608:	9606      	strlt	r6, [sp, #24]
 800660a:	1af2      	sublt	r2, r6, r3
 800660c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800660e:	bfb6      	itet	lt
 8006610:	189b      	addlt	r3, r3, r2
 8006612:	1b9e      	subge	r6, r3, r6
 8006614:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	bfb8      	it	lt
 800661a:	2600      	movlt	r6, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfb5      	itete	lt
 8006620:	eba8 0503 	sublt.w	r5, r8, r3
 8006624:	9b01      	ldrge	r3, [sp, #4]
 8006626:	2300      	movlt	r3, #0
 8006628:	4645      	movge	r5, r8
 800662a:	e747      	b.n	80064bc <_dtoa_r+0x75c>
 800662c:	9e06      	ldr	r6, [sp, #24]
 800662e:	9f08      	ldr	r7, [sp, #32]
 8006630:	4645      	mov	r5, r8
 8006632:	e74c      	b.n	80064ce <_dtoa_r+0x76e>
 8006634:	9a06      	ldr	r2, [sp, #24]
 8006636:	e775      	b.n	8006524 <_dtoa_r+0x7c4>
 8006638:	9b05      	ldr	r3, [sp, #20]
 800663a:	2b01      	cmp	r3, #1
 800663c:	dc18      	bgt.n	8006670 <_dtoa_r+0x910>
 800663e:	9b02      	ldr	r3, [sp, #8]
 8006640:	b9b3      	cbnz	r3, 8006670 <_dtoa_r+0x910>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006648:	b9a3      	cbnz	r3, 8006674 <_dtoa_r+0x914>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006650:	0d1b      	lsrs	r3, r3, #20
 8006652:	051b      	lsls	r3, r3, #20
 8006654:	b12b      	cbz	r3, 8006662 <_dtoa_r+0x902>
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	f108 0801 	add.w	r8, r8, #1
 8006660:	2301      	movs	r3, #1
 8006662:	9306      	str	r3, [sp, #24]
 8006664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006666:	2b00      	cmp	r3, #0
 8006668:	f47f af74 	bne.w	8006554 <_dtoa_r+0x7f4>
 800666c:	2001      	movs	r0, #1
 800666e:	e779      	b.n	8006564 <_dtoa_r+0x804>
 8006670:	2300      	movs	r3, #0
 8006672:	e7f6      	b.n	8006662 <_dtoa_r+0x902>
 8006674:	9b02      	ldr	r3, [sp, #8]
 8006676:	e7f4      	b.n	8006662 <_dtoa_r+0x902>
 8006678:	d085      	beq.n	8006586 <_dtoa_r+0x826>
 800667a:	4618      	mov	r0, r3
 800667c:	301c      	adds	r0, #28
 800667e:	e77d      	b.n	800657c <_dtoa_r+0x81c>
 8006680:	40240000 	.word	0x40240000
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc38      	bgt.n	80066fc <_dtoa_r+0x99c>
 800668a:	9b05      	ldr	r3, [sp, #20]
 800668c:	2b02      	cmp	r3, #2
 800668e:	dd35      	ble.n	80066fc <_dtoa_r+0x99c>
 8006690:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006694:	f1b9 0f00 	cmp.w	r9, #0
 8006698:	d10d      	bne.n	80066b6 <_dtoa_r+0x956>
 800669a:	4631      	mov	r1, r6
 800669c:	464b      	mov	r3, r9
 800669e:	2205      	movs	r2, #5
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 f9c5 	bl	8006a30 <__multadd>
 80066a6:	4601      	mov	r1, r0
 80066a8:	4606      	mov	r6, r0
 80066aa:	4658      	mov	r0, fp
 80066ac:	f000 fbdc 	bl	8006e68 <__mcmp>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f73f adbd 	bgt.w	8006230 <_dtoa_r+0x4d0>
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	9d00      	ldr	r5, [sp, #0]
 80066ba:	ea6f 0a03 	mvn.w	sl, r3
 80066be:	f04f 0800 	mov.w	r8, #0
 80066c2:	4631      	mov	r1, r6
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 f991 	bl	80069ec <_Bfree>
 80066ca:	2f00      	cmp	r7, #0
 80066cc:	f43f aeb4 	beq.w	8006438 <_dtoa_r+0x6d8>
 80066d0:	f1b8 0f00 	cmp.w	r8, #0
 80066d4:	d005      	beq.n	80066e2 <_dtoa_r+0x982>
 80066d6:	45b8      	cmp	r8, r7
 80066d8:	d003      	beq.n	80066e2 <_dtoa_r+0x982>
 80066da:	4641      	mov	r1, r8
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 f985 	bl	80069ec <_Bfree>
 80066e2:	4639      	mov	r1, r7
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 f981 	bl	80069ec <_Bfree>
 80066ea:	e6a5      	b.n	8006438 <_dtoa_r+0x6d8>
 80066ec:	2600      	movs	r6, #0
 80066ee:	4637      	mov	r7, r6
 80066f0:	e7e1      	b.n	80066b6 <_dtoa_r+0x956>
 80066f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80066f8:	4637      	mov	r7, r6
 80066fa:	e599      	b.n	8006230 <_dtoa_r+0x4d0>
 80066fc:	9b08      	ldr	r3, [sp, #32]
 80066fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80fd 	beq.w	8006902 <_dtoa_r+0xba2>
 8006708:	2d00      	cmp	r5, #0
 800670a:	dd05      	ble.n	8006718 <_dtoa_r+0x9b8>
 800670c:	4639      	mov	r1, r7
 800670e:	462a      	mov	r2, r5
 8006710:	4620      	mov	r0, r4
 8006712:	f000 fb3d 	bl	8006d90 <__lshift>
 8006716:	4607      	mov	r7, r0
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d05c      	beq.n	80067d8 <_dtoa_r+0xa78>
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	4620      	mov	r0, r4
 8006722:	f000 f923 	bl	800696c <_Balloc>
 8006726:	4605      	mov	r5, r0
 8006728:	b928      	cbnz	r0, 8006736 <_dtoa_r+0x9d6>
 800672a:	4b80      	ldr	r3, [pc, #512]	; (800692c <_dtoa_r+0xbcc>)
 800672c:	4602      	mov	r2, r0
 800672e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006732:	f7ff bb2e 	b.w	8005d92 <_dtoa_r+0x32>
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	3202      	adds	r2, #2
 800673a:	0092      	lsls	r2, r2, #2
 800673c:	f107 010c 	add.w	r1, r7, #12
 8006740:	300c      	adds	r0, #12
 8006742:	f000 f905 	bl	8006950 <memcpy>
 8006746:	2201      	movs	r2, #1
 8006748:	4629      	mov	r1, r5
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fb20 	bl	8006d90 <__lshift>
 8006750:	9b00      	ldr	r3, [sp, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	444b      	add	r3, r9
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	9b02      	ldr	r3, [sp, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	46b8      	mov	r8, r7
 8006764:	9306      	str	r3, [sp, #24]
 8006766:	4607      	mov	r7, r0
 8006768:	9b01      	ldr	r3, [sp, #4]
 800676a:	4631      	mov	r1, r6
 800676c:	3b01      	subs	r3, #1
 800676e:	4658      	mov	r0, fp
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	f7ff fa67 	bl	8005c44 <quorem>
 8006776:	4603      	mov	r3, r0
 8006778:	3330      	adds	r3, #48	; 0x30
 800677a:	9004      	str	r0, [sp, #16]
 800677c:	4641      	mov	r1, r8
 800677e:	4658      	mov	r0, fp
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	f000 fb71 	bl	8006e68 <__mcmp>
 8006786:	463a      	mov	r2, r7
 8006788:	4681      	mov	r9, r0
 800678a:	4631      	mov	r1, r6
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fb87 	bl	8006ea0 <__mdiff>
 8006792:	68c2      	ldr	r2, [r0, #12]
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	4605      	mov	r5, r0
 8006798:	bb02      	cbnz	r2, 80067dc <_dtoa_r+0xa7c>
 800679a:	4601      	mov	r1, r0
 800679c:	4658      	mov	r0, fp
 800679e:	f000 fb63 	bl	8006e68 <__mcmp>
 80067a2:	9b08      	ldr	r3, [sp, #32]
 80067a4:	4602      	mov	r2, r0
 80067a6:	4629      	mov	r1, r5
 80067a8:	4620      	mov	r0, r4
 80067aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80067ae:	f000 f91d 	bl	80069ec <_Bfree>
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b6:	9d01      	ldr	r5, [sp, #4]
 80067b8:	ea43 0102 	orr.w	r1, r3, r2
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	430b      	orrs	r3, r1
 80067c0:	9b08      	ldr	r3, [sp, #32]
 80067c2:	d10d      	bne.n	80067e0 <_dtoa_r+0xa80>
 80067c4:	2b39      	cmp	r3, #57	; 0x39
 80067c6:	d029      	beq.n	800681c <_dtoa_r+0xabc>
 80067c8:	f1b9 0f00 	cmp.w	r9, #0
 80067cc:	dd01      	ble.n	80067d2 <_dtoa_r+0xa72>
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	3331      	adds	r3, #49	; 0x31
 80067d2:	9a02      	ldr	r2, [sp, #8]
 80067d4:	7013      	strb	r3, [r2, #0]
 80067d6:	e774      	b.n	80066c2 <_dtoa_r+0x962>
 80067d8:	4638      	mov	r0, r7
 80067da:	e7b9      	b.n	8006750 <_dtoa_r+0x9f0>
 80067dc:	2201      	movs	r2, #1
 80067de:	e7e2      	b.n	80067a6 <_dtoa_r+0xa46>
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	db06      	blt.n	80067f4 <_dtoa_r+0xa94>
 80067e6:	9905      	ldr	r1, [sp, #20]
 80067e8:	ea41 0909 	orr.w	r9, r1, r9
 80067ec:	9906      	ldr	r1, [sp, #24]
 80067ee:	ea59 0101 	orrs.w	r1, r9, r1
 80067f2:	d120      	bne.n	8006836 <_dtoa_r+0xad6>
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	ddec      	ble.n	80067d2 <_dtoa_r+0xa72>
 80067f8:	4659      	mov	r1, fp
 80067fa:	2201      	movs	r2, #1
 80067fc:	4620      	mov	r0, r4
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	f000 fac6 	bl	8006d90 <__lshift>
 8006804:	4631      	mov	r1, r6
 8006806:	4683      	mov	fp, r0
 8006808:	f000 fb2e 	bl	8006e68 <__mcmp>
 800680c:	2800      	cmp	r0, #0
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	dc02      	bgt.n	8006818 <_dtoa_r+0xab8>
 8006812:	d1de      	bne.n	80067d2 <_dtoa_r+0xa72>
 8006814:	07da      	lsls	r2, r3, #31
 8006816:	d5dc      	bpl.n	80067d2 <_dtoa_r+0xa72>
 8006818:	2b39      	cmp	r3, #57	; 0x39
 800681a:	d1d8      	bne.n	80067ce <_dtoa_r+0xa6e>
 800681c:	9a02      	ldr	r2, [sp, #8]
 800681e:	2339      	movs	r3, #57	; 0x39
 8006820:	7013      	strb	r3, [r2, #0]
 8006822:	462b      	mov	r3, r5
 8006824:	461d      	mov	r5, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800682c:	2a39      	cmp	r2, #57	; 0x39
 800682e:	d050      	beq.n	80068d2 <_dtoa_r+0xb72>
 8006830:	3201      	adds	r2, #1
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	e745      	b.n	80066c2 <_dtoa_r+0x962>
 8006836:	2a00      	cmp	r2, #0
 8006838:	dd03      	ble.n	8006842 <_dtoa_r+0xae2>
 800683a:	2b39      	cmp	r3, #57	; 0x39
 800683c:	d0ee      	beq.n	800681c <_dtoa_r+0xabc>
 800683e:	3301      	adds	r3, #1
 8006840:	e7c7      	b.n	80067d2 <_dtoa_r+0xa72>
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	9907      	ldr	r1, [sp, #28]
 8006846:	f802 3c01 	strb.w	r3, [r2, #-1]
 800684a:	428a      	cmp	r2, r1
 800684c:	d02a      	beq.n	80068a4 <_dtoa_r+0xb44>
 800684e:	4659      	mov	r1, fp
 8006850:	2300      	movs	r3, #0
 8006852:	220a      	movs	r2, #10
 8006854:	4620      	mov	r0, r4
 8006856:	f000 f8eb 	bl	8006a30 <__multadd>
 800685a:	45b8      	cmp	r8, r7
 800685c:	4683      	mov	fp, r0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	f04f 020a 	mov.w	r2, #10
 8006866:	4641      	mov	r1, r8
 8006868:	4620      	mov	r0, r4
 800686a:	d107      	bne.n	800687c <_dtoa_r+0xb1c>
 800686c:	f000 f8e0 	bl	8006a30 <__multadd>
 8006870:	4680      	mov	r8, r0
 8006872:	4607      	mov	r7, r0
 8006874:	9b01      	ldr	r3, [sp, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	e775      	b.n	8006768 <_dtoa_r+0xa08>
 800687c:	f000 f8d8 	bl	8006a30 <__multadd>
 8006880:	4639      	mov	r1, r7
 8006882:	4680      	mov	r8, r0
 8006884:	2300      	movs	r3, #0
 8006886:	220a      	movs	r2, #10
 8006888:	4620      	mov	r0, r4
 800688a:	f000 f8d1 	bl	8006a30 <__multadd>
 800688e:	4607      	mov	r7, r0
 8006890:	e7f0      	b.n	8006874 <_dtoa_r+0xb14>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	9a00      	ldr	r2, [sp, #0]
 8006898:	bfcc      	ite	gt
 800689a:	464d      	movgt	r5, r9
 800689c:	2501      	movle	r5, #1
 800689e:	4415      	add	r5, r2
 80068a0:	f04f 0800 	mov.w	r8, #0
 80068a4:	4659      	mov	r1, fp
 80068a6:	2201      	movs	r2, #1
 80068a8:	4620      	mov	r0, r4
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	f000 fa70 	bl	8006d90 <__lshift>
 80068b0:	4631      	mov	r1, r6
 80068b2:	4683      	mov	fp, r0
 80068b4:	f000 fad8 	bl	8006e68 <__mcmp>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	dcb2      	bgt.n	8006822 <_dtoa_r+0xac2>
 80068bc:	d102      	bne.n	80068c4 <_dtoa_r+0xb64>
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	07db      	lsls	r3, r3, #31
 80068c2:	d4ae      	bmi.n	8006822 <_dtoa_r+0xac2>
 80068c4:	462b      	mov	r3, r5
 80068c6:	461d      	mov	r5, r3
 80068c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068cc:	2a30      	cmp	r2, #48	; 0x30
 80068ce:	d0fa      	beq.n	80068c6 <_dtoa_r+0xb66>
 80068d0:	e6f7      	b.n	80066c2 <_dtoa_r+0x962>
 80068d2:	9a00      	ldr	r2, [sp, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d1a5      	bne.n	8006824 <_dtoa_r+0xac4>
 80068d8:	f10a 0a01 	add.w	sl, sl, #1
 80068dc:	2331      	movs	r3, #49	; 0x31
 80068de:	e779      	b.n	80067d4 <_dtoa_r+0xa74>
 80068e0:	4b13      	ldr	r3, [pc, #76]	; (8006930 <_dtoa_r+0xbd0>)
 80068e2:	f7ff baaf 	b.w	8005e44 <_dtoa_r+0xe4>
 80068e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f aa86 	bne.w	8005dfa <_dtoa_r+0x9a>
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <_dtoa_r+0xbd4>)
 80068f0:	f7ff baa8 	b.w	8005e44 <_dtoa_r+0xe4>
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	dc03      	bgt.n	8006902 <_dtoa_r+0xba2>
 80068fa:	9b05      	ldr	r3, [sp, #20]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f73f aec9 	bgt.w	8006694 <_dtoa_r+0x934>
 8006902:	9d00      	ldr	r5, [sp, #0]
 8006904:	4631      	mov	r1, r6
 8006906:	4658      	mov	r0, fp
 8006908:	f7ff f99c 	bl	8005c44 <quorem>
 800690c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006910:	f805 3b01 	strb.w	r3, [r5], #1
 8006914:	9a00      	ldr	r2, [sp, #0]
 8006916:	1aaa      	subs	r2, r5, r2
 8006918:	4591      	cmp	r9, r2
 800691a:	ddba      	ble.n	8006892 <_dtoa_r+0xb32>
 800691c:	4659      	mov	r1, fp
 800691e:	2300      	movs	r3, #0
 8006920:	220a      	movs	r2, #10
 8006922:	4620      	mov	r0, r4
 8006924:	f000 f884 	bl	8006a30 <__multadd>
 8006928:	4683      	mov	fp, r0
 800692a:	e7eb      	b.n	8006904 <_dtoa_r+0xba4>
 800692c:	08008163 	.word	0x08008163
 8006930:	080080bc 	.word	0x080080bc
 8006934:	080080e0 	.word	0x080080e0

08006938 <_localeconv_r>:
 8006938:	4800      	ldr	r0, [pc, #0]	; (800693c <_localeconv_r+0x4>)
 800693a:	4770      	bx	lr
 800693c:	20000160 	.word	0x20000160

08006940 <malloc>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <malloc+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f000 bbef 	b.w	8007128 <_malloc_r>
 800694a:	bf00      	nop
 800694c:	2000000c 	.word	0x2000000c

08006950 <memcpy>:
 8006950:	440a      	add	r2, r1
 8006952:	4291      	cmp	r1, r2
 8006954:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006958:	d100      	bne.n	800695c <memcpy+0xc>
 800695a:	4770      	bx	lr
 800695c:	b510      	push	{r4, lr}
 800695e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006966:	4291      	cmp	r1, r2
 8006968:	d1f9      	bne.n	800695e <memcpy+0xe>
 800696a:	bd10      	pop	{r4, pc}

0800696c <_Balloc>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006970:	4604      	mov	r4, r0
 8006972:	460d      	mov	r5, r1
 8006974:	b976      	cbnz	r6, 8006994 <_Balloc+0x28>
 8006976:	2010      	movs	r0, #16
 8006978:	f7ff ffe2 	bl	8006940 <malloc>
 800697c:	4602      	mov	r2, r0
 800697e:	6260      	str	r0, [r4, #36]	; 0x24
 8006980:	b920      	cbnz	r0, 800698c <_Balloc+0x20>
 8006982:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <_Balloc+0x78>)
 8006984:	4818      	ldr	r0, [pc, #96]	; (80069e8 <_Balloc+0x7c>)
 8006986:	2166      	movs	r1, #102	; 0x66
 8006988:	f000 fd94 	bl	80074b4 <__assert_func>
 800698c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006990:	6006      	str	r6, [r0, #0]
 8006992:	60c6      	str	r6, [r0, #12]
 8006994:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006996:	68f3      	ldr	r3, [r6, #12]
 8006998:	b183      	cbz	r3, 80069bc <_Balloc+0x50>
 800699a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069a2:	b9b8      	cbnz	r0, 80069d4 <_Balloc+0x68>
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f605 	lsl.w	r6, r1, r5
 80069aa:	1d72      	adds	r2, r6, #5
 80069ac:	0092      	lsls	r2, r2, #2
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 fb5a 	bl	8007068 <_calloc_r>
 80069b4:	b160      	cbz	r0, 80069d0 <_Balloc+0x64>
 80069b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069ba:	e00e      	b.n	80069da <_Balloc+0x6e>
 80069bc:	2221      	movs	r2, #33	; 0x21
 80069be:	2104      	movs	r1, #4
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 fb51 	bl	8007068 <_calloc_r>
 80069c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c8:	60f0      	str	r0, [r6, #12]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e4      	bne.n	800699a <_Balloc+0x2e>
 80069d0:	2000      	movs	r0, #0
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	6802      	ldr	r2, [r0, #0]
 80069d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069da:	2300      	movs	r3, #0
 80069dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069e0:	e7f7      	b.n	80069d2 <_Balloc+0x66>
 80069e2:	bf00      	nop
 80069e4:	080080ed 	.word	0x080080ed
 80069e8:	08008174 	.word	0x08008174

080069ec <_Bfree>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069f0:	4605      	mov	r5, r0
 80069f2:	460c      	mov	r4, r1
 80069f4:	b976      	cbnz	r6, 8006a14 <_Bfree+0x28>
 80069f6:	2010      	movs	r0, #16
 80069f8:	f7ff ffa2 	bl	8006940 <malloc>
 80069fc:	4602      	mov	r2, r0
 80069fe:	6268      	str	r0, [r5, #36]	; 0x24
 8006a00:	b920      	cbnz	r0, 8006a0c <_Bfree+0x20>
 8006a02:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <_Bfree+0x3c>)
 8006a04:	4809      	ldr	r0, [pc, #36]	; (8006a2c <_Bfree+0x40>)
 8006a06:	218a      	movs	r1, #138	; 0x8a
 8006a08:	f000 fd54 	bl	80074b4 <__assert_func>
 8006a0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a10:	6006      	str	r6, [r0, #0]
 8006a12:	60c6      	str	r6, [r0, #12]
 8006a14:	b13c      	cbz	r4, 8006a26 <_Bfree+0x3a>
 8006a16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a18:	6862      	ldr	r2, [r4, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a20:	6021      	str	r1, [r4, #0]
 8006a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	080080ed 	.word	0x080080ed
 8006a2c:	08008174 	.word	0x08008174

08006a30 <__multadd>:
 8006a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a34:	690e      	ldr	r6, [r1, #16]
 8006a36:	4607      	mov	r7, r0
 8006a38:	4698      	mov	r8, r3
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	f101 0014 	add.w	r0, r1, #20
 8006a40:	2300      	movs	r3, #0
 8006a42:	6805      	ldr	r5, [r0, #0]
 8006a44:	b2a9      	uxth	r1, r5
 8006a46:	fb02 8101 	mla	r1, r2, r1, r8
 8006a4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006a4e:	0c2d      	lsrs	r5, r5, #16
 8006a50:	fb02 c505 	mla	r5, r2, r5, ip
 8006a54:	b289      	uxth	r1, r1
 8006a56:	3301      	adds	r3, #1
 8006a58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a5c:	429e      	cmp	r6, r3
 8006a5e:	f840 1b04 	str.w	r1, [r0], #4
 8006a62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a66:	dcec      	bgt.n	8006a42 <__multadd+0x12>
 8006a68:	f1b8 0f00 	cmp.w	r8, #0
 8006a6c:	d022      	beq.n	8006ab4 <__multadd+0x84>
 8006a6e:	68a3      	ldr	r3, [r4, #8]
 8006a70:	42b3      	cmp	r3, r6
 8006a72:	dc19      	bgt.n	8006aa8 <__multadd+0x78>
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	4638      	mov	r0, r7
 8006a78:	3101      	adds	r1, #1
 8006a7a:	f7ff ff77 	bl	800696c <_Balloc>
 8006a7e:	4605      	mov	r5, r0
 8006a80:	b928      	cbnz	r0, 8006a8e <__multadd+0x5e>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <__multadd+0x8c>)
 8006a86:	480e      	ldr	r0, [pc, #56]	; (8006ac0 <__multadd+0x90>)
 8006a88:	21b5      	movs	r1, #181	; 0xb5
 8006a8a:	f000 fd13 	bl	80074b4 <__assert_func>
 8006a8e:	6922      	ldr	r2, [r4, #16]
 8006a90:	3202      	adds	r2, #2
 8006a92:	f104 010c 	add.w	r1, r4, #12
 8006a96:	0092      	lsls	r2, r2, #2
 8006a98:	300c      	adds	r0, #12
 8006a9a:	f7ff ff59 	bl	8006950 <memcpy>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	f7ff ffa3 	bl	80069ec <_Bfree>
 8006aa6:	462c      	mov	r4, r5
 8006aa8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006aac:	3601      	adds	r6, #1
 8006aae:	f8c3 8014 	str.w	r8, [r3, #20]
 8006ab2:	6126      	str	r6, [r4, #16]
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aba:	bf00      	nop
 8006abc:	08008163 	.word	0x08008163
 8006ac0:	08008174 	.word	0x08008174

08006ac4 <__hi0bits>:
 8006ac4:	0c03      	lsrs	r3, r0, #16
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	b9d3      	cbnz	r3, 8006b00 <__hi0bits+0x3c>
 8006aca:	0400      	lsls	r0, r0, #16
 8006acc:	2310      	movs	r3, #16
 8006ace:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ad2:	bf04      	itt	eq
 8006ad4:	0200      	lsleq	r0, r0, #8
 8006ad6:	3308      	addeq	r3, #8
 8006ad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006adc:	bf04      	itt	eq
 8006ade:	0100      	lsleq	r0, r0, #4
 8006ae0:	3304      	addeq	r3, #4
 8006ae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ae6:	bf04      	itt	eq
 8006ae8:	0080      	lsleq	r0, r0, #2
 8006aea:	3302      	addeq	r3, #2
 8006aec:	2800      	cmp	r0, #0
 8006aee:	db05      	blt.n	8006afc <__hi0bits+0x38>
 8006af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006af4:	f103 0301 	add.w	r3, r3, #1
 8006af8:	bf08      	it	eq
 8006afa:	2320      	moveq	r3, #32
 8006afc:	4618      	mov	r0, r3
 8006afe:	4770      	bx	lr
 8006b00:	2300      	movs	r3, #0
 8006b02:	e7e4      	b.n	8006ace <__hi0bits+0xa>

08006b04 <__lo0bits>:
 8006b04:	6803      	ldr	r3, [r0, #0]
 8006b06:	f013 0207 	ands.w	r2, r3, #7
 8006b0a:	4601      	mov	r1, r0
 8006b0c:	d00b      	beq.n	8006b26 <__lo0bits+0x22>
 8006b0e:	07da      	lsls	r2, r3, #31
 8006b10:	d424      	bmi.n	8006b5c <__lo0bits+0x58>
 8006b12:	0798      	lsls	r0, r3, #30
 8006b14:	bf49      	itett	mi
 8006b16:	085b      	lsrmi	r3, r3, #1
 8006b18:	089b      	lsrpl	r3, r3, #2
 8006b1a:	2001      	movmi	r0, #1
 8006b1c:	600b      	strmi	r3, [r1, #0]
 8006b1e:	bf5c      	itt	pl
 8006b20:	600b      	strpl	r3, [r1, #0]
 8006b22:	2002      	movpl	r0, #2
 8006b24:	4770      	bx	lr
 8006b26:	b298      	uxth	r0, r3
 8006b28:	b9b0      	cbnz	r0, 8006b58 <__lo0bits+0x54>
 8006b2a:	0c1b      	lsrs	r3, r3, #16
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b32:	bf04      	itt	eq
 8006b34:	0a1b      	lsreq	r3, r3, #8
 8006b36:	3008      	addeq	r0, #8
 8006b38:	071a      	lsls	r2, r3, #28
 8006b3a:	bf04      	itt	eq
 8006b3c:	091b      	lsreq	r3, r3, #4
 8006b3e:	3004      	addeq	r0, #4
 8006b40:	079a      	lsls	r2, r3, #30
 8006b42:	bf04      	itt	eq
 8006b44:	089b      	lsreq	r3, r3, #2
 8006b46:	3002      	addeq	r0, #2
 8006b48:	07da      	lsls	r2, r3, #31
 8006b4a:	d403      	bmi.n	8006b54 <__lo0bits+0x50>
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	f100 0001 	add.w	r0, r0, #1
 8006b52:	d005      	beq.n	8006b60 <__lo0bits+0x5c>
 8006b54:	600b      	str	r3, [r1, #0]
 8006b56:	4770      	bx	lr
 8006b58:	4610      	mov	r0, r2
 8006b5a:	e7e8      	b.n	8006b2e <__lo0bits+0x2a>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4770      	bx	lr
 8006b60:	2020      	movs	r0, #32
 8006b62:	4770      	bx	lr

08006b64 <__i2b>:
 8006b64:	b510      	push	{r4, lr}
 8006b66:	460c      	mov	r4, r1
 8006b68:	2101      	movs	r1, #1
 8006b6a:	f7ff feff 	bl	800696c <_Balloc>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	b928      	cbnz	r0, 8006b7e <__i2b+0x1a>
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <__i2b+0x24>)
 8006b74:	4805      	ldr	r0, [pc, #20]	; (8006b8c <__i2b+0x28>)
 8006b76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b7a:	f000 fc9b 	bl	80074b4 <__assert_func>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	6144      	str	r4, [r0, #20]
 8006b82:	6103      	str	r3, [r0, #16]
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	bf00      	nop
 8006b88:	08008163 	.word	0x08008163
 8006b8c:	08008174 	.word	0x08008174

08006b90 <__multiply>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	4614      	mov	r4, r2
 8006b96:	690a      	ldr	r2, [r1, #16]
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	bfb8      	it	lt
 8006b9e:	460b      	movlt	r3, r1
 8006ba0:	460d      	mov	r5, r1
 8006ba2:	bfbc      	itt	lt
 8006ba4:	4625      	movlt	r5, r4
 8006ba6:	461c      	movlt	r4, r3
 8006ba8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006bac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006bb0:	68ab      	ldr	r3, [r5, #8]
 8006bb2:	6869      	ldr	r1, [r5, #4]
 8006bb4:	eb0a 0709 	add.w	r7, sl, r9
 8006bb8:	42bb      	cmp	r3, r7
 8006bba:	b085      	sub	sp, #20
 8006bbc:	bfb8      	it	lt
 8006bbe:	3101      	addlt	r1, #1
 8006bc0:	f7ff fed4 	bl	800696c <_Balloc>
 8006bc4:	b930      	cbnz	r0, 8006bd4 <__multiply+0x44>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <__multiply+0x144>)
 8006bca:	4843      	ldr	r0, [pc, #268]	; (8006cd8 <__multiply+0x148>)
 8006bcc:	f240 115d 	movw	r1, #349	; 0x15d
 8006bd0:	f000 fc70 	bl	80074b4 <__assert_func>
 8006bd4:	f100 0614 	add.w	r6, r0, #20
 8006bd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006bdc:	4633      	mov	r3, r6
 8006bde:	2200      	movs	r2, #0
 8006be0:	4543      	cmp	r3, r8
 8006be2:	d31e      	bcc.n	8006c22 <__multiply+0x92>
 8006be4:	f105 0c14 	add.w	ip, r5, #20
 8006be8:	f104 0314 	add.w	r3, r4, #20
 8006bec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006bf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006bf4:	9202      	str	r2, [sp, #8]
 8006bf6:	ebac 0205 	sub.w	r2, ip, r5
 8006bfa:	3a15      	subs	r2, #21
 8006bfc:	f022 0203 	bic.w	r2, r2, #3
 8006c00:	3204      	adds	r2, #4
 8006c02:	f105 0115 	add.w	r1, r5, #21
 8006c06:	458c      	cmp	ip, r1
 8006c08:	bf38      	it	cc
 8006c0a:	2204      	movcc	r2, #4
 8006c0c:	9201      	str	r2, [sp, #4]
 8006c0e:	9a02      	ldr	r2, [sp, #8]
 8006c10:	9303      	str	r3, [sp, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d808      	bhi.n	8006c28 <__multiply+0x98>
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	dc55      	bgt.n	8006cc6 <__multiply+0x136>
 8006c1a:	6107      	str	r7, [r0, #16]
 8006c1c:	b005      	add	sp, #20
 8006c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	f843 2b04 	str.w	r2, [r3], #4
 8006c26:	e7db      	b.n	8006be0 <__multiply+0x50>
 8006c28:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c2c:	f1ba 0f00 	cmp.w	sl, #0
 8006c30:	d020      	beq.n	8006c74 <__multiply+0xe4>
 8006c32:	f105 0e14 	add.w	lr, r5, #20
 8006c36:	46b1      	mov	r9, r6
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c3e:	f8d9 b000 	ldr.w	fp, [r9]
 8006c42:	b2a1      	uxth	r1, r4
 8006c44:	fa1f fb8b 	uxth.w	fp, fp
 8006c48:	fb0a b101 	mla	r1, sl, r1, fp
 8006c4c:	4411      	add	r1, r2
 8006c4e:	f8d9 2000 	ldr.w	r2, [r9]
 8006c52:	0c24      	lsrs	r4, r4, #16
 8006c54:	0c12      	lsrs	r2, r2, #16
 8006c56:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c5e:	b289      	uxth	r1, r1
 8006c60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c64:	45f4      	cmp	ip, lr
 8006c66:	f849 1b04 	str.w	r1, [r9], #4
 8006c6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c6e:	d8e4      	bhi.n	8006c3a <__multiply+0xaa>
 8006c70:	9901      	ldr	r1, [sp, #4]
 8006c72:	5072      	str	r2, [r6, r1]
 8006c74:	9a03      	ldr	r2, [sp, #12]
 8006c76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	f1b9 0f00 	cmp.w	r9, #0
 8006c80:	d01f      	beq.n	8006cc2 <__multiply+0x132>
 8006c82:	6834      	ldr	r4, [r6, #0]
 8006c84:	f105 0114 	add.w	r1, r5, #20
 8006c88:	46b6      	mov	lr, r6
 8006c8a:	f04f 0a00 	mov.w	sl, #0
 8006c8e:	880a      	ldrh	r2, [r1, #0]
 8006c90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c94:	fb09 b202 	mla	r2, r9, r2, fp
 8006c98:	4492      	add	sl, r2
 8006c9a:	b2a4      	uxth	r4, r4
 8006c9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ca0:	f84e 4b04 	str.w	r4, [lr], #4
 8006ca4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006ca8:	f8be 2000 	ldrh.w	r2, [lr]
 8006cac:	0c24      	lsrs	r4, r4, #16
 8006cae:	fb09 2404 	mla	r4, r9, r4, r2
 8006cb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006cb6:	458c      	cmp	ip, r1
 8006cb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006cbc:	d8e7      	bhi.n	8006c8e <__multiply+0xfe>
 8006cbe:	9a01      	ldr	r2, [sp, #4]
 8006cc0:	50b4      	str	r4, [r6, r2]
 8006cc2:	3604      	adds	r6, #4
 8006cc4:	e7a3      	b.n	8006c0e <__multiply+0x7e>
 8006cc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1a5      	bne.n	8006c1a <__multiply+0x8a>
 8006cce:	3f01      	subs	r7, #1
 8006cd0:	e7a1      	b.n	8006c16 <__multiply+0x86>
 8006cd2:	bf00      	nop
 8006cd4:	08008163 	.word	0x08008163
 8006cd8:	08008174 	.word	0x08008174

08006cdc <__pow5mult>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	4615      	mov	r5, r2
 8006ce2:	f012 0203 	ands.w	r2, r2, #3
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	d007      	beq.n	8006cfc <__pow5mult+0x20>
 8006cec:	4c25      	ldr	r4, [pc, #148]	; (8006d84 <__pow5mult+0xa8>)
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cf6:	f7ff fe9b 	bl	8006a30 <__multadd>
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	10ad      	asrs	r5, r5, #2
 8006cfe:	d03d      	beq.n	8006d7c <__pow5mult+0xa0>
 8006d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d02:	b97c      	cbnz	r4, 8006d24 <__pow5mult+0x48>
 8006d04:	2010      	movs	r0, #16
 8006d06:	f7ff fe1b 	bl	8006940 <malloc>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8006d0e:	b928      	cbnz	r0, 8006d1c <__pow5mult+0x40>
 8006d10:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <__pow5mult+0xac>)
 8006d12:	481e      	ldr	r0, [pc, #120]	; (8006d8c <__pow5mult+0xb0>)
 8006d14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d18:	f000 fbcc 	bl	80074b4 <__assert_func>
 8006d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d20:	6004      	str	r4, [r0, #0]
 8006d22:	60c4      	str	r4, [r0, #12]
 8006d24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d2c:	b94c      	cbnz	r4, 8006d42 <__pow5mult+0x66>
 8006d2e:	f240 2171 	movw	r1, #625	; 0x271
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7ff ff16 	bl	8006b64 <__i2b>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d3e:	4604      	mov	r4, r0
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	07eb      	lsls	r3, r5, #31
 8006d48:	d50a      	bpl.n	8006d60 <__pow5mult+0x84>
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	4622      	mov	r2, r4
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7ff ff1e 	bl	8006b90 <__multiply>
 8006d54:	4639      	mov	r1, r7
 8006d56:	4680      	mov	r8, r0
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff fe47 	bl	80069ec <_Bfree>
 8006d5e:	4647      	mov	r7, r8
 8006d60:	106d      	asrs	r5, r5, #1
 8006d62:	d00b      	beq.n	8006d7c <__pow5mult+0xa0>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	b938      	cbnz	r0, 8006d78 <__pow5mult+0x9c>
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ff0f 	bl	8006b90 <__multiply>
 8006d72:	6020      	str	r0, [r4, #0]
 8006d74:	f8c0 9000 	str.w	r9, [r0]
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e7e4      	b.n	8006d46 <__pow5mult+0x6a>
 8006d7c:	4638      	mov	r0, r7
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d82:	bf00      	nop
 8006d84:	080082c8 	.word	0x080082c8
 8006d88:	080080ed 	.word	0x080080ed
 8006d8c:	08008174 	.word	0x08008174

08006d90 <__lshift>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	6849      	ldr	r1, [r1, #4]
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	4607      	mov	r7, r0
 8006da2:	4691      	mov	r9, r2
 8006da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006da8:	f108 0601 	add.w	r6, r8, #1
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	db0b      	blt.n	8006dc8 <__lshift+0x38>
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff fddb 	bl	800696c <_Balloc>
 8006db6:	4605      	mov	r5, r0
 8006db8:	b948      	cbnz	r0, 8006dce <__lshift+0x3e>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <__lshift+0xd0>)
 8006dbe:	4829      	ldr	r0, [pc, #164]	; (8006e64 <__lshift+0xd4>)
 8006dc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006dc4:	f000 fb76 	bl	80074b4 <__assert_func>
 8006dc8:	3101      	adds	r1, #1
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	e7ee      	b.n	8006dac <__lshift+0x1c>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f100 0114 	add.w	r1, r0, #20
 8006dd4:	f100 0210 	add.w	r2, r0, #16
 8006dd8:	4618      	mov	r0, r3
 8006dda:	4553      	cmp	r3, sl
 8006ddc:	db33      	blt.n	8006e46 <__lshift+0xb6>
 8006dde:	6920      	ldr	r0, [r4, #16]
 8006de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006de4:	f104 0314 	add.w	r3, r4, #20
 8006de8:	f019 091f 	ands.w	r9, r9, #31
 8006dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006df4:	d02b      	beq.n	8006e4e <__lshift+0xbe>
 8006df6:	f1c9 0e20 	rsb	lr, r9, #32
 8006dfa:	468a      	mov	sl, r1
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	fa00 f009 	lsl.w	r0, r0, r9
 8006e04:	4302      	orrs	r2, r0
 8006e06:	f84a 2b04 	str.w	r2, [sl], #4
 8006e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0e:	459c      	cmp	ip, r3
 8006e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e14:	d8f3      	bhi.n	8006dfe <__lshift+0x6e>
 8006e16:	ebac 0304 	sub.w	r3, ip, r4
 8006e1a:	3b15      	subs	r3, #21
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	3304      	adds	r3, #4
 8006e22:	f104 0015 	add.w	r0, r4, #21
 8006e26:	4584      	cmp	ip, r0
 8006e28:	bf38      	it	cc
 8006e2a:	2304      	movcc	r3, #4
 8006e2c:	50ca      	str	r2, [r1, r3]
 8006e2e:	b10a      	cbz	r2, 8006e34 <__lshift+0xa4>
 8006e30:	f108 0602 	add.w	r6, r8, #2
 8006e34:	3e01      	subs	r6, #1
 8006e36:	4638      	mov	r0, r7
 8006e38:	612e      	str	r6, [r5, #16]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	f7ff fdd6 	bl	80069ec <_Bfree>
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	e7c5      	b.n	8006dda <__lshift+0x4a>
 8006e4e:	3904      	subs	r1, #4
 8006e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e58:	459c      	cmp	ip, r3
 8006e5a:	d8f9      	bhi.n	8006e50 <__lshift+0xc0>
 8006e5c:	e7ea      	b.n	8006e34 <__lshift+0xa4>
 8006e5e:	bf00      	nop
 8006e60:	08008163 	.word	0x08008163
 8006e64:	08008174 	.word	0x08008174

08006e68 <__mcmp>:
 8006e68:	b530      	push	{r4, r5, lr}
 8006e6a:	6902      	ldr	r2, [r0, #16]
 8006e6c:	690c      	ldr	r4, [r1, #16]
 8006e6e:	1b12      	subs	r2, r2, r4
 8006e70:	d10e      	bne.n	8006e90 <__mcmp+0x28>
 8006e72:	f100 0314 	add.w	r3, r0, #20
 8006e76:	3114      	adds	r1, #20
 8006e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e88:	42a5      	cmp	r5, r4
 8006e8a:	d003      	beq.n	8006e94 <__mcmp+0x2c>
 8006e8c:	d305      	bcc.n	8006e9a <__mcmp+0x32>
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4610      	mov	r0, r2
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	4283      	cmp	r3, r0
 8006e96:	d3f3      	bcc.n	8006e80 <__mcmp+0x18>
 8006e98:	e7fa      	b.n	8006e90 <__mcmp+0x28>
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e9e:	e7f7      	b.n	8006e90 <__mcmp+0x28>

08006ea0 <__mdiff>:
 8006ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4617      	mov	r7, r2
 8006eae:	f7ff ffdb 	bl	8006e68 <__mcmp>
 8006eb2:	1e05      	subs	r5, r0, #0
 8006eb4:	d110      	bne.n	8006ed8 <__mdiff+0x38>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff fd57 	bl	800696c <_Balloc>
 8006ebe:	b930      	cbnz	r0, 8006ece <__mdiff+0x2e>
 8006ec0:	4b39      	ldr	r3, [pc, #228]	; (8006fa8 <__mdiff+0x108>)
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	f240 2132 	movw	r1, #562	; 0x232
 8006ec8:	4838      	ldr	r0, [pc, #224]	; (8006fac <__mdiff+0x10c>)
 8006eca:	f000 faf3 	bl	80074b4 <__assert_func>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed8:	bfa4      	itt	ge
 8006eda:	463b      	movge	r3, r7
 8006edc:	4627      	movge	r7, r4
 8006ede:	4630      	mov	r0, r6
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	bfa6      	itte	ge
 8006ee4:	461c      	movge	r4, r3
 8006ee6:	2500      	movge	r5, #0
 8006ee8:	2501      	movlt	r5, #1
 8006eea:	f7ff fd3f 	bl	800696c <_Balloc>
 8006eee:	b920      	cbnz	r0, 8006efa <__mdiff+0x5a>
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <__mdiff+0x108>)
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ef8:	e7e6      	b.n	8006ec8 <__mdiff+0x28>
 8006efa:	693e      	ldr	r6, [r7, #16]
 8006efc:	60c5      	str	r5, [r0, #12]
 8006efe:	6925      	ldr	r5, [r4, #16]
 8006f00:	f107 0114 	add.w	r1, r7, #20
 8006f04:	f104 0914 	add.w	r9, r4, #20
 8006f08:	f100 0e14 	add.w	lr, r0, #20
 8006f0c:	f107 0210 	add.w	r2, r7, #16
 8006f10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006f14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006f18:	46f2      	mov	sl, lr
 8006f1a:	2700      	movs	r7, #0
 8006f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f24:	fa1f f883 	uxth.w	r8, r3
 8006f28:	fa17 f78b 	uxtah	r7, r7, fp
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	eba7 0808 	sub.w	r8, r7, r8
 8006f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f3a:	fa1f f888 	uxth.w	r8, r8
 8006f3e:	141f      	asrs	r7, r3, #16
 8006f40:	454d      	cmp	r5, r9
 8006f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f46:	f84a 3b04 	str.w	r3, [sl], #4
 8006f4a:	d8e7      	bhi.n	8006f1c <__mdiff+0x7c>
 8006f4c:	1b2b      	subs	r3, r5, r4
 8006f4e:	3b15      	subs	r3, #21
 8006f50:	f023 0303 	bic.w	r3, r3, #3
 8006f54:	3304      	adds	r3, #4
 8006f56:	3415      	adds	r4, #21
 8006f58:	42a5      	cmp	r5, r4
 8006f5a:	bf38      	it	cc
 8006f5c:	2304      	movcc	r3, #4
 8006f5e:	4419      	add	r1, r3
 8006f60:	4473      	add	r3, lr
 8006f62:	469e      	mov	lr, r3
 8006f64:	460d      	mov	r5, r1
 8006f66:	4565      	cmp	r5, ip
 8006f68:	d30e      	bcc.n	8006f88 <__mdiff+0xe8>
 8006f6a:	f10c 0203 	add.w	r2, ip, #3
 8006f6e:	1a52      	subs	r2, r2, r1
 8006f70:	f022 0203 	bic.w	r2, r2, #3
 8006f74:	3903      	subs	r1, #3
 8006f76:	458c      	cmp	ip, r1
 8006f78:	bf38      	it	cc
 8006f7a:	2200      	movcc	r2, #0
 8006f7c:	441a      	add	r2, r3
 8006f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f82:	b17b      	cbz	r3, 8006fa4 <__mdiff+0x104>
 8006f84:	6106      	str	r6, [r0, #16]
 8006f86:	e7a5      	b.n	8006ed4 <__mdiff+0x34>
 8006f88:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f8c:	fa17 f488 	uxtah	r4, r7, r8
 8006f90:	1422      	asrs	r2, r4, #16
 8006f92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f96:	b2a4      	uxth	r4, r4
 8006f98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f9c:	f84e 4b04 	str.w	r4, [lr], #4
 8006fa0:	1417      	asrs	r7, r2, #16
 8006fa2:	e7e0      	b.n	8006f66 <__mdiff+0xc6>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	e7ea      	b.n	8006f7e <__mdiff+0xde>
 8006fa8:	08008163 	.word	0x08008163
 8006fac:	08008174 	.word	0x08008174

08006fb0 <__d2b>:
 8006fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	ec57 6b10 	vmov	r6, r7, d0
 8006fbc:	4690      	mov	r8, r2
 8006fbe:	f7ff fcd5 	bl	800696c <_Balloc>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	b930      	cbnz	r0, 8006fd4 <__d2b+0x24>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4b25      	ldr	r3, [pc, #148]	; (8007060 <__d2b+0xb0>)
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <__d2b+0xb4>)
 8006fcc:	f240 310a 	movw	r1, #778	; 0x30a
 8006fd0:	f000 fa70 	bl	80074b4 <__assert_func>
 8006fd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fdc:	bb35      	cbnz	r5, 800702c <__d2b+0x7c>
 8006fde:	2e00      	cmp	r6, #0
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	d028      	beq.n	8007036 <__d2b+0x86>
 8006fe4:	4668      	mov	r0, sp
 8006fe6:	9600      	str	r6, [sp, #0]
 8006fe8:	f7ff fd8c 	bl	8006b04 <__lo0bits>
 8006fec:	9900      	ldr	r1, [sp, #0]
 8006fee:	b300      	cbz	r0, 8007032 <__d2b+0x82>
 8006ff0:	9a01      	ldr	r2, [sp, #4]
 8006ff2:	f1c0 0320 	rsb	r3, r0, #32
 8006ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	40c2      	lsrs	r2, r0
 8006ffe:	6163      	str	r3, [r4, #20]
 8007000:	9201      	str	r2, [sp, #4]
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	61a3      	str	r3, [r4, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bf14      	ite	ne
 800700a:	2202      	movne	r2, #2
 800700c:	2201      	moveq	r2, #1
 800700e:	6122      	str	r2, [r4, #16]
 8007010:	b1d5      	cbz	r5, 8007048 <__d2b+0x98>
 8007012:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007016:	4405      	add	r5, r0
 8007018:	f8c9 5000 	str.w	r5, [r9]
 800701c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007020:	f8c8 0000 	str.w	r0, [r8]
 8007024:	4620      	mov	r0, r4
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800702c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007030:	e7d5      	b.n	8006fde <__d2b+0x2e>
 8007032:	6161      	str	r1, [r4, #20]
 8007034:	e7e5      	b.n	8007002 <__d2b+0x52>
 8007036:	a801      	add	r0, sp, #4
 8007038:	f7ff fd64 	bl	8006b04 <__lo0bits>
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	2201      	movs	r2, #1
 8007042:	6122      	str	r2, [r4, #16]
 8007044:	3020      	adds	r0, #32
 8007046:	e7e3      	b.n	8007010 <__d2b+0x60>
 8007048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800704c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007050:	f8c9 0000 	str.w	r0, [r9]
 8007054:	6918      	ldr	r0, [r3, #16]
 8007056:	f7ff fd35 	bl	8006ac4 <__hi0bits>
 800705a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800705e:	e7df      	b.n	8007020 <__d2b+0x70>
 8007060:	08008163 	.word	0x08008163
 8007064:	08008174 	.word	0x08008174

08007068 <_calloc_r>:
 8007068:	b513      	push	{r0, r1, r4, lr}
 800706a:	434a      	muls	r2, r1
 800706c:	4611      	mov	r1, r2
 800706e:	9201      	str	r2, [sp, #4]
 8007070:	f000 f85a 	bl	8007128 <_malloc_r>
 8007074:	4604      	mov	r4, r0
 8007076:	b118      	cbz	r0, 8007080 <_calloc_r+0x18>
 8007078:	9a01      	ldr	r2, [sp, #4]
 800707a:	2100      	movs	r1, #0
 800707c:	f7fe f950 	bl	8005320 <memset>
 8007080:	4620      	mov	r0, r4
 8007082:	b002      	add	sp, #8
 8007084:	bd10      	pop	{r4, pc}
	...

08007088 <_free_r>:
 8007088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800708a:	2900      	cmp	r1, #0
 800708c:	d048      	beq.n	8007120 <_free_r+0x98>
 800708e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007092:	9001      	str	r0, [sp, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f1a1 0404 	sub.w	r4, r1, #4
 800709a:	bfb8      	it	lt
 800709c:	18e4      	addlt	r4, r4, r3
 800709e:	f000 fa65 	bl	800756c <__malloc_lock>
 80070a2:	4a20      	ldr	r2, [pc, #128]	; (8007124 <_free_r+0x9c>)
 80070a4:	9801      	ldr	r0, [sp, #4]
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	4615      	mov	r5, r2
 80070aa:	b933      	cbnz	r3, 80070ba <_free_r+0x32>
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	6014      	str	r4, [r2, #0]
 80070b0:	b003      	add	sp, #12
 80070b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b6:	f000 ba5f 	b.w	8007578 <__malloc_unlock>
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	d90b      	bls.n	80070d6 <_free_r+0x4e>
 80070be:	6821      	ldr	r1, [r4, #0]
 80070c0:	1862      	adds	r2, r4, r1
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bf04      	itt	eq
 80070c6:	681a      	ldreq	r2, [r3, #0]
 80070c8:	685b      	ldreq	r3, [r3, #4]
 80070ca:	6063      	str	r3, [r4, #4]
 80070cc:	bf04      	itt	eq
 80070ce:	1852      	addeq	r2, r2, r1
 80070d0:	6022      	streq	r2, [r4, #0]
 80070d2:	602c      	str	r4, [r5, #0]
 80070d4:	e7ec      	b.n	80070b0 <_free_r+0x28>
 80070d6:	461a      	mov	r2, r3
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	b10b      	cbz	r3, 80070e0 <_free_r+0x58>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d9fa      	bls.n	80070d6 <_free_r+0x4e>
 80070e0:	6811      	ldr	r1, [r2, #0]
 80070e2:	1855      	adds	r5, r2, r1
 80070e4:	42a5      	cmp	r5, r4
 80070e6:	d10b      	bne.n	8007100 <_free_r+0x78>
 80070e8:	6824      	ldr	r4, [r4, #0]
 80070ea:	4421      	add	r1, r4
 80070ec:	1854      	adds	r4, r2, r1
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	6011      	str	r1, [r2, #0]
 80070f2:	d1dd      	bne.n	80070b0 <_free_r+0x28>
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	6053      	str	r3, [r2, #4]
 80070fa:	4421      	add	r1, r4
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	e7d7      	b.n	80070b0 <_free_r+0x28>
 8007100:	d902      	bls.n	8007108 <_free_r+0x80>
 8007102:	230c      	movs	r3, #12
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	e7d3      	b.n	80070b0 <_free_r+0x28>
 8007108:	6825      	ldr	r5, [r4, #0]
 800710a:	1961      	adds	r1, r4, r5
 800710c:	428b      	cmp	r3, r1
 800710e:	bf04      	itt	eq
 8007110:	6819      	ldreq	r1, [r3, #0]
 8007112:	685b      	ldreq	r3, [r3, #4]
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	bf04      	itt	eq
 8007118:	1949      	addeq	r1, r1, r5
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	6054      	str	r4, [r2, #4]
 800711e:	e7c7      	b.n	80070b0 <_free_r+0x28>
 8007120:	b003      	add	sp, #12
 8007122:	bd30      	pop	{r4, r5, pc}
 8007124:	20000208 	.word	0x20000208

08007128 <_malloc_r>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	1ccd      	adds	r5, r1, #3
 800712c:	f025 0503 	bic.w	r5, r5, #3
 8007130:	3508      	adds	r5, #8
 8007132:	2d0c      	cmp	r5, #12
 8007134:	bf38      	it	cc
 8007136:	250c      	movcc	r5, #12
 8007138:	2d00      	cmp	r5, #0
 800713a:	4606      	mov	r6, r0
 800713c:	db01      	blt.n	8007142 <_malloc_r+0x1a>
 800713e:	42a9      	cmp	r1, r5
 8007140:	d903      	bls.n	800714a <_malloc_r+0x22>
 8007142:	230c      	movs	r3, #12
 8007144:	6033      	str	r3, [r6, #0]
 8007146:	2000      	movs	r0, #0
 8007148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714a:	f000 fa0f 	bl	800756c <__malloc_lock>
 800714e:	4921      	ldr	r1, [pc, #132]	; (80071d4 <_malloc_r+0xac>)
 8007150:	680a      	ldr	r2, [r1, #0]
 8007152:	4614      	mov	r4, r2
 8007154:	b99c      	cbnz	r4, 800717e <_malloc_r+0x56>
 8007156:	4f20      	ldr	r7, [pc, #128]	; (80071d8 <_malloc_r+0xb0>)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	b923      	cbnz	r3, 8007166 <_malloc_r+0x3e>
 800715c:	4621      	mov	r1, r4
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f998 	bl	8007494 <_sbrk_r>
 8007164:	6038      	str	r0, [r7, #0]
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f993 	bl	8007494 <_sbrk_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d123      	bne.n	80071ba <_malloc_r+0x92>
 8007172:	230c      	movs	r3, #12
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f9fe 	bl	8007578 <__malloc_unlock>
 800717c:	e7e3      	b.n	8007146 <_malloc_r+0x1e>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	1b5b      	subs	r3, r3, r5
 8007182:	d417      	bmi.n	80071b4 <_malloc_r+0x8c>
 8007184:	2b0b      	cmp	r3, #11
 8007186:	d903      	bls.n	8007190 <_malloc_r+0x68>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	441c      	add	r4, r3
 800718c:	6025      	str	r5, [r4, #0]
 800718e:	e004      	b.n	800719a <_malloc_r+0x72>
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	42a2      	cmp	r2, r4
 8007194:	bf0c      	ite	eq
 8007196:	600b      	streq	r3, [r1, #0]
 8007198:	6053      	strne	r3, [r2, #4]
 800719a:	4630      	mov	r0, r6
 800719c:	f000 f9ec 	bl	8007578 <__malloc_unlock>
 80071a0:	f104 000b 	add.w	r0, r4, #11
 80071a4:	1d23      	adds	r3, r4, #4
 80071a6:	f020 0007 	bic.w	r0, r0, #7
 80071aa:	1ac2      	subs	r2, r0, r3
 80071ac:	d0cc      	beq.n	8007148 <_malloc_r+0x20>
 80071ae:	1a1b      	subs	r3, r3, r0
 80071b0:	50a3      	str	r3, [r4, r2]
 80071b2:	e7c9      	b.n	8007148 <_malloc_r+0x20>
 80071b4:	4622      	mov	r2, r4
 80071b6:	6864      	ldr	r4, [r4, #4]
 80071b8:	e7cc      	b.n	8007154 <_malloc_r+0x2c>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d0e3      	beq.n	800718c <_malloc_r+0x64>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4630      	mov	r0, r6
 80071c8:	f000 f964 	bl	8007494 <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d1dd      	bne.n	800718c <_malloc_r+0x64>
 80071d0:	e7cf      	b.n	8007172 <_malloc_r+0x4a>
 80071d2:	bf00      	nop
 80071d4:	20000208 	.word	0x20000208
 80071d8:	2000020c 	.word	0x2000020c

080071dc <__ssputs_r>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	688e      	ldr	r6, [r1, #8]
 80071e2:	429e      	cmp	r6, r3
 80071e4:	4682      	mov	sl, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	4690      	mov	r8, r2
 80071ea:	461f      	mov	r7, r3
 80071ec:	d838      	bhi.n	8007260 <__ssputs_r+0x84>
 80071ee:	898a      	ldrh	r2, [r1, #12]
 80071f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071f4:	d032      	beq.n	800725c <__ssputs_r+0x80>
 80071f6:	6825      	ldr	r5, [r4, #0]
 80071f8:	6909      	ldr	r1, [r1, #16]
 80071fa:	eba5 0901 	sub.w	r9, r5, r1
 80071fe:	6965      	ldr	r5, [r4, #20]
 8007200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007208:	3301      	adds	r3, #1
 800720a:	444b      	add	r3, r9
 800720c:	106d      	asrs	r5, r5, #1
 800720e:	429d      	cmp	r5, r3
 8007210:	bf38      	it	cc
 8007212:	461d      	movcc	r5, r3
 8007214:	0553      	lsls	r3, r2, #21
 8007216:	d531      	bpl.n	800727c <__ssputs_r+0xa0>
 8007218:	4629      	mov	r1, r5
 800721a:	f7ff ff85 	bl	8007128 <_malloc_r>
 800721e:	4606      	mov	r6, r0
 8007220:	b950      	cbnz	r0, 8007238 <__ssputs_r+0x5c>
 8007222:	230c      	movs	r3, #12
 8007224:	f8ca 3000 	str.w	r3, [sl]
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	6921      	ldr	r1, [r4, #16]
 800723a:	464a      	mov	r2, r9
 800723c:	f7ff fb88 	bl	8006950 <memcpy>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	6126      	str	r6, [r4, #16]
 800724e:	6165      	str	r5, [r4, #20]
 8007250:	444e      	add	r6, r9
 8007252:	eba5 0509 	sub.w	r5, r5, r9
 8007256:	6026      	str	r6, [r4, #0]
 8007258:	60a5      	str	r5, [r4, #8]
 800725a:	463e      	mov	r6, r7
 800725c:	42be      	cmp	r6, r7
 800725e:	d900      	bls.n	8007262 <__ssputs_r+0x86>
 8007260:	463e      	mov	r6, r7
 8007262:	4632      	mov	r2, r6
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	4641      	mov	r1, r8
 8007268:	f000 f966 	bl	8007538 <memmove>
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	6822      	ldr	r2, [r4, #0]
 8007270:	1b9b      	subs	r3, r3, r6
 8007272:	4432      	add	r2, r6
 8007274:	60a3      	str	r3, [r4, #8]
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	2000      	movs	r0, #0
 800727a:	e7db      	b.n	8007234 <__ssputs_r+0x58>
 800727c:	462a      	mov	r2, r5
 800727e:	f000 f981 	bl	8007584 <_realloc_r>
 8007282:	4606      	mov	r6, r0
 8007284:	2800      	cmp	r0, #0
 8007286:	d1e1      	bne.n	800724c <__ssputs_r+0x70>
 8007288:	6921      	ldr	r1, [r4, #16]
 800728a:	4650      	mov	r0, sl
 800728c:	f7ff fefc 	bl	8007088 <_free_r>
 8007290:	e7c7      	b.n	8007222 <__ssputs_r+0x46>
	...

08007294 <_svfiprintf_r>:
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	4698      	mov	r8, r3
 800729a:	898b      	ldrh	r3, [r1, #12]
 800729c:	061b      	lsls	r3, r3, #24
 800729e:	b09d      	sub	sp, #116	; 0x74
 80072a0:	4607      	mov	r7, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	4614      	mov	r4, r2
 80072a6:	d50e      	bpl.n	80072c6 <_svfiprintf_r+0x32>
 80072a8:	690b      	ldr	r3, [r1, #16]
 80072aa:	b963      	cbnz	r3, 80072c6 <_svfiprintf_r+0x32>
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	f7ff ff3b 	bl	8007128 <_malloc_r>
 80072b2:	6028      	str	r0, [r5, #0]
 80072b4:	6128      	str	r0, [r5, #16]
 80072b6:	b920      	cbnz	r0, 80072c2 <_svfiprintf_r+0x2e>
 80072b8:	230c      	movs	r3, #12
 80072ba:	603b      	str	r3, [r7, #0]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072c0:	e0d1      	b.n	8007466 <_svfiprintf_r+0x1d2>
 80072c2:	2340      	movs	r3, #64	; 0x40
 80072c4:	616b      	str	r3, [r5, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	2320      	movs	r3, #32
 80072cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d4:	2330      	movs	r3, #48	; 0x30
 80072d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007480 <_svfiprintf_r+0x1ec>
 80072da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072de:	f04f 0901 	mov.w	r9, #1
 80072e2:	4623      	mov	r3, r4
 80072e4:	469a      	mov	sl, r3
 80072e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ea:	b10a      	cbz	r2, 80072f0 <_svfiprintf_r+0x5c>
 80072ec:	2a25      	cmp	r2, #37	; 0x25
 80072ee:	d1f9      	bne.n	80072e4 <_svfiprintf_r+0x50>
 80072f0:	ebba 0b04 	subs.w	fp, sl, r4
 80072f4:	d00b      	beq.n	800730e <_svfiprintf_r+0x7a>
 80072f6:	465b      	mov	r3, fp
 80072f8:	4622      	mov	r2, r4
 80072fa:	4629      	mov	r1, r5
 80072fc:	4638      	mov	r0, r7
 80072fe:	f7ff ff6d 	bl	80071dc <__ssputs_r>
 8007302:	3001      	adds	r0, #1
 8007304:	f000 80aa 	beq.w	800745c <_svfiprintf_r+0x1c8>
 8007308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800730a:	445a      	add	r2, fp
 800730c:	9209      	str	r2, [sp, #36]	; 0x24
 800730e:	f89a 3000 	ldrb.w	r3, [sl]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80a2 	beq.w	800745c <_svfiprintf_r+0x1c8>
 8007318:	2300      	movs	r3, #0
 800731a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800731e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007322:	f10a 0a01 	add.w	sl, sl, #1
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	9307      	str	r3, [sp, #28]
 800732a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800732e:	931a      	str	r3, [sp, #104]	; 0x68
 8007330:	4654      	mov	r4, sl
 8007332:	2205      	movs	r2, #5
 8007334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007338:	4851      	ldr	r0, [pc, #324]	; (8007480 <_svfiprintf_r+0x1ec>)
 800733a:	f7f8 ff61 	bl	8000200 <memchr>
 800733e:	9a04      	ldr	r2, [sp, #16]
 8007340:	b9d8      	cbnz	r0, 800737a <_svfiprintf_r+0xe6>
 8007342:	06d0      	lsls	r0, r2, #27
 8007344:	bf44      	itt	mi
 8007346:	2320      	movmi	r3, #32
 8007348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734c:	0711      	lsls	r1, r2, #28
 800734e:	bf44      	itt	mi
 8007350:	232b      	movmi	r3, #43	; 0x2b
 8007352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007356:	f89a 3000 	ldrb.w	r3, [sl]
 800735a:	2b2a      	cmp	r3, #42	; 0x2a
 800735c:	d015      	beq.n	800738a <_svfiprintf_r+0xf6>
 800735e:	9a07      	ldr	r2, [sp, #28]
 8007360:	4654      	mov	r4, sl
 8007362:	2000      	movs	r0, #0
 8007364:	f04f 0c0a 	mov.w	ip, #10
 8007368:	4621      	mov	r1, r4
 800736a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736e:	3b30      	subs	r3, #48	; 0x30
 8007370:	2b09      	cmp	r3, #9
 8007372:	d94e      	bls.n	8007412 <_svfiprintf_r+0x17e>
 8007374:	b1b0      	cbz	r0, 80073a4 <_svfiprintf_r+0x110>
 8007376:	9207      	str	r2, [sp, #28]
 8007378:	e014      	b.n	80073a4 <_svfiprintf_r+0x110>
 800737a:	eba0 0308 	sub.w	r3, r0, r8
 800737e:	fa09 f303 	lsl.w	r3, r9, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	46a2      	mov	sl, r4
 8007388:	e7d2      	b.n	8007330 <_svfiprintf_r+0x9c>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	1d19      	adds	r1, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9103      	str	r1, [sp, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfbb      	ittet	lt
 8007396:	425b      	neglt	r3, r3
 8007398:	f042 0202 	orrlt.w	r2, r2, #2
 800739c:	9307      	strge	r3, [sp, #28]
 800739e:	9307      	strlt	r3, [sp, #28]
 80073a0:	bfb8      	it	lt
 80073a2:	9204      	strlt	r2, [sp, #16]
 80073a4:	7823      	ldrb	r3, [r4, #0]
 80073a6:	2b2e      	cmp	r3, #46	; 0x2e
 80073a8:	d10c      	bne.n	80073c4 <_svfiprintf_r+0x130>
 80073aa:	7863      	ldrb	r3, [r4, #1]
 80073ac:	2b2a      	cmp	r3, #42	; 0x2a
 80073ae:	d135      	bne.n	800741c <_svfiprintf_r+0x188>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	1d1a      	adds	r2, r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	9203      	str	r2, [sp, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfb8      	it	lt
 80073bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073c0:	3402      	adds	r4, #2
 80073c2:	9305      	str	r3, [sp, #20]
 80073c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007490 <_svfiprintf_r+0x1fc>
 80073c8:	7821      	ldrb	r1, [r4, #0]
 80073ca:	2203      	movs	r2, #3
 80073cc:	4650      	mov	r0, sl
 80073ce:	f7f8 ff17 	bl	8000200 <memchr>
 80073d2:	b140      	cbz	r0, 80073e6 <_svfiprintf_r+0x152>
 80073d4:	2340      	movs	r3, #64	; 0x40
 80073d6:	eba0 000a 	sub.w	r0, r0, sl
 80073da:	fa03 f000 	lsl.w	r0, r3, r0
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	4303      	orrs	r3, r0
 80073e2:	3401      	adds	r4, #1
 80073e4:	9304      	str	r3, [sp, #16]
 80073e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ea:	4826      	ldr	r0, [pc, #152]	; (8007484 <_svfiprintf_r+0x1f0>)
 80073ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073f0:	2206      	movs	r2, #6
 80073f2:	f7f8 ff05 	bl	8000200 <memchr>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d038      	beq.n	800746c <_svfiprintf_r+0x1d8>
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <_svfiprintf_r+0x1f4>)
 80073fc:	bb1b      	cbnz	r3, 8007446 <_svfiprintf_r+0x1b2>
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	3307      	adds	r3, #7
 8007402:	f023 0307 	bic.w	r3, r3, #7
 8007406:	3308      	adds	r3, #8
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740c:	4433      	add	r3, r6
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	e767      	b.n	80072e2 <_svfiprintf_r+0x4e>
 8007412:	fb0c 3202 	mla	r2, ip, r2, r3
 8007416:	460c      	mov	r4, r1
 8007418:	2001      	movs	r0, #1
 800741a:	e7a5      	b.n	8007368 <_svfiprintf_r+0xd4>
 800741c:	2300      	movs	r3, #0
 800741e:	3401      	adds	r4, #1
 8007420:	9305      	str	r3, [sp, #20]
 8007422:	4619      	mov	r1, r3
 8007424:	f04f 0c0a 	mov.w	ip, #10
 8007428:	4620      	mov	r0, r4
 800742a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800742e:	3a30      	subs	r2, #48	; 0x30
 8007430:	2a09      	cmp	r2, #9
 8007432:	d903      	bls.n	800743c <_svfiprintf_r+0x1a8>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0c5      	beq.n	80073c4 <_svfiprintf_r+0x130>
 8007438:	9105      	str	r1, [sp, #20]
 800743a:	e7c3      	b.n	80073c4 <_svfiprintf_r+0x130>
 800743c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007440:	4604      	mov	r4, r0
 8007442:	2301      	movs	r3, #1
 8007444:	e7f0      	b.n	8007428 <_svfiprintf_r+0x194>
 8007446:	ab03      	add	r3, sp, #12
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	462a      	mov	r2, r5
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <_svfiprintf_r+0x1f8>)
 800744e:	a904      	add	r1, sp, #16
 8007450:	4638      	mov	r0, r7
 8007452:	f7fe f80d 	bl	8005470 <_printf_float>
 8007456:	1c42      	adds	r2, r0, #1
 8007458:	4606      	mov	r6, r0
 800745a:	d1d6      	bne.n	800740a <_svfiprintf_r+0x176>
 800745c:	89ab      	ldrh	r3, [r5, #12]
 800745e:	065b      	lsls	r3, r3, #25
 8007460:	f53f af2c 	bmi.w	80072bc <_svfiprintf_r+0x28>
 8007464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007466:	b01d      	add	sp, #116	; 0x74
 8007468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746c:	ab03      	add	r3, sp, #12
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	462a      	mov	r2, r5
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <_svfiprintf_r+0x1f8>)
 8007474:	a904      	add	r1, sp, #16
 8007476:	4638      	mov	r0, r7
 8007478:	f7fe fa9e 	bl	80059b8 <_printf_i>
 800747c:	e7eb      	b.n	8007456 <_svfiprintf_r+0x1c2>
 800747e:	bf00      	nop
 8007480:	080082d4 	.word	0x080082d4
 8007484:	080082de 	.word	0x080082de
 8007488:	08005471 	.word	0x08005471
 800748c:	080071dd 	.word	0x080071dd
 8007490:	080082da 	.word	0x080082da

08007494 <_sbrk_r>:
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	4d06      	ldr	r5, [pc, #24]	; (80074b0 <_sbrk_r+0x1c>)
 8007498:	2300      	movs	r3, #0
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	f7fa fdb6 	bl	8002010 <_sbrk>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_sbrk_r+0x1a>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_sbrk_r+0x1a>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	200003ac 	.word	0x200003ac

080074b4 <__assert_func>:
 80074b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074b6:	4614      	mov	r4, r2
 80074b8:	461a      	mov	r2, r3
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <__assert_func+0x2c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4605      	mov	r5, r0
 80074c0:	68d8      	ldr	r0, [r3, #12]
 80074c2:	b14c      	cbz	r4, 80074d8 <__assert_func+0x24>
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <__assert_func+0x30>)
 80074c6:	9100      	str	r1, [sp, #0]
 80074c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074cc:	4906      	ldr	r1, [pc, #24]	; (80074e8 <__assert_func+0x34>)
 80074ce:	462b      	mov	r3, r5
 80074d0:	f000 f80e 	bl	80074f0 <fiprintf>
 80074d4:	f000 faa4 	bl	8007a20 <abort>
 80074d8:	4b04      	ldr	r3, [pc, #16]	; (80074ec <__assert_func+0x38>)
 80074da:	461c      	mov	r4, r3
 80074dc:	e7f3      	b.n	80074c6 <__assert_func+0x12>
 80074de:	bf00      	nop
 80074e0:	2000000c 	.word	0x2000000c
 80074e4:	080082e5 	.word	0x080082e5
 80074e8:	080082f2 	.word	0x080082f2
 80074ec:	08008320 	.word	0x08008320

080074f0 <fiprintf>:
 80074f0:	b40e      	push	{r1, r2, r3}
 80074f2:	b503      	push	{r0, r1, lr}
 80074f4:	4601      	mov	r1, r0
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <fiprintf+0x20>)
 80074fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074fe:	6800      	ldr	r0, [r0, #0]
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	f000 f88f 	bl	8007624 <_vfiprintf_r>
 8007506:	b002      	add	sp, #8
 8007508:	f85d eb04 	ldr.w	lr, [sp], #4
 800750c:	b003      	add	sp, #12
 800750e:	4770      	bx	lr
 8007510:	2000000c 	.word	0x2000000c

08007514 <__ascii_mbtowc>:
 8007514:	b082      	sub	sp, #8
 8007516:	b901      	cbnz	r1, 800751a <__ascii_mbtowc+0x6>
 8007518:	a901      	add	r1, sp, #4
 800751a:	b142      	cbz	r2, 800752e <__ascii_mbtowc+0x1a>
 800751c:	b14b      	cbz	r3, 8007532 <__ascii_mbtowc+0x1e>
 800751e:	7813      	ldrb	r3, [r2, #0]
 8007520:	600b      	str	r3, [r1, #0]
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	1e10      	subs	r0, r2, #0
 8007526:	bf18      	it	ne
 8007528:	2001      	movne	r0, #1
 800752a:	b002      	add	sp, #8
 800752c:	4770      	bx	lr
 800752e:	4610      	mov	r0, r2
 8007530:	e7fb      	b.n	800752a <__ascii_mbtowc+0x16>
 8007532:	f06f 0001 	mvn.w	r0, #1
 8007536:	e7f8      	b.n	800752a <__ascii_mbtowc+0x16>

08007538 <memmove>:
 8007538:	4288      	cmp	r0, r1
 800753a:	b510      	push	{r4, lr}
 800753c:	eb01 0402 	add.w	r4, r1, r2
 8007540:	d902      	bls.n	8007548 <memmove+0x10>
 8007542:	4284      	cmp	r4, r0
 8007544:	4623      	mov	r3, r4
 8007546:	d807      	bhi.n	8007558 <memmove+0x20>
 8007548:	1e43      	subs	r3, r0, #1
 800754a:	42a1      	cmp	r1, r4
 800754c:	d008      	beq.n	8007560 <memmove+0x28>
 800754e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007556:	e7f8      	b.n	800754a <memmove+0x12>
 8007558:	4402      	add	r2, r0
 800755a:	4601      	mov	r1, r0
 800755c:	428a      	cmp	r2, r1
 800755e:	d100      	bne.n	8007562 <memmove+0x2a>
 8007560:	bd10      	pop	{r4, pc}
 8007562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800756a:	e7f7      	b.n	800755c <memmove+0x24>

0800756c <__malloc_lock>:
 800756c:	4801      	ldr	r0, [pc, #4]	; (8007574 <__malloc_lock+0x8>)
 800756e:	f000 bc17 	b.w	8007da0 <__retarget_lock_acquire_recursive>
 8007572:	bf00      	nop
 8007574:	200003b4 	.word	0x200003b4

08007578 <__malloc_unlock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_unlock+0x8>)
 800757a:	f000 bc12 	b.w	8007da2 <__retarget_lock_release_recursive>
 800757e:	bf00      	nop
 8007580:	200003b4 	.word	0x200003b4

08007584 <_realloc_r>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	4607      	mov	r7, r0
 8007588:	4614      	mov	r4, r2
 800758a:	460e      	mov	r6, r1
 800758c:	b921      	cbnz	r1, 8007598 <_realloc_r+0x14>
 800758e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007592:	4611      	mov	r1, r2
 8007594:	f7ff bdc8 	b.w	8007128 <_malloc_r>
 8007598:	b922      	cbnz	r2, 80075a4 <_realloc_r+0x20>
 800759a:	f7ff fd75 	bl	8007088 <_free_r>
 800759e:	4625      	mov	r5, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075a4:	f000 fc62 	bl	8007e6c <_malloc_usable_size_r>
 80075a8:	42a0      	cmp	r0, r4
 80075aa:	d20f      	bcs.n	80075cc <_realloc_r+0x48>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7ff fdba 	bl	8007128 <_malloc_r>
 80075b4:	4605      	mov	r5, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d0f2      	beq.n	80075a0 <_realloc_r+0x1c>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4622      	mov	r2, r4
 80075be:	f7ff f9c7 	bl	8006950 <memcpy>
 80075c2:	4631      	mov	r1, r6
 80075c4:	4638      	mov	r0, r7
 80075c6:	f7ff fd5f 	bl	8007088 <_free_r>
 80075ca:	e7e9      	b.n	80075a0 <_realloc_r+0x1c>
 80075cc:	4635      	mov	r5, r6
 80075ce:	e7e7      	b.n	80075a0 <_realloc_r+0x1c>

080075d0 <__sfputc_r>:
 80075d0:	6893      	ldr	r3, [r2, #8]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	b410      	push	{r4}
 80075d8:	6093      	str	r3, [r2, #8]
 80075da:	da08      	bge.n	80075ee <__sfputc_r+0x1e>
 80075dc:	6994      	ldr	r4, [r2, #24]
 80075de:	42a3      	cmp	r3, r4
 80075e0:	db01      	blt.n	80075e6 <__sfputc_r+0x16>
 80075e2:	290a      	cmp	r1, #10
 80075e4:	d103      	bne.n	80075ee <__sfputc_r+0x1e>
 80075e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ea:	f000 b94b 	b.w	8007884 <__swbuf_r>
 80075ee:	6813      	ldr	r3, [r2, #0]
 80075f0:	1c58      	adds	r0, r3, #1
 80075f2:	6010      	str	r0, [r2, #0]
 80075f4:	7019      	strb	r1, [r3, #0]
 80075f6:	4608      	mov	r0, r1
 80075f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <__sfputs_r>:
 80075fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007600:	4606      	mov	r6, r0
 8007602:	460f      	mov	r7, r1
 8007604:	4614      	mov	r4, r2
 8007606:	18d5      	adds	r5, r2, r3
 8007608:	42ac      	cmp	r4, r5
 800760a:	d101      	bne.n	8007610 <__sfputs_r+0x12>
 800760c:	2000      	movs	r0, #0
 800760e:	e007      	b.n	8007620 <__sfputs_r+0x22>
 8007610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007614:	463a      	mov	r2, r7
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ffda 	bl	80075d0 <__sfputc_r>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d1f3      	bne.n	8007608 <__sfputs_r+0xa>
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007624 <_vfiprintf_r>:
 8007624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	460d      	mov	r5, r1
 800762a:	b09d      	sub	sp, #116	; 0x74
 800762c:	4614      	mov	r4, r2
 800762e:	4698      	mov	r8, r3
 8007630:	4606      	mov	r6, r0
 8007632:	b118      	cbz	r0, 800763c <_vfiprintf_r+0x18>
 8007634:	6983      	ldr	r3, [r0, #24]
 8007636:	b90b      	cbnz	r3, 800763c <_vfiprintf_r+0x18>
 8007638:	f000 fb14 	bl	8007c64 <__sinit>
 800763c:	4b89      	ldr	r3, [pc, #548]	; (8007864 <_vfiprintf_r+0x240>)
 800763e:	429d      	cmp	r5, r3
 8007640:	d11b      	bne.n	800767a <_vfiprintf_r+0x56>
 8007642:	6875      	ldr	r5, [r6, #4]
 8007644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007646:	07d9      	lsls	r1, r3, #31
 8007648:	d405      	bmi.n	8007656 <_vfiprintf_r+0x32>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	059a      	lsls	r2, r3, #22
 800764e:	d402      	bmi.n	8007656 <_vfiprintf_r+0x32>
 8007650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007652:	f000 fba5 	bl	8007da0 <__retarget_lock_acquire_recursive>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	071b      	lsls	r3, r3, #28
 800765a:	d501      	bpl.n	8007660 <_vfiprintf_r+0x3c>
 800765c:	692b      	ldr	r3, [r5, #16]
 800765e:	b9eb      	cbnz	r3, 800769c <_vfiprintf_r+0x78>
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f96e 	bl	8007944 <__swsetup_r>
 8007668:	b1c0      	cbz	r0, 800769c <_vfiprintf_r+0x78>
 800766a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800766c:	07dc      	lsls	r4, r3, #31
 800766e:	d50e      	bpl.n	800768e <_vfiprintf_r+0x6a>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007674:	b01d      	add	sp, #116	; 0x74
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	4b7b      	ldr	r3, [pc, #492]	; (8007868 <_vfiprintf_r+0x244>)
 800767c:	429d      	cmp	r5, r3
 800767e:	d101      	bne.n	8007684 <_vfiprintf_r+0x60>
 8007680:	68b5      	ldr	r5, [r6, #8]
 8007682:	e7df      	b.n	8007644 <_vfiprintf_r+0x20>
 8007684:	4b79      	ldr	r3, [pc, #484]	; (800786c <_vfiprintf_r+0x248>)
 8007686:	429d      	cmp	r5, r3
 8007688:	bf08      	it	eq
 800768a:	68f5      	ldreq	r5, [r6, #12]
 800768c:	e7da      	b.n	8007644 <_vfiprintf_r+0x20>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	0598      	lsls	r0, r3, #22
 8007692:	d4ed      	bmi.n	8007670 <_vfiprintf_r+0x4c>
 8007694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007696:	f000 fb84 	bl	8007da2 <__retarget_lock_release_recursive>
 800769a:	e7e9      	b.n	8007670 <_vfiprintf_r+0x4c>
 800769c:	2300      	movs	r3, #0
 800769e:	9309      	str	r3, [sp, #36]	; 0x24
 80076a0:	2320      	movs	r3, #32
 80076a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076aa:	2330      	movs	r3, #48	; 0x30
 80076ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007870 <_vfiprintf_r+0x24c>
 80076b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076b4:	f04f 0901 	mov.w	r9, #1
 80076b8:	4623      	mov	r3, r4
 80076ba:	469a      	mov	sl, r3
 80076bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c0:	b10a      	cbz	r2, 80076c6 <_vfiprintf_r+0xa2>
 80076c2:	2a25      	cmp	r2, #37	; 0x25
 80076c4:	d1f9      	bne.n	80076ba <_vfiprintf_r+0x96>
 80076c6:	ebba 0b04 	subs.w	fp, sl, r4
 80076ca:	d00b      	beq.n	80076e4 <_vfiprintf_r+0xc0>
 80076cc:	465b      	mov	r3, fp
 80076ce:	4622      	mov	r2, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff ff93 	bl	80075fe <__sfputs_r>
 80076d8:	3001      	adds	r0, #1
 80076da:	f000 80aa 	beq.w	8007832 <_vfiprintf_r+0x20e>
 80076de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076e0:	445a      	add	r2, fp
 80076e2:	9209      	str	r2, [sp, #36]	; 0x24
 80076e4:	f89a 3000 	ldrb.w	r3, [sl]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80a2 	beq.w	8007832 <_vfiprintf_r+0x20e>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f8:	f10a 0a01 	add.w	sl, sl, #1
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	9307      	str	r3, [sp, #28]
 8007700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007704:	931a      	str	r3, [sp, #104]	; 0x68
 8007706:	4654      	mov	r4, sl
 8007708:	2205      	movs	r2, #5
 800770a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770e:	4858      	ldr	r0, [pc, #352]	; (8007870 <_vfiprintf_r+0x24c>)
 8007710:	f7f8 fd76 	bl	8000200 <memchr>
 8007714:	9a04      	ldr	r2, [sp, #16]
 8007716:	b9d8      	cbnz	r0, 8007750 <_vfiprintf_r+0x12c>
 8007718:	06d1      	lsls	r1, r2, #27
 800771a:	bf44      	itt	mi
 800771c:	2320      	movmi	r3, #32
 800771e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007722:	0713      	lsls	r3, r2, #28
 8007724:	bf44      	itt	mi
 8007726:	232b      	movmi	r3, #43	; 0x2b
 8007728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800772c:	f89a 3000 	ldrb.w	r3, [sl]
 8007730:	2b2a      	cmp	r3, #42	; 0x2a
 8007732:	d015      	beq.n	8007760 <_vfiprintf_r+0x13c>
 8007734:	9a07      	ldr	r2, [sp, #28]
 8007736:	4654      	mov	r4, sl
 8007738:	2000      	movs	r0, #0
 800773a:	f04f 0c0a 	mov.w	ip, #10
 800773e:	4621      	mov	r1, r4
 8007740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007744:	3b30      	subs	r3, #48	; 0x30
 8007746:	2b09      	cmp	r3, #9
 8007748:	d94e      	bls.n	80077e8 <_vfiprintf_r+0x1c4>
 800774a:	b1b0      	cbz	r0, 800777a <_vfiprintf_r+0x156>
 800774c:	9207      	str	r2, [sp, #28]
 800774e:	e014      	b.n	800777a <_vfiprintf_r+0x156>
 8007750:	eba0 0308 	sub.w	r3, r0, r8
 8007754:	fa09 f303 	lsl.w	r3, r9, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	46a2      	mov	sl, r4
 800775e:	e7d2      	b.n	8007706 <_vfiprintf_r+0xe2>
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	1d19      	adds	r1, r3, #4
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	9103      	str	r1, [sp, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bfbb      	ittet	lt
 800776c:	425b      	neglt	r3, r3
 800776e:	f042 0202 	orrlt.w	r2, r2, #2
 8007772:	9307      	strge	r3, [sp, #28]
 8007774:	9307      	strlt	r3, [sp, #28]
 8007776:	bfb8      	it	lt
 8007778:	9204      	strlt	r2, [sp, #16]
 800777a:	7823      	ldrb	r3, [r4, #0]
 800777c:	2b2e      	cmp	r3, #46	; 0x2e
 800777e:	d10c      	bne.n	800779a <_vfiprintf_r+0x176>
 8007780:	7863      	ldrb	r3, [r4, #1]
 8007782:	2b2a      	cmp	r3, #42	; 0x2a
 8007784:	d135      	bne.n	80077f2 <_vfiprintf_r+0x1ce>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	1d1a      	adds	r2, r3, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	9203      	str	r2, [sp, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfb8      	it	lt
 8007792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007796:	3402      	adds	r4, #2
 8007798:	9305      	str	r3, [sp, #20]
 800779a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007880 <_vfiprintf_r+0x25c>
 800779e:	7821      	ldrb	r1, [r4, #0]
 80077a0:	2203      	movs	r2, #3
 80077a2:	4650      	mov	r0, sl
 80077a4:	f7f8 fd2c 	bl	8000200 <memchr>
 80077a8:	b140      	cbz	r0, 80077bc <_vfiprintf_r+0x198>
 80077aa:	2340      	movs	r3, #64	; 0x40
 80077ac:	eba0 000a 	sub.w	r0, r0, sl
 80077b0:	fa03 f000 	lsl.w	r0, r3, r0
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	4303      	orrs	r3, r0
 80077b8:	3401      	adds	r4, #1
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c0:	482c      	ldr	r0, [pc, #176]	; (8007874 <_vfiprintf_r+0x250>)
 80077c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c6:	2206      	movs	r2, #6
 80077c8:	f7f8 fd1a 	bl	8000200 <memchr>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d03f      	beq.n	8007850 <_vfiprintf_r+0x22c>
 80077d0:	4b29      	ldr	r3, [pc, #164]	; (8007878 <_vfiprintf_r+0x254>)
 80077d2:	bb1b      	cbnz	r3, 800781c <_vfiprintf_r+0x1f8>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	3307      	adds	r3, #7
 80077d8:	f023 0307 	bic.w	r3, r3, #7
 80077dc:	3308      	adds	r3, #8
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	443b      	add	r3, r7
 80077e4:	9309      	str	r3, [sp, #36]	; 0x24
 80077e6:	e767      	b.n	80076b8 <_vfiprintf_r+0x94>
 80077e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ec:	460c      	mov	r4, r1
 80077ee:	2001      	movs	r0, #1
 80077f0:	e7a5      	b.n	800773e <_vfiprintf_r+0x11a>
 80077f2:	2300      	movs	r3, #0
 80077f4:	3401      	adds	r4, #1
 80077f6:	9305      	str	r3, [sp, #20]
 80077f8:	4619      	mov	r1, r3
 80077fa:	f04f 0c0a 	mov.w	ip, #10
 80077fe:	4620      	mov	r0, r4
 8007800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007804:	3a30      	subs	r2, #48	; 0x30
 8007806:	2a09      	cmp	r2, #9
 8007808:	d903      	bls.n	8007812 <_vfiprintf_r+0x1ee>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0c5      	beq.n	800779a <_vfiprintf_r+0x176>
 800780e:	9105      	str	r1, [sp, #20]
 8007810:	e7c3      	b.n	800779a <_vfiprintf_r+0x176>
 8007812:	fb0c 2101 	mla	r1, ip, r1, r2
 8007816:	4604      	mov	r4, r0
 8007818:	2301      	movs	r3, #1
 800781a:	e7f0      	b.n	80077fe <_vfiprintf_r+0x1da>
 800781c:	ab03      	add	r3, sp, #12
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	462a      	mov	r2, r5
 8007822:	4b16      	ldr	r3, [pc, #88]	; (800787c <_vfiprintf_r+0x258>)
 8007824:	a904      	add	r1, sp, #16
 8007826:	4630      	mov	r0, r6
 8007828:	f7fd fe22 	bl	8005470 <_printf_float>
 800782c:	4607      	mov	r7, r0
 800782e:	1c78      	adds	r0, r7, #1
 8007830:	d1d6      	bne.n	80077e0 <_vfiprintf_r+0x1bc>
 8007832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007834:	07d9      	lsls	r1, r3, #31
 8007836:	d405      	bmi.n	8007844 <_vfiprintf_r+0x220>
 8007838:	89ab      	ldrh	r3, [r5, #12]
 800783a:	059a      	lsls	r2, r3, #22
 800783c:	d402      	bmi.n	8007844 <_vfiprintf_r+0x220>
 800783e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007840:	f000 faaf 	bl	8007da2 <__retarget_lock_release_recursive>
 8007844:	89ab      	ldrh	r3, [r5, #12]
 8007846:	065b      	lsls	r3, r3, #25
 8007848:	f53f af12 	bmi.w	8007670 <_vfiprintf_r+0x4c>
 800784c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800784e:	e711      	b.n	8007674 <_vfiprintf_r+0x50>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4b09      	ldr	r3, [pc, #36]	; (800787c <_vfiprintf_r+0x258>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4630      	mov	r0, r6
 800785c:	f7fe f8ac 	bl	80059b8 <_printf_i>
 8007860:	e7e4      	b.n	800782c <_vfiprintf_r+0x208>
 8007862:	bf00      	nop
 8007864:	0800844c 	.word	0x0800844c
 8007868:	0800846c 	.word	0x0800846c
 800786c:	0800842c 	.word	0x0800842c
 8007870:	080082d4 	.word	0x080082d4
 8007874:	080082de 	.word	0x080082de
 8007878:	08005471 	.word	0x08005471
 800787c:	080075ff 	.word	0x080075ff
 8007880:	080082da 	.word	0x080082da

08007884 <__swbuf_r>:
 8007884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007886:	460e      	mov	r6, r1
 8007888:	4614      	mov	r4, r2
 800788a:	4605      	mov	r5, r0
 800788c:	b118      	cbz	r0, 8007896 <__swbuf_r+0x12>
 800788e:	6983      	ldr	r3, [r0, #24]
 8007890:	b90b      	cbnz	r3, 8007896 <__swbuf_r+0x12>
 8007892:	f000 f9e7 	bl	8007c64 <__sinit>
 8007896:	4b21      	ldr	r3, [pc, #132]	; (800791c <__swbuf_r+0x98>)
 8007898:	429c      	cmp	r4, r3
 800789a:	d12b      	bne.n	80078f4 <__swbuf_r+0x70>
 800789c:	686c      	ldr	r4, [r5, #4]
 800789e:	69a3      	ldr	r3, [r4, #24]
 80078a0:	60a3      	str	r3, [r4, #8]
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	071a      	lsls	r2, r3, #28
 80078a6:	d52f      	bpl.n	8007908 <__swbuf_r+0x84>
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	b36b      	cbz	r3, 8007908 <__swbuf_r+0x84>
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1ac0      	subs	r0, r0, r3
 80078b2:	6963      	ldr	r3, [r4, #20]
 80078b4:	b2f6      	uxtb	r6, r6
 80078b6:	4283      	cmp	r3, r0
 80078b8:	4637      	mov	r7, r6
 80078ba:	dc04      	bgt.n	80078c6 <__swbuf_r+0x42>
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 f93c 	bl	8007b3c <_fflush_r>
 80078c4:	bb30      	cbnz	r0, 8007914 <__swbuf_r+0x90>
 80078c6:	68a3      	ldr	r3, [r4, #8]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	6022      	str	r2, [r4, #0]
 80078d2:	701e      	strb	r6, [r3, #0]
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	3001      	adds	r0, #1
 80078d8:	4283      	cmp	r3, r0
 80078da:	d004      	beq.n	80078e6 <__swbuf_r+0x62>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d506      	bpl.n	80078f0 <__swbuf_r+0x6c>
 80078e2:	2e0a      	cmp	r6, #10
 80078e4:	d104      	bne.n	80078f0 <__swbuf_r+0x6c>
 80078e6:	4621      	mov	r1, r4
 80078e8:	4628      	mov	r0, r5
 80078ea:	f000 f927 	bl	8007b3c <_fflush_r>
 80078ee:	b988      	cbnz	r0, 8007914 <__swbuf_r+0x90>
 80078f0:	4638      	mov	r0, r7
 80078f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <__swbuf_r+0x9c>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	d101      	bne.n	80078fe <__swbuf_r+0x7a>
 80078fa:	68ac      	ldr	r4, [r5, #8]
 80078fc:	e7cf      	b.n	800789e <__swbuf_r+0x1a>
 80078fe:	4b09      	ldr	r3, [pc, #36]	; (8007924 <__swbuf_r+0xa0>)
 8007900:	429c      	cmp	r4, r3
 8007902:	bf08      	it	eq
 8007904:	68ec      	ldreq	r4, [r5, #12]
 8007906:	e7ca      	b.n	800789e <__swbuf_r+0x1a>
 8007908:	4621      	mov	r1, r4
 800790a:	4628      	mov	r0, r5
 800790c:	f000 f81a 	bl	8007944 <__swsetup_r>
 8007910:	2800      	cmp	r0, #0
 8007912:	d0cb      	beq.n	80078ac <__swbuf_r+0x28>
 8007914:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007918:	e7ea      	b.n	80078f0 <__swbuf_r+0x6c>
 800791a:	bf00      	nop
 800791c:	0800844c 	.word	0x0800844c
 8007920:	0800846c 	.word	0x0800846c
 8007924:	0800842c 	.word	0x0800842c

08007928 <__ascii_wctomb>:
 8007928:	b149      	cbz	r1, 800793e <__ascii_wctomb+0x16>
 800792a:	2aff      	cmp	r2, #255	; 0xff
 800792c:	bf85      	ittet	hi
 800792e:	238a      	movhi	r3, #138	; 0x8a
 8007930:	6003      	strhi	r3, [r0, #0]
 8007932:	700a      	strbls	r2, [r1, #0]
 8007934:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007938:	bf98      	it	ls
 800793a:	2001      	movls	r0, #1
 800793c:	4770      	bx	lr
 800793e:	4608      	mov	r0, r1
 8007940:	4770      	bx	lr
	...

08007944 <__swsetup_r>:
 8007944:	4b32      	ldr	r3, [pc, #200]	; (8007a10 <__swsetup_r+0xcc>)
 8007946:	b570      	push	{r4, r5, r6, lr}
 8007948:	681d      	ldr	r5, [r3, #0]
 800794a:	4606      	mov	r6, r0
 800794c:	460c      	mov	r4, r1
 800794e:	b125      	cbz	r5, 800795a <__swsetup_r+0x16>
 8007950:	69ab      	ldr	r3, [r5, #24]
 8007952:	b913      	cbnz	r3, 800795a <__swsetup_r+0x16>
 8007954:	4628      	mov	r0, r5
 8007956:	f000 f985 	bl	8007c64 <__sinit>
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <__swsetup_r+0xd0>)
 800795c:	429c      	cmp	r4, r3
 800795e:	d10f      	bne.n	8007980 <__swsetup_r+0x3c>
 8007960:	686c      	ldr	r4, [r5, #4]
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007968:	0719      	lsls	r1, r3, #28
 800796a:	d42c      	bmi.n	80079c6 <__swsetup_r+0x82>
 800796c:	06dd      	lsls	r5, r3, #27
 800796e:	d411      	bmi.n	8007994 <__swsetup_r+0x50>
 8007970:	2309      	movs	r3, #9
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797e:	e03e      	b.n	80079fe <__swsetup_r+0xba>
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <__swsetup_r+0xd4>)
 8007982:	429c      	cmp	r4, r3
 8007984:	d101      	bne.n	800798a <__swsetup_r+0x46>
 8007986:	68ac      	ldr	r4, [r5, #8]
 8007988:	e7eb      	b.n	8007962 <__swsetup_r+0x1e>
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <__swsetup_r+0xd8>)
 800798c:	429c      	cmp	r4, r3
 800798e:	bf08      	it	eq
 8007990:	68ec      	ldreq	r4, [r5, #12]
 8007992:	e7e6      	b.n	8007962 <__swsetup_r+0x1e>
 8007994:	0758      	lsls	r0, r3, #29
 8007996:	d512      	bpl.n	80079be <__swsetup_r+0x7a>
 8007998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799a:	b141      	cbz	r1, 80079ae <__swsetup_r+0x6a>
 800799c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d002      	beq.n	80079aa <__swsetup_r+0x66>
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7ff fb6f 	bl	8007088 <_free_r>
 80079aa:	2300      	movs	r3, #0
 80079ac:	6363      	str	r3, [r4, #52]	; 0x34
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	2300      	movs	r3, #0
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f043 0308 	orr.w	r3, r3, #8
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	b94b      	cbnz	r3, 80079de <__swsetup_r+0x9a>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d4:	d003      	beq.n	80079de <__swsetup_r+0x9a>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 fa07 	bl	8007dec <__smakebuf_r>
 80079de:	89a0      	ldrh	r0, [r4, #12]
 80079e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e4:	f010 0301 	ands.w	r3, r0, #1
 80079e8:	d00a      	beq.n	8007a00 <__swsetup_r+0xbc>
 80079ea:	2300      	movs	r3, #0
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	6963      	ldr	r3, [r4, #20]
 80079f0:	425b      	negs	r3, r3
 80079f2:	61a3      	str	r3, [r4, #24]
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	b943      	cbnz	r3, 8007a0a <__swsetup_r+0xc6>
 80079f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079fc:	d1ba      	bne.n	8007974 <__swsetup_r+0x30>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	0781      	lsls	r1, r0, #30
 8007a02:	bf58      	it	pl
 8007a04:	6963      	ldrpl	r3, [r4, #20]
 8007a06:	60a3      	str	r3, [r4, #8]
 8007a08:	e7f4      	b.n	80079f4 <__swsetup_r+0xb0>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e7f7      	b.n	80079fe <__swsetup_r+0xba>
 8007a0e:	bf00      	nop
 8007a10:	2000000c 	.word	0x2000000c
 8007a14:	0800844c 	.word	0x0800844c
 8007a18:	0800846c 	.word	0x0800846c
 8007a1c:	0800842c 	.word	0x0800842c

08007a20 <abort>:
 8007a20:	b508      	push	{r3, lr}
 8007a22:	2006      	movs	r0, #6
 8007a24:	f000 fa52 	bl	8007ecc <raise>
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7fa fa79 	bl	8001f20 <_exit>
	...

08007a30 <__sflush_r>:
 8007a30:	898a      	ldrh	r2, [r1, #12]
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	4605      	mov	r5, r0
 8007a38:	0710      	lsls	r0, r2, #28
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	d458      	bmi.n	8007af0 <__sflush_r+0xc0>
 8007a3e:	684b      	ldr	r3, [r1, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dc05      	bgt.n	8007a50 <__sflush_r+0x20>
 8007a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dc02      	bgt.n	8007a50 <__sflush_r+0x20>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d0f9      	beq.n	8007a4a <__sflush_r+0x1a>
 8007a56:	2300      	movs	r3, #0
 8007a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a5c:	682f      	ldr	r7, [r5, #0]
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	d032      	beq.n	8007ac8 <__sflush_r+0x98>
 8007a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	075a      	lsls	r2, r3, #29
 8007a68:	d505      	bpl.n	8007a76 <__sflush_r+0x46>
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	1ac0      	subs	r0, r0, r3
 8007a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a70:	b10b      	cbz	r3, 8007a76 <__sflush_r+0x46>
 8007a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a74:	1ac0      	subs	r0, r0, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7c:	6a21      	ldr	r1, [r4, #32]
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b0      	blx	r6
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	d106      	bne.n	8007a96 <__sflush_r+0x66>
 8007a88:	6829      	ldr	r1, [r5, #0]
 8007a8a:	291d      	cmp	r1, #29
 8007a8c:	d82c      	bhi.n	8007ae8 <__sflush_r+0xb8>
 8007a8e:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <__sflush_r+0x108>)
 8007a90:	40ca      	lsrs	r2, r1
 8007a92:	07d6      	lsls	r6, r2, #31
 8007a94:	d528      	bpl.n	8007ae8 <__sflush_r+0xb8>
 8007a96:	2200      	movs	r2, #0
 8007a98:	6062      	str	r2, [r4, #4]
 8007a9a:	04d9      	lsls	r1, r3, #19
 8007a9c:	6922      	ldr	r2, [r4, #16]
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	d504      	bpl.n	8007aac <__sflush_r+0x7c>
 8007aa2:	1c42      	adds	r2, r0, #1
 8007aa4:	d101      	bne.n	8007aaa <__sflush_r+0x7a>
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	b903      	cbnz	r3, 8007aac <__sflush_r+0x7c>
 8007aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8007aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aae:	602f      	str	r7, [r5, #0]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d0ca      	beq.n	8007a4a <__sflush_r+0x1a>
 8007ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab8:	4299      	cmp	r1, r3
 8007aba:	d002      	beq.n	8007ac2 <__sflush_r+0x92>
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7ff fae3 	bl	8007088 <_free_r>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ac6:	e7c1      	b.n	8007a4c <__sflush_r+0x1c>
 8007ac8:	6a21      	ldr	r1, [r4, #32]
 8007aca:	2301      	movs	r3, #1
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b0      	blx	r6
 8007ad0:	1c41      	adds	r1, r0, #1
 8007ad2:	d1c7      	bne.n	8007a64 <__sflush_r+0x34>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0c4      	beq.n	8007a64 <__sflush_r+0x34>
 8007ada:	2b1d      	cmp	r3, #29
 8007adc:	d001      	beq.n	8007ae2 <__sflush_r+0xb2>
 8007ade:	2b16      	cmp	r3, #22
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0xb6>
 8007ae2:	602f      	str	r7, [r5, #0]
 8007ae4:	e7b1      	b.n	8007a4a <__sflush_r+0x1a>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	e7ad      	b.n	8007a4c <__sflush_r+0x1c>
 8007af0:	690f      	ldr	r7, [r1, #16]
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	d0a9      	beq.n	8007a4a <__sflush_r+0x1a>
 8007af6:	0793      	lsls	r3, r2, #30
 8007af8:	680e      	ldr	r6, [r1, #0]
 8007afa:	bf08      	it	eq
 8007afc:	694b      	ldreq	r3, [r1, #20]
 8007afe:	600f      	str	r7, [r1, #0]
 8007b00:	bf18      	it	ne
 8007b02:	2300      	movne	r3, #0
 8007b04:	eba6 0807 	sub.w	r8, r6, r7
 8007b08:	608b      	str	r3, [r1, #8]
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	dd9c      	ble.n	8007a4a <__sflush_r+0x1a>
 8007b10:	6a21      	ldr	r1, [r4, #32]
 8007b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b14:	4643      	mov	r3, r8
 8007b16:	463a      	mov	r2, r7
 8007b18:	4628      	mov	r0, r5
 8007b1a:	47b0      	blx	r6
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc06      	bgt.n	8007b2e <__sflush_r+0xfe>
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b2c:	e78e      	b.n	8007a4c <__sflush_r+0x1c>
 8007b2e:	4407      	add	r7, r0
 8007b30:	eba8 0800 	sub.w	r8, r8, r0
 8007b34:	e7e9      	b.n	8007b0a <__sflush_r+0xda>
 8007b36:	bf00      	nop
 8007b38:	20400001 	.word	0x20400001

08007b3c <_fflush_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	4605      	mov	r5, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	b913      	cbnz	r3, 8007b4c <_fflush_r+0x10>
 8007b46:	2500      	movs	r5, #0
 8007b48:	4628      	mov	r0, r5
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	b118      	cbz	r0, 8007b56 <_fflush_r+0x1a>
 8007b4e:	6983      	ldr	r3, [r0, #24]
 8007b50:	b90b      	cbnz	r3, 8007b56 <_fflush_r+0x1a>
 8007b52:	f000 f887 	bl	8007c64 <__sinit>
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <_fflush_r+0x6c>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d11b      	bne.n	8007b94 <_fflush_r+0x58>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0ef      	beq.n	8007b46 <_fflush_r+0xa>
 8007b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b68:	07d0      	lsls	r0, r2, #31
 8007b6a:	d404      	bmi.n	8007b76 <_fflush_r+0x3a>
 8007b6c:	0599      	lsls	r1, r3, #22
 8007b6e:	d402      	bmi.n	8007b76 <_fflush_r+0x3a>
 8007b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b72:	f000 f915 	bl	8007da0 <__retarget_lock_acquire_recursive>
 8007b76:	4628      	mov	r0, r5
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7ff ff59 	bl	8007a30 <__sflush_r>
 8007b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b80:	07da      	lsls	r2, r3, #31
 8007b82:	4605      	mov	r5, r0
 8007b84:	d4e0      	bmi.n	8007b48 <_fflush_r+0xc>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	059b      	lsls	r3, r3, #22
 8007b8a:	d4dd      	bmi.n	8007b48 <_fflush_r+0xc>
 8007b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8e:	f000 f908 	bl	8007da2 <__retarget_lock_release_recursive>
 8007b92:	e7d9      	b.n	8007b48 <_fflush_r+0xc>
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <_fflush_r+0x70>)
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d101      	bne.n	8007b9e <_fflush_r+0x62>
 8007b9a:	68ac      	ldr	r4, [r5, #8]
 8007b9c:	e7df      	b.n	8007b5e <_fflush_r+0x22>
 8007b9e:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <_fflush_r+0x74>)
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	bf08      	it	eq
 8007ba4:	68ec      	ldreq	r4, [r5, #12]
 8007ba6:	e7da      	b.n	8007b5e <_fflush_r+0x22>
 8007ba8:	0800844c 	.word	0x0800844c
 8007bac:	0800846c 	.word	0x0800846c
 8007bb0:	0800842c 	.word	0x0800842c

08007bb4 <std>:
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	e9c0 3300 	strd	r3, r3, [r0]
 8007bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bc2:	6083      	str	r3, [r0, #8]
 8007bc4:	8181      	strh	r1, [r0, #12]
 8007bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007bc8:	81c2      	strh	r2, [r0, #14]
 8007bca:	6183      	str	r3, [r0, #24]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	2208      	movs	r2, #8
 8007bd0:	305c      	adds	r0, #92	; 0x5c
 8007bd2:	f7fd fba5 	bl	8005320 <memset>
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <std+0x38>)
 8007bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <std+0x3c>)
 8007bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <std+0x40>)
 8007be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <std+0x44>)
 8007be4:	6224      	str	r4, [r4, #32]
 8007be6:	6323      	str	r3, [r4, #48]	; 0x30
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	bf00      	nop
 8007bec:	08007f05 	.word	0x08007f05
 8007bf0:	08007f27 	.word	0x08007f27
 8007bf4:	08007f5f 	.word	0x08007f5f
 8007bf8:	08007f83 	.word	0x08007f83

08007bfc <_cleanup_r>:
 8007bfc:	4901      	ldr	r1, [pc, #4]	; (8007c04 <_cleanup_r+0x8>)
 8007bfe:	f000 b8af 	b.w	8007d60 <_fwalk_reent>
 8007c02:	bf00      	nop
 8007c04:	08007b3d 	.word	0x08007b3d

08007c08 <__sfmoreglue>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	1e4a      	subs	r2, r1, #1
 8007c0c:	2568      	movs	r5, #104	; 0x68
 8007c0e:	4355      	muls	r5, r2
 8007c10:	460e      	mov	r6, r1
 8007c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c16:	f7ff fa87 	bl	8007128 <_malloc_r>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	b140      	cbz	r0, 8007c30 <__sfmoreglue+0x28>
 8007c1e:	2100      	movs	r1, #0
 8007c20:	e9c0 1600 	strd	r1, r6, [r0]
 8007c24:	300c      	adds	r0, #12
 8007c26:	60a0      	str	r0, [r4, #8]
 8007c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c2c:	f7fd fb78 	bl	8005320 <memset>
 8007c30:	4620      	mov	r0, r4
 8007c32:	bd70      	pop	{r4, r5, r6, pc}

08007c34 <__sfp_lock_acquire>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__sfp_lock_acquire+0x8>)
 8007c36:	f000 b8b3 	b.w	8007da0 <__retarget_lock_acquire_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	200003b8 	.word	0x200003b8

08007c40 <__sfp_lock_release>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__sfp_lock_release+0x8>)
 8007c42:	f000 b8ae 	b.w	8007da2 <__retarget_lock_release_recursive>
 8007c46:	bf00      	nop
 8007c48:	200003b8 	.word	0x200003b8

08007c4c <__sinit_lock_acquire>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__sinit_lock_acquire+0x8>)
 8007c4e:	f000 b8a7 	b.w	8007da0 <__retarget_lock_acquire_recursive>
 8007c52:	bf00      	nop
 8007c54:	200003b3 	.word	0x200003b3

08007c58 <__sinit_lock_release>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__sinit_lock_release+0x8>)
 8007c5a:	f000 b8a2 	b.w	8007da2 <__retarget_lock_release_recursive>
 8007c5e:	bf00      	nop
 8007c60:	200003b3 	.word	0x200003b3

08007c64 <__sinit>:
 8007c64:	b510      	push	{r4, lr}
 8007c66:	4604      	mov	r4, r0
 8007c68:	f7ff fff0 	bl	8007c4c <__sinit_lock_acquire>
 8007c6c:	69a3      	ldr	r3, [r4, #24]
 8007c6e:	b11b      	cbz	r3, 8007c78 <__sinit+0x14>
 8007c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c74:	f7ff bff0 	b.w	8007c58 <__sinit_lock_release>
 8007c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <__sinit+0x68>)
 8007c80:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <__sinit+0x6c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	bf04      	itt	eq
 8007c8a:	2301      	moveq	r3, #1
 8007c8c:	61a3      	streq	r3, [r4, #24]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f820 	bl	8007cd4 <__sfp>
 8007c94:	6060      	str	r0, [r4, #4]
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f81c 	bl	8007cd4 <__sfp>
 8007c9c:	60a0      	str	r0, [r4, #8]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 f818 	bl	8007cd4 <__sfp>
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	60e0      	str	r0, [r4, #12]
 8007ca8:	2104      	movs	r1, #4
 8007caa:	6860      	ldr	r0, [r4, #4]
 8007cac:	f7ff ff82 	bl	8007bb4 <std>
 8007cb0:	68a0      	ldr	r0, [r4, #8]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	2109      	movs	r1, #9
 8007cb6:	f7ff ff7d 	bl	8007bb4 <std>
 8007cba:	68e0      	ldr	r0, [r4, #12]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	2112      	movs	r1, #18
 8007cc0:	f7ff ff78 	bl	8007bb4 <std>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	61a3      	str	r3, [r4, #24]
 8007cc8:	e7d2      	b.n	8007c70 <__sinit+0xc>
 8007cca:	bf00      	nop
 8007ccc:	080080a8 	.word	0x080080a8
 8007cd0:	08007bfd 	.word	0x08007bfd

08007cd4 <__sfp>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	f7ff ffac 	bl	8007c34 <__sfp_lock_acquire>
 8007cdc:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <__sfp+0x84>)
 8007cde:	681e      	ldr	r6, [r3, #0]
 8007ce0:	69b3      	ldr	r3, [r6, #24]
 8007ce2:	b913      	cbnz	r3, 8007cea <__sfp+0x16>
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f7ff ffbd 	bl	8007c64 <__sinit>
 8007cea:	3648      	adds	r6, #72	; 0x48
 8007cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	d503      	bpl.n	8007cfc <__sfp+0x28>
 8007cf4:	6833      	ldr	r3, [r6, #0]
 8007cf6:	b30b      	cbz	r3, 8007d3c <__sfp+0x68>
 8007cf8:	6836      	ldr	r6, [r6, #0]
 8007cfa:	e7f7      	b.n	8007cec <__sfp+0x18>
 8007cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d00:	b9d5      	cbnz	r5, 8007d38 <__sfp+0x64>
 8007d02:	4b16      	ldr	r3, [pc, #88]	; (8007d5c <__sfp+0x88>)
 8007d04:	60e3      	str	r3, [r4, #12]
 8007d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8007d0c:	f000 f847 	bl	8007d9e <__retarget_lock_init_recursive>
 8007d10:	f7ff ff96 	bl	8007c40 <__sfp_lock_release>
 8007d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	61a5      	str	r5, [r4, #24]
 8007d20:	2208      	movs	r2, #8
 8007d22:	4629      	mov	r1, r5
 8007d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d28:	f7fd fafa 	bl	8005320 <memset>
 8007d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d34:	4620      	mov	r0, r4
 8007d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d38:	3468      	adds	r4, #104	; 0x68
 8007d3a:	e7d9      	b.n	8007cf0 <__sfp+0x1c>
 8007d3c:	2104      	movs	r1, #4
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f7ff ff62 	bl	8007c08 <__sfmoreglue>
 8007d44:	4604      	mov	r4, r0
 8007d46:	6030      	str	r0, [r6, #0]
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1d5      	bne.n	8007cf8 <__sfp+0x24>
 8007d4c:	f7ff ff78 	bl	8007c40 <__sfp_lock_release>
 8007d50:	230c      	movs	r3, #12
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	e7ee      	b.n	8007d34 <__sfp+0x60>
 8007d56:	bf00      	nop
 8007d58:	080080a8 	.word	0x080080a8
 8007d5c:	ffff0001 	.word	0xffff0001

08007d60 <_fwalk_reent>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	4606      	mov	r6, r0
 8007d66:	4688      	mov	r8, r1
 8007d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d72:	f1b9 0901 	subs.w	r9, r9, #1
 8007d76:	d505      	bpl.n	8007d84 <_fwalk_reent+0x24>
 8007d78:	6824      	ldr	r4, [r4, #0]
 8007d7a:	2c00      	cmp	r4, #0
 8007d7c:	d1f7      	bne.n	8007d6e <_fwalk_reent+0xe>
 8007d7e:	4638      	mov	r0, r7
 8007d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d84:	89ab      	ldrh	r3, [r5, #12]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d907      	bls.n	8007d9a <_fwalk_reent+0x3a>
 8007d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	d003      	beq.n	8007d9a <_fwalk_reent+0x3a>
 8007d92:	4629      	mov	r1, r5
 8007d94:	4630      	mov	r0, r6
 8007d96:	47c0      	blx	r8
 8007d98:	4307      	orrs	r7, r0
 8007d9a:	3568      	adds	r5, #104	; 0x68
 8007d9c:	e7e9      	b.n	8007d72 <_fwalk_reent+0x12>

08007d9e <__retarget_lock_init_recursive>:
 8007d9e:	4770      	bx	lr

08007da0 <__retarget_lock_acquire_recursive>:
 8007da0:	4770      	bx	lr

08007da2 <__retarget_lock_release_recursive>:
 8007da2:	4770      	bx	lr

08007da4 <__swhatbuf_r>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	460e      	mov	r6, r1
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	2900      	cmp	r1, #0
 8007dae:	b096      	sub	sp, #88	; 0x58
 8007db0:	4614      	mov	r4, r2
 8007db2:	461d      	mov	r5, r3
 8007db4:	da07      	bge.n	8007dc6 <__swhatbuf_r+0x22>
 8007db6:	2300      	movs	r3, #0
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	89b3      	ldrh	r3, [r6, #12]
 8007dbc:	061a      	lsls	r2, r3, #24
 8007dbe:	d410      	bmi.n	8007de2 <__swhatbuf_r+0x3e>
 8007dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc4:	e00e      	b.n	8007de4 <__swhatbuf_r+0x40>
 8007dc6:	466a      	mov	r2, sp
 8007dc8:	f000 f902 	bl	8007fd0 <_fstat_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	dbf2      	blt.n	8007db6 <__swhatbuf_r+0x12>
 8007dd0:	9a01      	ldr	r2, [sp, #4]
 8007dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dda:	425a      	negs	r2, r3
 8007ddc:	415a      	adcs	r2, r3
 8007dde:	602a      	str	r2, [r5, #0]
 8007de0:	e7ee      	b.n	8007dc0 <__swhatbuf_r+0x1c>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	2000      	movs	r0, #0
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	b016      	add	sp, #88	; 0x58
 8007dea:	bd70      	pop	{r4, r5, r6, pc}

08007dec <__smakebuf_r>:
 8007dec:	898b      	ldrh	r3, [r1, #12]
 8007dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df0:	079d      	lsls	r5, r3, #30
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d507      	bpl.n	8007e08 <__smakebuf_r+0x1c>
 8007df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2301      	movs	r3, #1
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	b002      	add	sp, #8
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	ab01      	add	r3, sp, #4
 8007e0a:	466a      	mov	r2, sp
 8007e0c:	f7ff ffca 	bl	8007da4 <__swhatbuf_r>
 8007e10:	9900      	ldr	r1, [sp, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff f987 	bl	8007128 <_malloc_r>
 8007e1a:	b948      	cbnz	r0, 8007e30 <__smakebuf_r+0x44>
 8007e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d4ef      	bmi.n	8007e04 <__smakebuf_r+0x18>
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	f043 0302 	orr.w	r3, r3, #2
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7e3      	b.n	8007df8 <__smakebuf_r+0xc>
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <__smakebuf_r+0x7c>)
 8007e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	6020      	str	r0, [r4, #0]
 8007e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	6163      	str	r3, [r4, #20]
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	6120      	str	r0, [r4, #16]
 8007e46:	b15b      	cbz	r3, 8007e60 <__smakebuf_r+0x74>
 8007e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f000 f8d1 	bl	8007ff4 <_isatty_r>
 8007e52:	b128      	cbz	r0, 8007e60 <__smakebuf_r+0x74>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	89a0      	ldrh	r0, [r4, #12]
 8007e62:	4305      	orrs	r5, r0
 8007e64:	81a5      	strh	r5, [r4, #12]
 8007e66:	e7cd      	b.n	8007e04 <__smakebuf_r+0x18>
 8007e68:	08007bfd 	.word	0x08007bfd

08007e6c <_malloc_usable_size_r>:
 8007e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e70:	1f18      	subs	r0, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbc      	itt	lt
 8007e76:	580b      	ldrlt	r3, [r1, r0]
 8007e78:	18c0      	addlt	r0, r0, r3
 8007e7a:	4770      	bx	lr

08007e7c <_raise_r>:
 8007e7c:	291f      	cmp	r1, #31
 8007e7e:	b538      	push	{r3, r4, r5, lr}
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	d904      	bls.n	8007e90 <_raise_r+0x14>
 8007e86:	2316      	movs	r3, #22
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e92:	b112      	cbz	r2, 8007e9a <_raise_r+0x1e>
 8007e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e98:	b94b      	cbnz	r3, 8007eae <_raise_r+0x32>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f830 	bl	8007f00 <_getpid_r>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eaa:	f000 b817 	b.w	8007edc <_kill_r>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d00a      	beq.n	8007ec8 <_raise_r+0x4c>
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	d103      	bne.n	8007ebe <_raise_r+0x42>
 8007eb6:	2316      	movs	r3, #22
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7e7      	b.n	8007e8e <_raise_r+0x12>
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	4798      	blx	r3
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7e0      	b.n	8007e8e <_raise_r+0x12>

08007ecc <raise>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <raise+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bfd3 	b.w	8007e7c <_raise_r>
 8007ed6:	bf00      	nop
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <_kill_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_kill_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7fa f809 	bl	8001f00 <_kill>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_kill_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_kill_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	200003ac 	.word	0x200003ac

08007f00 <_getpid_r>:
 8007f00:	f7f9 bff6 	b.w	8001ef0 <_getpid>

08007f04 <__sread>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	460c      	mov	r4, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	f000 f894 	bl	8008038 <_read_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	bfab      	itete	ge
 8007f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f16:	89a3      	ldrhlt	r3, [r4, #12]
 8007f18:	181b      	addge	r3, r3, r0
 8007f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f1e:	bfac      	ite	ge
 8007f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f22:	81a3      	strhlt	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__swrite>:
 8007f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	05db      	lsls	r3, r3, #23
 8007f30:	4605      	mov	r5, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4616      	mov	r6, r2
 8007f36:	d505      	bpl.n	8007f44 <__swrite+0x1e>
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f000 f868 	bl	8008014 <_lseek_r>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	4632      	mov	r2, r6
 8007f52:	463b      	mov	r3, r7
 8007f54:	4628      	mov	r0, r5
 8007f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	f000 b817 	b.w	8007f8c <_write_r>

08007f5e <__sseek>:
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 f855 	bl	8008014 <_lseek_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	bf15      	itete	ne
 8007f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strheq	r3, [r4, #12]
 8007f7c:	bf18      	it	ne
 8007f7e:	81a3      	strhne	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__sclose>:
 8007f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f86:	f000 b813 	b.w	8007fb0 <_close_r>
	...

08007f8c <_write_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	; (8007fac <_write_r+0x20>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4608      	mov	r0, r1
 8007f94:	4611      	mov	r1, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7f9 ffe7 	bl	8001f6e <_write>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_write_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_write_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200003ac 	.word	0x200003ac

08007fb0 <_close_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	; (8007fcc <_close_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f9 fff3 	bl	8001fa6 <_close>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_close_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_close_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	200003ac 	.word	0x200003ac

08007fd0 <_fstat_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	; (8007ff0 <_fstat_r+0x20>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f7f9 ffee 	bl	8001fbe <_fstat>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d102      	bne.n	8007fec <_fstat_r+0x1c>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b103      	cbz	r3, 8007fec <_fstat_r+0x1c>
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	200003ac 	.word	0x200003ac

08007ff4 <_isatty_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	; (8008010 <_isatty_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f9 ffed 	bl	8001fde <_isatty>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_isatty_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_isatty_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	200003ac 	.word	0x200003ac

08008014 <_lseek_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d07      	ldr	r5, [pc, #28]	; (8008034 <_lseek_r+0x20>)
 8008018:	4604      	mov	r4, r0
 800801a:	4608      	mov	r0, r1
 800801c:	4611      	mov	r1, r2
 800801e:	2200      	movs	r2, #0
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f7f9 ffe6 	bl	8001ff4 <_lseek>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_lseek_r+0x1e>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_lseek_r+0x1e>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	200003ac 	.word	0x200003ac

08008038 <_read_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4d07      	ldr	r5, [pc, #28]	; (8008058 <_read_r+0x20>)
 800803c:	4604      	mov	r4, r0
 800803e:	4608      	mov	r0, r1
 8008040:	4611      	mov	r1, r2
 8008042:	2200      	movs	r2, #0
 8008044:	602a      	str	r2, [r5, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f7f9 ff74 	bl	8001f34 <_read>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_read_r+0x1e>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_read_r+0x1e>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	200003ac 	.word	0x200003ac

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
